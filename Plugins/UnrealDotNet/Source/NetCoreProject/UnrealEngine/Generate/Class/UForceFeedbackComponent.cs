using System;
using System.Runtime.InteropServices;

namespace UnrealEngine
{
	
	/// <summary>
	/// ForceFeedbackComponent allows placing a rumble effect in to the world and having it apply to player characters who come near it
	/// </summary>
	public partial class UForceFeedbackComponent : USceneComponent
	{
		public UForceFeedbackComponent(IntPtr Adress)
			: base(Adress)
		{
		}

		
		#region DLLInmport
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern byte E_PROP_UForceFeedbackComponent_bAutoDestroy_GET(IntPtr Ptr);
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern void E_PROP_UForceFeedbackComponent_bAutoDestroy_SET(IntPtr Ptr, byte Value);
		
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern byte E_PROP_UForceFeedbackComponent_bStopWhenOwnerDestroyed_GET(IntPtr Ptr);
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern void E_PROP_UForceFeedbackComponent_bStopWhenOwnerDestroyed_SET(IntPtr Ptr, byte Value);
		
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern byte E_PROP_UForceFeedbackComponent_bLooping_GET(IntPtr Ptr);
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern void E_PROP_UForceFeedbackComponent_bLooping_SET(IntPtr Ptr, byte Value);
		
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern byte E_PROP_UForceFeedbackComponent_bOverrideAttenuation_GET(IntPtr Ptr);
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern void E_PROP_UForceFeedbackComponent_bOverrideAttenuation_SET(IntPtr Ptr, byte Value);
		
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern float E_PROP_UForceFeedbackComponent_IntensityMultiplier_GET(IntPtr Ptr);
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern void E_PROP_UForceFeedbackComponent_IntensityMultiplier_SET(IntPtr Ptr, float Value);
		
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern void E_UForceFeedbackComponent_Play(IntPtr Self, float StartTime);
		
		[DllImport(NativeManager.UnrealDotNetDLL, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
		private static extern void E_UForceFeedbackComponent_Stop(IntPtr Self);
		
		#endregion
		
		#region Property
		public byte bAutoDestroy
		{
			get => E_PROP_UForceFeedbackComponent_bAutoDestroy_GET(NativePointer);
			set => E_PROP_UForceFeedbackComponent_bAutoDestroy_SET(NativePointer, value);
		}

		public byte bStopWhenOwnerDestroyed
		{
			get => E_PROP_UForceFeedbackComponent_bStopWhenOwnerDestroyed_GET(NativePointer);
			set => E_PROP_UForceFeedbackComponent_bStopWhenOwnerDestroyed_SET(NativePointer, value);
		}

		public byte bLooping
		{
			get => E_PROP_UForceFeedbackComponent_bLooping_GET(NativePointer);
			set => E_PROP_UForceFeedbackComponent_bLooping_SET(NativePointer, value);
		}

		
		/// <summary>
		/// Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties
		/// </summary>
		public byte bOverrideAttenuation
		{
			get => E_PROP_UForceFeedbackComponent_bOverrideAttenuation_GET(NativePointer);
			set => E_PROP_UForceFeedbackComponent_bOverrideAttenuation_SET(NativePointer, value);
		}

		
		/// <summary>
		/// The intensity multiplier to apply to effects generated by this component
		/// </summary>
		public float IntensityMultiplier
		{
			get => E_PROP_UForceFeedbackComponent_IntensityMultiplier_GET(NativePointer);
			set => E_PROP_UForceFeedbackComponent_IntensityMultiplier_SET(NativePointer, value);
		}

		#endregion
		
		#region ExternMethods
		
		/// <summary>
		/// Start a feedback effect playing
		/// </summary>
		public void Play(float StartTime)
			=> E_UForceFeedbackComponent_Play(NativePointer, StartTime);
		
		
		/// <summary>
		/// Stop playing the feedback effect
		/// </summary>
		public void Stop()
			=> E_UForceFeedbackComponent_Stop(NativePointer);
		
		#endregion
		
		public static implicit operator IntPtr(UForceFeedbackComponent Self)
		{
			return Self.NativePointer;
		}

		public static implicit operator UForceFeedbackComponent(IntPtr Adress)
		{
			return Adress == IntPtr.Zero ? null : new UForceFeedbackComponent(Adress);
		}}}
