//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CPP14.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class CPP14Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, MultiLineMacro=8, 
		Directive=9, Alignas=10, Alignof=11, Asm=12, Auto=13, Bool=14, Break=15, 
		Case=16, Catch=17, Char=18, Char16=19, Char32=20, Class=21, Const=22, 
		Constexpr=23, Const_cast=24, Continue=25, Decltype=26, Default=27, Delete=28, 
		Do=29, Double=30, Dynamic_cast=31, Else=32, Enum=33, Explicit=34, Export=35, 
		Extern=36, False=37, Final=38, Float=39, For=40, Friend=41, Goto=42, If=43, 
		Inline=44, Int=45, Long=46, Mutable=47, Namespace=48, New=49, Noexcept=50, 
		Nullptr=51, Operator=52, Override=53, Private=54, Protected=55, Public=56, 
		Register=57, Reinterpret_cast=58, Return=59, Short=60, Signed=61, Sizeof=62, 
		Static=63, Static_assert=64, Static_cast=65, Struct=66, Switch=67, Template=68, 
		This=69, Thread_local=70, Throw=71, True=72, Try=73, Typedef=74, Typeid=75, 
		Typename=76, Union=77, Unsigned=78, Using=79, Virtual=80, Void=81, Volatile=82, 
		Wchar=83, While=84, LeftParen=85, RightParen=86, LeftBracket=87, RightBracket=88, 
		LeftBrace=89, RightBrace=90, Plus=91, Minus=92, Star=93, Div=94, Mod=95, 
		Caret=96, And=97, Or=98, Tilde=99, Not=100, Assign=101, Less=102, Greater=103, 
		PlusAssign=104, MinusAssign=105, StarAssign=106, DivAssign=107, ModAssign=108, 
		XorAssign=109, AndAssign=110, OrAssign=111, LeftShift=112, LeftShiftAssign=113, 
		Equal=114, NotEqual=115, LessEqual=116, GreaterEqual=117, AndAnd=118, 
		OrOr=119, PlusPlus=120, MinusMinus=121, Comma=122, ArrowStar=123, Arrow=124, 
		Question=125, Colon=126, Doublecolon=127, Semi=128, Dot=129, DotStar=130, 
		Ellipsis=131, UEAPI=132, Identifier=133, Integerliteral=134, Decimalliteral=135, 
		Octalliteral=136, Hexadecimalliteral=137, Binaryliteral=138, Integersuffix=139, 
		Characterliteral=140, Floatingliteral=141, Stringliteral=142, Userdefinedintegerliteral=143, 
		Userdefinedfloatingliteral=144, Userdefinedstringliteral=145, Userdefinedcharacterliteral=146, 
		Whitespace=147, Newline=148, BlockComment=149, LineComment=150;
	public const int
		RULE_translationunit = 0, RULE_primaryexpression = 1, RULE_idexpression = 2, 
		RULE_unqualifiedid = 3, RULE_qualifiedid = 4, RULE_nestednamespecifier = 5, 
		RULE_lambdaexpression = 6, RULE_lambdaintroducer = 7, RULE_lambdacapture = 8, 
		RULE_capturedefault = 9, RULE_capturelist = 10, RULE_capture = 11, RULE_simplecapture = 12, 
		RULE_initcapture = 13, RULE_lambdadeclarator = 14, RULE_postfixexpression = 15, 
		RULE_expressionlist = 16, RULE_pseudodestructorname = 17, RULE_unaryexpression = 18, 
		RULE_unaryoperator = 19, RULE_newexpression = 20, RULE_newplacement = 21, 
		RULE_newtypeid = 22, RULE_newdeclarator = 23, RULE_noptrnewdeclarator = 24, 
		RULE_newinitializer = 25, RULE_deleteexpression = 26, RULE_noexceptexpression = 27, 
		RULE_castexpression = 28, RULE_pmexpression = 29, RULE_multiplicativeexpression = 30, 
		RULE_additiveexpression = 31, RULE_shiftexpression = 32, RULE_relationalexpression = 33, 
		RULE_equalityexpression = 34, RULE_andexpression = 35, RULE_exclusiveorexpression = 36, 
		RULE_inclusiveorexpression = 37, RULE_logicalandexpression = 38, RULE_logicalorexpression = 39, 
		RULE_conditionalexpression = 40, RULE_assignmentexpression = 41, RULE_assignmentoperator = 42, 
		RULE_expression = 43, RULE_constantexpression = 44, RULE_statement = 45, 
		RULE_labeledstatement = 46, RULE_expressionstatement = 47, RULE_compoundstatement = 48, 
		RULE_statementseq = 49, RULE_selectionstatement = 50, RULE_condition = 51, 
		RULE_iterationstatement = 52, RULE_forinitstatement = 53, RULE_forrangedeclaration = 54, 
		RULE_forrangeinitializer = 55, RULE_jumpstatement = 56, RULE_declarationstatement = 57, 
		RULE_declarationseq = 58, RULE_declaration = 59, RULE_blockdeclaration = 60, 
		RULE_aliasdeclaration = 61, RULE_simpledeclaration = 62, RULE_static_assertdeclaration = 63, 
		RULE_emptydeclaration = 64, RULE_attributedeclaration = 65, RULE_declspecifier = 66, 
		RULE_declspecifierseq = 67, RULE_storageclassspecifier = 68, RULE_functionspecifier = 69, 
		RULE_typedefname = 70, RULE_typespecifier = 71, RULE_trailingtypespecifier = 72, 
		RULE_typespecifierseq = 73, RULE_trailingtypespecifierseq = 74, RULE_simpletypespecifier = 75, 
		RULE_thetypename = 76, RULE_decltypespecifier = 77, RULE_elaboratedtypespecifier = 78, 
		RULE_enumname = 79, RULE_enumspecifier = 80, RULE_enumhead = 81, RULE_opaqueenumdeclaration = 82, 
		RULE_enumkey = 83, RULE_enumbase = 84, RULE_enumeratorlist = 85, RULE_enumeratordefinition = 86, 
		RULE_enumerator = 87, RULE_namespacename = 88, RULE_originalnamespacename = 89, 
		RULE_namespacedefinition = 90, RULE_namednamespacedefinition = 91, RULE_originalnamespacedefinition = 92, 
		RULE_extensionnamespacedefinition = 93, RULE_unnamednamespacedefinition = 94, 
		RULE_namespacebody = 95, RULE_namespacealias = 96, RULE_namespacealiasdefinition = 97, 
		RULE_qualifiednamespacespecifier = 98, RULE_usingdeclaration = 99, RULE_usingdirective = 100, 
		RULE_asmdefinition = 101, RULE_linkagespecification = 102, RULE_attributespecifierseq = 103, 
		RULE_attributespecifier = 104, RULE_alignmentspecifier = 105, RULE_attributelist = 106, 
		RULE_attribute = 107, RULE_attributetoken = 108, RULE_attributescopedtoken = 109, 
		RULE_attributenamespace = 110, RULE_attributeargumentclause = 111, RULE_balancedtokenseq = 112, 
		RULE_balancedtoken = 113, RULE_initdeclaratorlist = 114, RULE_initdeclarator = 115, 
		RULE_declarator = 116, RULE_ptrdeclarator = 117, RULE_noptrdeclarator = 118, 
		RULE_parametersandqualifiers = 119, RULE_trailingreturntype = 120, RULE_ptroperator = 121, 
		RULE_cvqualifierseq = 122, RULE_cvqualifier = 123, RULE_refqualifier = 124, 
		RULE_declaratorid = 125, RULE_thetypeid = 126, RULE_abstractdeclarator = 127, 
		RULE_ptrabstractdeclarator = 128, RULE_noptrabstractdeclarator = 129, 
		RULE_abstractpackdeclarator = 130, RULE_noptrabstractpackdeclarator = 131, 
		RULE_parameterdeclarationclause = 132, RULE_parameterdeclarationlist = 133, 
		RULE_parameterdeclaration = 134, RULE_functiondefinition = 135, RULE_udefineTopLevel = 136, 
		RULE_udefine = 137, RULE_uclass = 138, RULE_ustruct = 139, RULE_uenum = 140, 
		RULE_ufunction = 141, RULE_uproperty = 142, RULE_udeprecated = 143, RULE_umeta = 144, 
		RULE_umetaParametrList = 145, RULE_umetaParametr = 146, RULE_umetaParametrKey = 147, 
		RULE_umetaParametrValue = 148, RULE_functionbody = 149, RULE_initializer = 150, 
		RULE_braceorequalinitializer = 151, RULE_initializerclause = 152, RULE_initializerlist = 153, 
		RULE_bracedinitlist = 154, RULE_classname = 155, RULE_classspecifier = 156, 
		RULE_classhead = 157, RULE_classheadname = 158, RULE_classUEAPI = 159, 
		RULE_classvirtspecifier = 160, RULE_classkey = 161, RULE_memberspecification = 162, 
		RULE_memberdeclaration = 163, RULE_memberdeclaratorlist = 164, RULE_memberdeclarator = 165, 
		RULE_virtspecifierseq = 166, RULE_virtspecifier = 167, RULE_purespecifier = 168, 
		RULE_baseclause = 169, RULE_basespecifierlist = 170, RULE_basespecifier = 171, 
		RULE_classordecltype = 172, RULE_basetypespecifier = 173, RULE_accessspecifier = 174, 
		RULE_conversionfunctionid = 175, RULE_conversiontypeid = 176, RULE_conversiondeclarator = 177, 
		RULE_ctorinitializer = 178, RULE_meminitializerlist = 179, RULE_meminitializer = 180, 
		RULE_meminitializerid = 181, RULE_operatorfunctionid = 182, RULE_literaloperatorid = 183, 
		RULE_templatedeclaration = 184, RULE_templateparameterlist = 185, RULE_templateparameter = 186, 
		RULE_typeparameter = 187, RULE_simpletemplateid = 188, RULE_templateid = 189, 
		RULE_templatename = 190, RULE_templateargumentlist = 191, RULE_templateargument = 192, 
		RULE_typenamespecifier = 193, RULE_explicitinstantiation = 194, RULE_explicitspecialization = 195, 
		RULE_tryblock = 196, RULE_functiontryblock = 197, RULE_handlerseq = 198, 
		RULE_handler = 199, RULE_exceptiondeclaration = 200, RULE_throwexpression = 201, 
		RULE_exceptionspecification = 202, RULE_dynamicexceptionspecification = 203, 
		RULE_typeidlist = 204, RULE_noexceptspecification = 205, RULE_rightShift = 206, 
		RULE_rightShiftAssign = 207, RULE_theoperator = 208, RULE_literal = 209, 
		RULE_booleanliteral = 210, RULE_pointerliteral = 211, RULE_userdefinedliteral = 212;
	public static readonly string[] ruleNames = {
		"translationunit", "primaryexpression", "idexpression", "unqualifiedid", 
		"qualifiedid", "nestednamespecifier", "lambdaexpression", "lambdaintroducer", 
		"lambdacapture", "capturedefault", "capturelist", "capture", "simplecapture", 
		"initcapture", "lambdadeclarator", "postfixexpression", "expressionlist", 
		"pseudodestructorname", "unaryexpression", "unaryoperator", "newexpression", 
		"newplacement", "newtypeid", "newdeclarator", "noptrnewdeclarator", "newinitializer", 
		"deleteexpression", "noexceptexpression", "castexpression", "pmexpression", 
		"multiplicativeexpression", "additiveexpression", "shiftexpression", "relationalexpression", 
		"equalityexpression", "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
		"logicalandexpression", "logicalorexpression", "conditionalexpression", 
		"assignmentexpression", "assignmentoperator", "expression", "constantexpression", 
		"statement", "labeledstatement", "expressionstatement", "compoundstatement", 
		"statementseq", "selectionstatement", "condition", "iterationstatement", 
		"forinitstatement", "forrangedeclaration", "forrangeinitializer", "jumpstatement", 
		"declarationstatement", "declarationseq", "declaration", "blockdeclaration", 
		"aliasdeclaration", "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
		"attributedeclaration", "declspecifier", "declspecifierseq", "storageclassspecifier", 
		"functionspecifier", "typedefname", "typespecifier", "trailingtypespecifier", 
		"typespecifierseq", "trailingtypespecifierseq", "simpletypespecifier", 
		"thetypename", "decltypespecifier", "elaboratedtypespecifier", "enumname", 
		"enumspecifier", "enumhead", "opaqueenumdeclaration", "enumkey", "enumbase", 
		"enumeratorlist", "enumeratordefinition", "enumerator", "namespacename", 
		"originalnamespacename", "namespacedefinition", "namednamespacedefinition", 
		"originalnamespacedefinition", "extensionnamespacedefinition", "unnamednamespacedefinition", 
		"namespacebody", "namespacealias", "namespacealiasdefinition", "qualifiednamespacespecifier", 
		"usingdeclaration", "usingdirective", "asmdefinition", "linkagespecification", 
		"attributespecifierseq", "attributespecifier", "alignmentspecifier", "attributelist", 
		"attribute", "attributetoken", "attributescopedtoken", "attributenamespace", 
		"attributeargumentclause", "balancedtokenseq", "balancedtoken", "initdeclaratorlist", 
		"initdeclarator", "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
		"trailingreturntype", "ptroperator", "cvqualifierseq", "cvqualifier", 
		"refqualifier", "declaratorid", "thetypeid", "abstractdeclarator", "ptrabstractdeclarator", 
		"noptrabstractdeclarator", "abstractpackdeclarator", "noptrabstractpackdeclarator", 
		"parameterdeclarationclause", "parameterdeclarationlist", "parameterdeclaration", 
		"functiondefinition", "udefineTopLevel", "udefine", "uclass", "ustruct", 
		"uenum", "ufunction", "uproperty", "udeprecated", "umeta", "umetaParametrList", 
		"umetaParametr", "umetaParametrKey", "umetaParametrValue", "functionbody", 
		"initializer", "braceorequalinitializer", "initializerclause", "initializerlist", 
		"bracedinitlist", "classname", "classspecifier", "classhead", "classheadname", 
		"classUEAPI", "classvirtspecifier", "classkey", "memberspecification", 
		"memberdeclaration", "memberdeclaratorlist", "memberdeclarator", "virtspecifierseq", 
		"virtspecifier", "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
		"classordecltype", "basetypespecifier", "accessspecifier", "conversionfunctionid", 
		"conversiontypeid", "conversiondeclarator", "ctorinitializer", "meminitializerlist", 
		"meminitializer", "meminitializerid", "operatorfunctionid", "literaloperatorid", 
		"templatedeclaration", "templateparameterlist", "templateparameter", "typeparameter", 
		"simpletemplateid", "templateid", "templatename", "templateargumentlist", 
		"templateargument", "typenamespecifier", "explicitinstantiation", "explicitspecialization", 
		"tryblock", "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
		"throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
		"typeidlist", "noexceptspecification", "rightShift", "rightShiftAssign", 
		"theoperator", "literal", "booleanliteral", "pointerliteral", "userdefinedliteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'GENERATED_BODY()'", "'UCLASS'", "'USTRUCT'", "'UENUM'", "'UFUNCTION'", 
		"'UPROPERTY'", "'DEPRECATED'", null, null, "'alignas'", "'alignof'", "'asm'", 
		"'auto'", "'bool'", "'break'", "'case'", "'catch'", "'char'", "'char16_t'", 
		"'char32_t'", "'class'", "'const'", "'constexpr'", "'const_cast'", "'continue'", 
		"'decltype'", "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", 
		"'else'", "'enum'", "'explicit'", "'export'", "'extern'", "'false'", "'final'", 
		"'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", "'int'", 
		"'long'", "'mutable'", "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
		"'operator'", "'override'", "'private'", "'protected'", "'public'", "'register'", 
		"'reinterpret_cast'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'static_assert'", "'static_cast'", "'struct'", "'switch'", "'template'", 
		"'this'", "'thread_local'", "'throw'", "'true'", "'try'", "'typedef'", 
		"'typeid'", "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", 
		"'void'", "'volatile'", "'wchar_t'", "'while'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
		"'~'", "'!'", "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='", "'<='", "'>='", 
		"'&&'", "'||'", "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'", 
		"'::'", "';'", "'.'", "'.*'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "MultiLineMacro", "Directive", 
		"Alignas", "Alignof", "Asm", "Auto", "Bool", "Break", "Case", "Catch", 
		"Char", "Char16", "Char32", "Class", "Const", "Constexpr", "Const_cast", 
		"Continue", "Decltype", "Default", "Delete", "Do", "Double", "Dynamic_cast", 
		"Else", "Enum", "Explicit", "Export", "Extern", "False", "Final", "Float", 
		"For", "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", "Namespace", 
		"New", "Noexcept", "Nullptr", "Operator", "Override", "Private", "Protected", 
		"Public", "Register", "Reinterpret_cast", "Return", "Short", "Signed", 
		"Sizeof", "Static", "Static_assert", "Static_cast", "Struct", "Switch", 
		"Template", "This", "Thread_local", "Throw", "True", "Try", "Typedef", 
		"Typeid", "Typename", "Union", "Unsigned", "Using", "Virtual", "Void", 
		"Volatile", "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
		"RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", "Star", "Div", 
		"Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", "Greater", 
		"PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", "XorAssign", 
		"AndAssign", "OrAssign", "LeftShift", "LeftShiftAssign", "Equal", "NotEqual", 
		"LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
		"Comma", "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", "Semi", 
		"Dot", "DotStar", "Ellipsis", "UEAPI", "Identifier", "Integerliteral", 
		"Decimalliteral", "Octalliteral", "Hexadecimalliteral", "Binaryliteral", 
		"Integersuffix", "Characterliteral", "Floatingliteral", "Stringliteral", 
		"Userdefinedintegerliteral", "Userdefinedfloatingliteral", "Userdefinedstringliteral", 
		"Userdefinedcharacterliteral", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPP14.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CPP14Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CPP14Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CPP14Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TranslationunitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CPP14Parser.Eof, 0); }
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public TranslationunitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationunit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTranslationunit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTranslationunit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationunit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationunitContext translationunit() {
		TranslationunitContext _localctx = new TranslationunitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationunit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << Alignas) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (Thread_local - 64)) | (1L << (Typedef - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (AndAnd - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (UEAPI - 128)) | (1L << (Identifier - 128)))) != 0)) {
				{
				State = 426; declarationseq(0);
				}
			}

			State = 429; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryexpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public LambdaexpressionContext lambdaexpression() {
			return GetRuleContext<LambdaexpressionContext>(0);
		}
		public PrimaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPrimaryexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPrimaryexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryexpressionContext primaryexpression() {
		PrimaryexpressionContext _localctx = new PrimaryexpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_primaryexpression);
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case False:
			case Nullptr:
			case True:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431; literal();
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432; Match(This);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 433; Match(LeftParen);
				State = 434; expression(0);
				State = 435; Match(RightParen);
				}
				break;
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 437; idexpression();
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 5);
				{
				State = 438; lambdaexpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdexpressionContext : ParserRuleContext {
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public QualifiedidContext qualifiedid() {
			return GetRuleContext<QualifiedidContext>(0);
		}
		public IdexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterIdexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitIdexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdexpressionContext idexpression() {
		IdexpressionContext _localctx = new IdexpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_idexpression);
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441; unqualifiedid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442; qualifiedid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedidContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OperatorfunctionidContext operatorfunctionid() {
			return GetRuleContext<OperatorfunctionidContext>(0);
		}
		public ConversionfunctionidContext conversionfunctionid() {
			return GetRuleContext<ConversionfunctionidContext>(0);
		}
		public LiteraloperatoridContext literaloperatorid() {
			return GetRuleContext<LiteraloperatoridContext>(0);
		}
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public TemplateidContext templateid() {
			return GetRuleContext<TemplateidContext>(0);
		}
		public UnqualifiedidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnqualifiedid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnqualifiedid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualifiedid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnqualifiedidContext unqualifiedid() {
		UnqualifiedidContext _localctx = new UnqualifiedidContext(Context, State);
		EnterRule(_localctx, 6, RULE_unqualifiedid);
		try {
			State = 454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 446; operatorfunctionid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447; conversionfunctionid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 448; literaloperatorid();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 449; Match(Tilde);
				State = 450; classname();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 451; Match(Tilde);
				State = 452; decltypespecifier();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 453; templateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedidContext : ParserRuleContext {
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public QualifiedidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterQualifiedid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitQualifiedid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedidContext qualifiedid() {
		QualifiedidContext _localctx = new QualifiedidContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; nestednamespecifier(0);
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 457; Match(Template);
				}
			}

			State = 460; unqualifiedid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestednamespecifierContext : ParserRuleContext {
		public ThetypenameContext thetypename() {
			return GetRuleContext<ThetypenameContext>(0);
		}
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public NestednamespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestednamespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNestednamespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNestednamespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestednamespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestednamespecifierContext nestednamespecifier() {
		return nestednamespecifier(0);
	}

	private NestednamespecifierContext nestednamespecifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NestednamespecifierContext _localctx = new NestednamespecifierContext(Context, _parentState);
		NestednamespecifierContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_nestednamespecifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 463; Match(Doublecolon);
				}
				break;
			case 2:
				{
				State = 464; thetypename();
				State = 465; Match(Doublecolon);
				}
				break;
			case 3:
				{
				State = 467; namespacename();
				State = 468; Match(Doublecolon);
				}
				break;
			case 4:
				{
				State = 470; decltypespecifier();
				State = 471; Match(Doublecolon);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 487;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 485;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new NestednamespecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestednamespecifier);
						State = 475;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 476; Match(Identifier);
						State = 477; Match(Doublecolon);
						}
						break;
					case 2:
						{
						_localctx = new NestednamespecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestednamespecifier);
						State = 478;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 480;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 479; Match(Template);
							}
						}

						State = 482; simpletemplateid();
						State = 483; Match(Doublecolon);
						}
						break;
					}
					} 
				}
				State = 489;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaexpressionContext : ParserRuleContext {
		public LambdaintroducerContext lambdaintroducer() {
			return GetRuleContext<LambdaintroducerContext>(0);
		}
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public LambdadeclaratorContext lambdadeclarator() {
			return GetRuleContext<LambdadeclaratorContext>(0);
		}
		public LambdaexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaexpressionContext lambdaexpression() {
		LambdaexpressionContext _localctx = new LambdaexpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambdaexpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; lambdaintroducer();
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 491; lambdadeclarator();
				}
			}

			State = 494; compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaintroducerContext : ParserRuleContext {
		public LambdacaptureContext lambdacapture() {
			return GetRuleContext<LambdacaptureContext>(0);
		}
		public LambdaintroducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaintroducer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaintroducer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaintroducer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaintroducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaintroducerContext lambdaintroducer() {
		LambdaintroducerContext _localctx = new LambdaintroducerContext(Context, State);
		EnterRule(_localctx, 14, RULE_lambdaintroducer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496; Match(LeftBracket);
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (This - 69)) | (1L << (And - 69)) | (1L << (Assign - 69)))) != 0) || _la==Identifier) {
				{
				State = 497; lambdacapture();
				}
			}

			State = 500; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdacaptureContext : ParserRuleContext {
		public CapturedefaultContext capturedefault() {
			return GetRuleContext<CapturedefaultContext>(0);
		}
		public CapturelistContext capturelist() {
			return GetRuleContext<CapturelistContext>(0);
		}
		public LambdacaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdacapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdacapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdacapture(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdacapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdacaptureContext lambdacapture() {
		LambdacaptureContext _localctx = new LambdacaptureContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdacapture);
		try {
			State = 508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502; capturedefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 503; capturelist(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 504; capturedefault();
				State = 505; Match(Comma);
				State = 506; capturelist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CapturedefaultContext : ParserRuleContext {
		public CapturedefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capturedefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapturedefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapturedefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapturedefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CapturedefaultContext capturedefault() {
		CapturedefaultContext _localctx = new CapturedefaultContext(Context, State);
		EnterRule(_localctx, 18, RULE_capturedefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Assign) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CapturelistContext : ParserRuleContext {
		public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		public CapturelistContext capturelist() {
			return GetRuleContext<CapturelistContext>(0);
		}
		public CapturelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capturelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapturelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapturelist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapturelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CapturelistContext capturelist() {
		return capturelist(0);
	}

	private CapturelistContext capturelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CapturelistContext _localctx = new CapturelistContext(Context, _parentState);
		CapturelistContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_capturelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 513; capture();
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 514; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 525;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CapturelistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_capturelist);
					State = 517;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 518; Match(Comma);
					State = 519; capture();
					State = 521;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 520; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 527;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		public SimplecaptureContext simplecapture() {
			return GetRuleContext<SimplecaptureContext>(0);
		}
		public InitcaptureContext initcapture() {
			return GetRuleContext<InitcaptureContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapture(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 22, RULE_capture);
		try {
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 528; simplecapture();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 529; initcapture();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplecaptureContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public SimplecaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplecapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimplecapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimplecapture(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimplecapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimplecaptureContext simplecapture() {
		SimplecaptureContext _localctx = new SimplecaptureContext(Context, State);
		EnterRule(_localctx, 24, RULE_simplecapture);
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 532; Match(Identifier);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 533; Match(And);
				State = 534; Match(Identifier);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 3);
				{
				State = 535; Match(This);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitcaptureContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitcaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initcapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitcapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitcapture(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitcapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitcaptureContext initcapture() {
		InitcaptureContext _localctx = new InitcaptureContext(Context, State);
		EnterRule(_localctx, 26, RULE_initcapture);
		try {
			State = 543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 538; Match(Identifier);
				State = 539; initializer();
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540; Match(And);
				State = 541; Match(Identifier);
				State = 542; initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdadeclaratorContext : ParserRuleContext {
		public ParameterdeclarationclauseContext parameterdeclarationclause() {
			return GetRuleContext<ParameterdeclarationclauseContext>(0);
		}
		public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public ExceptionspecificationContext exceptionspecification() {
			return GetRuleContext<ExceptionspecificationContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public LambdadeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdadeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdadeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdadeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdadeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdadeclaratorContext lambdadeclarator() {
		LambdadeclaratorContext _localctx = new LambdadeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_lambdadeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(LeftParen);
			State = 546; parameterdeclarationclause();
			State = 547; Match(RightParen);
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mutable) {
				{
				State = 548; Match(Mutable);
				}
			}

			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Noexcept || _la==Throw) {
				{
				State = 551; exceptionspecification();
				}
			}

			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 554; attributespecifierseq(0);
				}
			}

			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Arrow) {
				{
				State = 557; trailingreturntype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixexpressionContext : ParserRuleContext {
		public PrimaryexpressionContext primaryexpression() {
			return GetRuleContext<PrimaryexpressionContext>(0);
		}
		public SimpletypespecifierContext simpletypespecifier() {
			return GetRuleContext<SimpletypespecifierContext>(0);
		}
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public TypenamespecifierContext typenamespecifier() {
			return GetRuleContext<TypenamespecifierContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ITerminalNode Dynamic_cast() { return GetToken(CPP14Parser.Dynamic_cast, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Static_cast() { return GetToken(CPP14Parser.Static_cast, 0); }
		public ITerminalNode Reinterpret_cast() { return GetToken(CPP14Parser.Reinterpret_cast, 0); }
		public ITerminalNode Const_cast() { return GetToken(CPP14Parser.Const_cast, 0); }
		public ITerminalNode Typeid() { return GetToken(CPP14Parser.Typeid, 0); }
		public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public PseudodestructornameContext pseudodestructorname() {
			return GetRuleContext<PseudodestructornameContext>(0);
		}
		public PostfixexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPostfixexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPostfixexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixexpressionContext postfixexpression() {
		return postfixexpression(0);
	}

	private PostfixexpressionContext postfixexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixexpressionContext _localctx = new PostfixexpressionContext(Context, _parentState);
		PostfixexpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_postfixexpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 561; primaryexpression();
				}
				break;
			case 2:
				{
				State = 562; simpletypespecifier();
				State = 563; Match(LeftParen);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 564; expressionlist();
					}
				}

				State = 567; Match(RightParen);
				}
				break;
			case 3:
				{
				State = 569; typenamespecifier();
				State = 570; Match(LeftParen);
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 571; expressionlist();
					}
				}

				State = 574; Match(RightParen);
				}
				break;
			case 4:
				{
				State = 576; simpletypespecifier();
				State = 577; bracedinitlist();
				}
				break;
			case 5:
				{
				State = 579; typenamespecifier();
				State = 580; bracedinitlist();
				}
				break;
			case 6:
				{
				State = 582; Match(Dynamic_cast);
				State = 583; Match(Less);
				State = 584; thetypeid();
				State = 585; Match(Greater);
				State = 586; Match(LeftParen);
				State = 587; expression(0);
				State = 588; Match(RightParen);
				}
				break;
			case 7:
				{
				State = 590; Match(Static_cast);
				State = 591; Match(Less);
				State = 592; thetypeid();
				State = 593; Match(Greater);
				State = 594; Match(LeftParen);
				State = 595; expression(0);
				State = 596; Match(RightParen);
				}
				break;
			case 8:
				{
				State = 598; Match(Reinterpret_cast);
				State = 599; Match(Less);
				State = 600; thetypeid();
				State = 601; Match(Greater);
				State = 602; Match(LeftParen);
				State = 603; expression(0);
				State = 604; Match(RightParen);
				}
				break;
			case 9:
				{
				State = 606; Match(Const_cast);
				State = 607; Match(Less);
				State = 608; thetypeid();
				State = 609; Match(Greater);
				State = 610; Match(LeftParen);
				State = 611; expression(0);
				State = 612; Match(RightParen);
				}
				break;
			case 10:
				{
				State = 614; Match(Typeid);
				State = 615; Match(LeftParen);
				State = 616; expression(0);
				State = 617; Match(RightParen);
				}
				break;
			case 11:
				{
				State = 619; Match(Typeid);
				State = 620; Match(LeftParen);
				State = 621; thetypeid();
				State = 622; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 666;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 664;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 626;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 627; Match(LeftBracket);
						State = 628; expression(0);
						State = 629; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 631;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 632; Match(LeftBracket);
						State = 633; bracedinitlist();
						State = 634; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 636;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 637; Match(LeftParen);
						State = 639;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
							{
							State = 638; expressionlist();
							}
						}

						State = 641; Match(RightParen);
						}
						break;
					case 4:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 642;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 643; Match(Dot);
						State = 645;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 644; Match(Template);
							}
						}

						State = 647; idexpression();
						}
						break;
					case 5:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 648;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 649; Match(Arrow);
						State = 651;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 650; Match(Template);
							}
						}

						State = 653; idexpression();
						}
						break;
					case 6:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 654;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 655; Match(Dot);
						State = 656; pseudodestructorname();
						}
						break;
					case 7:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 657;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 658; Match(Arrow);
						State = 659; pseudodestructorname();
						}
						break;
					case 8:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 660;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 661; Match(PlusPlus);
						}
						break;
					case 9:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 662;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 663; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 668;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpressionlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpressionlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; initializerlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudodestructornameContext : ParserRuleContext {
		public ThetypenameContext[] thetypename() {
			return GetRuleContexts<ThetypenameContext>();
		}
		public ThetypenameContext thetypename(int i) {
			return GetRuleContext<ThetypenameContext>(i);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public PseudodestructornameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudodestructorname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPseudodestructorname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPseudodestructorname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudodestructorname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudodestructornameContext pseudodestructorname() {
		PseudodestructornameContext _localctx = new PseudodestructornameContext(Context, State);
		EnterRule(_localctx, 34, RULE_pseudodestructorname);
		int _la;
		try {
			State = 693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 672;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 671; nestednamespecifier(0);
					}
					break;
				}
				State = 674; thetypename();
				State = 675; Match(Doublecolon);
				State = 676; Match(Tilde);
				State = 677; thetypename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 679; nestednamespecifier(0);
				State = 680; Match(Template);
				State = 681; simpletemplateid();
				State = 682; Match(Doublecolon);
				State = 683; Match(Tilde);
				State = 684; thetypename();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 686; nestednamespecifier(0);
					}
				}

				State = 689; Match(Tilde);
				State = 690; thetypename();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 691; Match(Tilde);
				State = 692; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryexpressionContext : ParserRuleContext {
		public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		public ITerminalNode Sizeof() { return GetToken(CPP14Parser.Sizeof, 0); }
		public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Alignof() { return GetToken(CPP14Parser.Alignof, 0); }
		public NoexceptexpressionContext noexceptexpression() {
			return GetRuleContext<NoexceptexpressionContext>(0);
		}
		public NewexpressionContext newexpression() {
			return GetRuleContext<NewexpressionContext>(0);
		}
		public DeleteexpressionContext deleteexpression() {
			return GetRuleContext<DeleteexpressionContext>(0);
		}
		public UnaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnaryexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnaryexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryexpressionContext unaryexpression() {
		UnaryexpressionContext _localctx = new UnaryexpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_unaryexpression);
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 695; postfixexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 696; Match(PlusPlus);
				State = 697; castexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 698; Match(MinusMinus);
				State = 699; castexpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 700; unaryoperator();
				State = 701; castexpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 703; Match(Sizeof);
				State = 704; unaryexpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 705; Match(Sizeof);
				State = 706; Match(LeftParen);
				State = 707; thetypeid();
				State = 708; Match(RightParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 710; Match(Sizeof);
				State = 711; Match(Ellipsis);
				State = 712; Match(LeftParen);
				State = 713; Match(Identifier);
				State = 714; Match(RightParen);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 715; Match(Alignof);
				State = 716; Match(LeftParen);
				State = 717; thetypeid();
				State = 718; Match(RightParen);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 720; noexceptexpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 721; newexpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 722; deleteexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryoperatorContext : ParserRuleContext {
		public UnaryoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnaryoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnaryoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryoperatorContext unaryoperator() {
		UnaryoperatorContext _localctx = new UnaryoperatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (Plus - 91)) | (1L << (Minus - 91)) | (1L << (Star - 91)) | (1L << (And - 91)) | (1L << (Or - 91)) | (1L << (Tilde - 91)) | (1L << (Not - 91)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewexpressionContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		public NewtypeidContext newtypeid() {
			return GetRuleContext<NewtypeidContext>(0);
		}
		public NewplacementContext newplacement() {
			return GetRuleContext<NewplacementContext>(0);
		}
		public NewinitializerContext newinitializer() {
			return GetRuleContext<NewinitializerContext>(0);
		}
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public NewexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewexpressionContext newexpression() {
		NewexpressionContext _localctx = new NewexpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_newexpression);
		int _la;
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 727; Match(Doublecolon);
					}
				}

				State = 730; Match(New);
				State = 732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LeftParen) {
					{
					State = 731; newplacement();
					}
				}

				State = 734; newtypeid();
				State = 736;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 735; newinitializer();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 738; Match(Doublecolon);
					}
				}

				State = 741; Match(New);
				State = 743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 742; newplacement();
					}
					break;
				}
				State = 745; Match(LeftParen);
				State = 746; thetypeid();
				State = 747; Match(RightParen);
				State = 749;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 748; newinitializer();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewplacementContext : ParserRuleContext {
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public NewplacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newplacement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewplacement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewplacement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewplacement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewplacementContext newplacement() {
		NewplacementContext _localctx = new NewplacementContext(Context, State);
		EnterRule(_localctx, 42, RULE_newplacement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753; Match(LeftParen);
			State = 754; expressionlist();
			State = 755; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewtypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public NewdeclaratorContext newdeclarator() {
			return GetRuleContext<NewdeclaratorContext>(0);
		}
		public NewtypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newtypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewtypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewtypeid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewtypeid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewtypeidContext newtypeid() {
		NewtypeidContext _localctx = new NewtypeidContext(Context, State);
		EnterRule(_localctx, 44, RULE_newtypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757; typespecifierseq();
			State = 759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 758; newdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewdeclaratorContext : ParserRuleContext {
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public NewdeclaratorContext newdeclarator() {
			return GetRuleContext<NewdeclaratorContext>(0);
		}
		public NoptrnewdeclaratorContext noptrnewdeclarator() {
			return GetRuleContext<NoptrnewdeclaratorContext>(0);
		}
		public NewdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewdeclaratorContext newdeclarator() {
		NewdeclaratorContext _localctx = new NewdeclaratorContext(Context, State);
		EnterRule(_localctx, 46, RULE_newdeclarator);
		try {
			State = 766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 761; ptroperator();
				State = 763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 762; newdeclarator();
					}
					break;
				}
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 765; noptrnewdeclarator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrnewdeclaratorContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NoptrnewdeclaratorContext noptrnewdeclarator() {
			return GetRuleContext<NoptrnewdeclaratorContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoptrnewdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrnewdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrnewdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrnewdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoptrnewdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoptrnewdeclaratorContext noptrnewdeclarator() {
		return noptrnewdeclarator(0);
	}

	private NoptrnewdeclaratorContext noptrnewdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrnewdeclaratorContext _localctx = new NoptrnewdeclaratorContext(Context, _parentState);
		NoptrnewdeclaratorContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_noptrnewdeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 769; Match(LeftBracket);
			State = 770; expression(0);
			State = 771; Match(RightBracket);
			State = 773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 772; attributespecifierseq(0);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 784;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoptrnewdeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noptrnewdeclarator);
					State = 775;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 776; Match(LeftBracket);
					State = 777; constantexpression();
					State = 778; Match(RightBracket);
					State = 780;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						State = 779; attributespecifierseq(0);
						}
						break;
					}
					}
					} 
				}
				State = 786;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewinitializerContext : ParserRuleContext {
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public NewinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewinitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewinitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewinitializerContext newinitializer() {
		NewinitializerContext _localctx = new NewinitializerContext(Context, State);
		EnterRule(_localctx, 50, RULE_newinitializer);
		int _la;
		try {
			State = 793;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 787; Match(LeftParen);
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 788; expressionlist();
					}
				}

				State = 791; Match(RightParen);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 792; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteexpressionContext : ParserRuleContext {
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public DeleteexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeleteexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeleteexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteexpressionContext deleteexpression() {
		DeleteexpressionContext _localctx = new DeleteexpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_deleteexpression);
		int _la;
		try {
			State = 807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 795; Match(Doublecolon);
					}
				}

				State = 798; Match(Delete);
				State = 799; castexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 800; Match(Doublecolon);
					}
				}

				State = 803; Match(Delete);
				State = 804; Match(LeftBracket);
				State = 805; Match(RightBracket);
				State = 806; castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoexceptexpressionContext : ParserRuleContext {
		public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NoexceptexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noexceptexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoexceptexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoexceptexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoexceptexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoexceptexpressionContext noexceptexpression() {
		NoexceptexpressionContext _localctx = new NoexceptexpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_noexceptexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809; Match(Noexcept);
			State = 810; Match(LeftParen);
			State = 811; expression(0);
			State = 812; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastexpressionContext : ParserRuleContext {
		public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public CastexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCastexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCastexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastexpressionContext castexpression() {
		CastexpressionContext _localctx = new CastexpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_castexpression);
		try {
			State = 820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 814; unaryexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815; Match(LeftParen);
				State = 816; thetypeid();
				State = 817; Match(RightParen);
				State = 818; castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PmexpressionContext : ParserRuleContext {
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public PmexpressionContext pmexpression() {
			return GetRuleContext<PmexpressionContext>(0);
		}
		public PmexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pmexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPmexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPmexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPmexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PmexpressionContext pmexpression() {
		return pmexpression(0);
	}

	private PmexpressionContext pmexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PmexpressionContext _localctx = new PmexpressionContext(Context, _parentState);
		PmexpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_pmexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 823; castexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 833;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 831;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						_localctx = new PmexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmexpression);
						State = 825;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 826; Match(DotStar);
						State = 827; castexpression();
						}
						break;
					case 2:
						{
						_localctx = new PmexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmexpression);
						State = 828;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 829; Match(ArrowStar);
						State = 830; castexpression();
						}
						break;
					}
					} 
				}
				State = 835;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeexpressionContext : ParserRuleContext {
		public PmexpressionContext pmexpression() {
			return GetRuleContext<PmexpressionContext>(0);
		}
		public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		public MultiplicativeexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeexpressionContext multiplicativeexpression() {
		return multiplicativeexpression(0);
	}

	private MultiplicativeexpressionContext multiplicativeexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeexpressionContext _localctx = new MultiplicativeexpressionContext(Context, _parentState);
		MultiplicativeexpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_multiplicativeexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 837; pmexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 850;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 848;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 839;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 840; Match(Star);
						State = 841; pmexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 842;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 843; Match(Div);
						State = 844; pmexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 845;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 846; Match(Mod);
						State = 847; pmexpression(0);
						}
						break;
					}
					} 
				}
				State = 852;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveexpressionContext : ParserRuleContext {
		public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		public AdditiveexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAdditiveexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAdditiveexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveexpressionContext additiveexpression() {
		return additiveexpression(0);
	}

	private AdditiveexpressionContext additiveexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveexpressionContext _localctx = new AdditiveexpressionContext(Context, _parentState);
		AdditiveexpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_additiveexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 854; multiplicativeexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 864;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 862;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 856;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 857; Match(Plus);
						State = 858; multiplicativeexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 859;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 860; Match(Minus);
						State = 861; multiplicativeexpression(0);
						}
						break;
					}
					} 
				}
				State = 866;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftexpressionContext : ParserRuleContext {
		public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		public ShiftexpressionContext shiftexpression() {
			return GetRuleContext<ShiftexpressionContext>(0);
		}
		public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public ShiftexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterShiftexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitShiftexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftexpressionContext shiftexpression() {
		return shiftexpression(0);
	}

	private ShiftexpressionContext shiftexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftexpressionContext _localctx = new ShiftexpressionContext(Context, _parentState);
		ShiftexpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_shiftexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 868; additiveexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 879;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 877;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						_localctx = new ShiftexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftexpression);
						State = 870;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 871; Match(LeftShift);
						State = 872; additiveexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftexpression);
						State = 873;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 874; rightShift();
						State = 875; additiveexpression(0);
						}
						break;
					}
					} 
				}
				State = 881;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		public ShiftexpressionContext shiftexpression() {
			return GetRuleContext<ShiftexpressionContext>(0);
		}
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRelationalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRelationalexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		return relationalexpression(0);
	}

	private RelationalexpressionContext relationalexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, _parentState);
		RelationalexpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_relationalexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 883; shiftexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 899;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 897;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 885;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 886; Match(Less);
						State = 887; shiftexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 888;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 889; Match(Greater);
						State = 890; shiftexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 891;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 892; Match(LessEqual);
						State = 893; shiftexpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 894;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 895; Match(GreaterEqual);
						State = 896; shiftexpression(0);
						}
						break;
					}
					} 
				}
				State = 901;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityexpressionContext : ParserRuleContext {
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		public EqualityexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEqualityexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEqualityexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityexpressionContext equalityexpression() {
		return equalityexpression(0);
	}

	private EqualityexpressionContext equalityexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityexpressionContext _localctx = new EqualityexpressionContext(Context, _parentState);
		EqualityexpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_equalityexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 903; relationalexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 913;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 911;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 905;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 906; Match(Equal);
						State = 907; relationalexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 908;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 909; Match(NotEqual);
						State = 910; relationalexpression(0);
						}
						break;
					}
					} 
				}
				State = 915;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndexpressionContext : ParserRuleContext {
		public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		public AndexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAndexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAndexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndexpressionContext andexpression() {
		return andexpression(0);
	}

	private AndexpressionContext andexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndexpressionContext _localctx = new AndexpressionContext(Context, _parentState);
		AndexpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_andexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 917; equalityexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 924;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andexpression);
					State = 919;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 920; Match(And);
					State = 921; equalityexpression(0);
					}
					} 
				}
				State = 926;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveorexpressionContext : ParserRuleContext {
		public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		public ExclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExclusiveorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExclusiveorexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveorexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveorexpressionContext exclusiveorexpression() {
		return exclusiveorexpression(0);
	}

	private ExclusiveorexpressionContext exclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveorexpressionContext _localctx = new ExclusiveorexpressionContext(Context, _parentState);
		ExclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_exclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 928; andexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 935;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveorexpression);
					State = 930;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 931; Match(Caret);
					State = 932; andexpression(0);
					}
					} 
				}
				State = 937;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveorexpressionContext : ParserRuleContext {
		public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		public InclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInclusiveorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInclusiveorexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveorexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveorexpressionContext inclusiveorexpression() {
		return inclusiveorexpression(0);
	}

	private InclusiveorexpressionContext inclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveorexpressionContext _localctx = new InclusiveorexpressionContext(Context, _parentState);
		InclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_inclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 939; exclusiveorexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 946;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveorexpression);
					State = 941;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 942; Match(Or);
					State = 943; exclusiveorexpression(0);
					}
					} 
				}
				State = 948;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalandexpressionContext : ParserRuleContext {
		public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		public LogicalandexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalandexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLogicalandexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLogicalandexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalandexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalandexpressionContext logicalandexpression() {
		return logicalandexpression(0);
	}

	private LogicalandexpressionContext logicalandexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalandexpressionContext _localctx = new LogicalandexpressionContext(Context, _parentState);
		LogicalandexpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_logicalandexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 950; inclusiveorexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 957;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalandexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalandexpression);
					State = 952;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 953; Match(AndAnd);
					State = 954; inclusiveorexpression(0);
					}
					} 
				}
				State = 959;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalorexpressionContext : ParserRuleContext {
		public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public LogicalorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLogicalorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLogicalorexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalorexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalorexpressionContext logicalorexpression() {
		return logicalorexpression(0);
	}

	private LogicalorexpressionContext logicalorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalorexpressionContext _localctx = new LogicalorexpressionContext(Context, _parentState);
		LogicalorexpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_logicalorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 961; logicalandexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 968;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalorexpression);
					State = 963;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 964; Match(OrOr);
					State = 965; logicalandexpression(0);
					}
					} 
				}
				State = 970;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalexpressionContext : ParserRuleContext {
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ConditionalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConditionalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConditionalexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalexpressionContext conditionalexpression() {
		ConditionalexpressionContext _localctx = new ConditionalexpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_conditionalexpression);
		try {
			State = 978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971; logicalorexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 972; logicalorexpression(0);
				State = 973; Match(Question);
				State = 974; expression(0);
				State = 975; Match(Colon);
				State = 976; assignmentexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentexpressionContext : ParserRuleContext {
		public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public AssignmentoperatorContext assignmentoperator() {
			return GetRuleContext<AssignmentoperatorContext>(0);
		}
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public ThrowexpressionContext throwexpression() {
			return GetRuleContext<ThrowexpressionContext>(0);
		}
		public AssignmentexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAssignmentexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAssignmentexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentexpressionContext assignmentexpression() {
		AssignmentexpressionContext _localctx = new AssignmentexpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_assignmentexpression);
		try {
			State = 986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 980; conditionalexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 981; logicalorexpression(0);
				State = 982; assignmentoperator();
				State = 983; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 985; throwexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentoperatorContext : ParserRuleContext {
		public RightShiftAssignContext rightShiftAssign() {
			return GetRuleContext<RightShiftAssignContext>(0);
		}
		public AssignmentoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAssignmentoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAssignmentoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentoperatorContext assignmentoperator() {
		AssignmentoperatorContext _localctx = new AssignmentoperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_assignmentoperator);
		try {
			State = 999;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 988; Match(Assign);
				}
				break;
			case StarAssign:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989; Match(StarAssign);
				}
				break;
			case DivAssign:
				EnterOuterAlt(_localctx, 3);
				{
				State = 990; Match(DivAssign);
				}
				break;
			case ModAssign:
				EnterOuterAlt(_localctx, 4);
				{
				State = 991; Match(ModAssign);
				}
				break;
			case PlusAssign:
				EnterOuterAlt(_localctx, 5);
				{
				State = 992; Match(PlusAssign);
				}
				break;
			case MinusAssign:
				EnterOuterAlt(_localctx, 6);
				{
				State = 993; Match(MinusAssign);
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 7);
				{
				State = 994; rightShiftAssign();
				}
				break;
			case LeftShiftAssign:
				EnterOuterAlt(_localctx, 8);
				{
				State = 995; Match(LeftShiftAssign);
				}
				break;
			case AndAssign:
				EnterOuterAlt(_localctx, 9);
				{
				State = 996; Match(AndAssign);
				}
				break;
			case XorAssign:
				EnterOuterAlt(_localctx, 10);
				{
				State = 997; Match(XorAssign);
				}
				break;
			case OrAssign:
				EnterOuterAlt(_localctx, 11);
				{
				State = 998; Match(OrAssign);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1002; assignmentexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1009;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 1004;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1005; Match(Comma);
					State = 1006; assignmentexpression();
					}
					} 
				}
				State = 1011;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantexpressionContext : ParserRuleContext {
		public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		public ConstantexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConstantexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConstantexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantexpressionContext constantexpression() {
		ConstantexpressionContext _localctx = new ConstantexpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_constantexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012; conditionalexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledstatementContext labeledstatement() {
			return GetRuleContext<LabeledstatementContext>(0);
		}
		public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public SelectionstatementContext selectionstatement() {
			return GetRuleContext<SelectionstatementContext>(0);
		}
		public IterationstatementContext iterationstatement() {
			return GetRuleContext<IterationstatementContext>(0);
		}
		public JumpstatementContext jumpstatement() {
			return GetRuleContext<JumpstatementContext>(0);
		}
		public DeclarationstatementContext declarationstatement() {
			return GetRuleContext<DeclarationstatementContext>(0);
		}
		public TryblockContext tryblock() {
			return GetRuleContext<TryblockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_statement);
		int _la;
		try {
			State = 1040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1014; labeledstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1016;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 1015; attributespecifierseq(0);
					}
					break;
				}
				State = 1018; expressionstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1019; attributespecifierseq(0);
					}
				}

				State = 1022; compoundstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1023; attributespecifierseq(0);
					}
				}

				State = 1026; selectionstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1027; attributespecifierseq(0);
					}
				}

				State = 1030; iterationstatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1031; attributespecifierseq(0);
					}
				}

				State = 1034; jumpstatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1035; declarationstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1036; attributespecifierseq(0);
					}
				}

				State = 1039; tryblock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledstatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Case() { return GetToken(CPP14Parser.Case, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public LabeledstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLabeledstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLabeledstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledstatementContext labeledstatement() {
		LabeledstatementContext _localctx = new LabeledstatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_labeledstatement);
		int _la;
		try {
			State = 1062;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1042; attributespecifierseq(0);
					}
				}

				State = 1045; Match(Identifier);
				State = 1046; Match(Colon);
				State = 1047; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1048; attributespecifierseq(0);
					}
				}

				State = 1051; Match(Case);
				State = 1052; constantexpression();
				State = 1053; Match(Colon);
				State = 1054; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1056; attributespecifierseq(0);
					}
				}

				State = 1059; Match(Default);
				State = 1060; Match(Colon);
				State = 1061; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionstatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpressionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpressionstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionstatementContext expressionstatement() {
		ExpressionstatementContext _localctx = new ExpressionstatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_expressionstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
				{
				State = 1064; expression(0);
				}
			}

			State = 1067; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundstatementContext : ParserRuleContext {
		public StatementseqContext statementseq() {
			return GetRuleContext<StatementseqContext>(0);
		}
		public CompoundstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCompoundstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCompoundstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundstatementContext compoundstatement() {
		CompoundstatementContext _localctx = new CompoundstatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_compoundstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069; Match(LeftBrace);
			State = 1071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << False) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (True - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (AndAnd - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (Integerliteral - 128)) | (1L << (Characterliteral - 128)) | (1L << (Floatingliteral - 128)) | (1L << (Stringliteral - 128)) | (1L << (Userdefinedintegerliteral - 128)) | (1L << (Userdefinedfloatingliteral - 128)) | (1L << (Userdefinedstringliteral - 128)) | (1L << (Userdefinedcharacterliteral - 128)))) != 0)) {
				{
				State = 1070; statementseq(0);
				}
			}

			State = 1073; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementseqContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementseqContext statementseq() {
			return GetRuleContext<StatementseqContext>(0);
		}
		public StatementseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatementseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatementseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementseqContext statementseq() {
		return statementseq(0);
	}

	private StatementseqContext statementseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementseqContext _localctx = new StatementseqContext(Context, _parentState);
		StatementseqContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_statementseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1076; statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1082;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statementseq);
					State = 1078;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1079; statement();
					}
					} 
				}
				State = 1084;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectionstatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(CPP14Parser.If, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(CPP14Parser.Else, 0); }
		public ITerminalNode Switch() { return GetToken(CPP14Parser.Switch, 0); }
		public SelectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSelectionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSelectionstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionstatementContext selectionstatement() {
		SelectionstatementContext _localctx = new SelectionstatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_selectionstatement);
		try {
			State = 1105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1085; Match(If);
				State = 1086; Match(LeftParen);
				State = 1087; condition();
				State = 1088; Match(RightParen);
				State = 1089; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1091; Match(If);
				State = 1092; Match(LeftParen);
				State = 1093; condition();
				State = 1094; Match(RightParen);
				State = 1095; statement();
				State = 1096; Match(Else);
				State = 1097; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1099; Match(Switch);
				State = 1100; Match(LeftParen);
				State = 1101; condition();
				State = 1102; Match(RightParen);
				State = 1103; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 102, RULE_condition);
		int _la;
		try {
			State = 1123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1107; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1108; attributespecifierseq(0);
					}
				}

				State = 1111; declspecifierseq();
				State = 1112; declarator();
				State = 1113; Match(Assign);
				State = 1114; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1116; attributespecifierseq(0);
					}
				}

				State = 1119; declspecifierseq();
				State = 1120; declarator();
				State = 1121; bracedinitlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationstatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(CPP14Parser.While, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Do() { return GetToken(CPP14Parser.Do, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode For() { return GetToken(CPP14Parser.For, 0); }
		public ForinitstatementContext forinitstatement() {
			return GetRuleContext<ForinitstatementContext>(0);
		}
		public ForrangedeclarationContext forrangedeclaration() {
			return GetRuleContext<ForrangedeclarationContext>(0);
		}
		public ForrangeinitializerContext forrangeinitializer() {
			return GetRuleContext<ForrangeinitializerContext>(0);
		}
		public IterationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterIterationstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitIterationstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationstatementContext iterationstatement() {
		IterationstatementContext _localctx = new IterationstatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_iterationstatement);
		int _la;
		try {
			State = 1160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1125; Match(While);
				State = 1126; Match(LeftParen);
				State = 1127; condition();
				State = 1128; Match(RightParen);
				State = 1129; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1131; Match(Do);
				State = 1132; statement();
				State = 1133; Match(While);
				State = 1134; Match(LeftParen);
				State = 1135; expression(0);
				State = 1136; Match(RightParen);
				State = 1137; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1139; Match(For);
				State = 1140; Match(LeftParen);
				State = 1141; forinitstatement();
				State = 1143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << False) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (Thread_local - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typedef - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Virtual - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 1142; condition();
					}
				}

				State = 1145; Match(Semi);
				State = 1147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 1146; expression(0);
					}
				}

				State = 1149; Match(RightParen);
				State = 1150; statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1152; Match(For);
				State = 1153; Match(LeftParen);
				State = 1154; forrangedeclaration();
				State = 1155; Match(Colon);
				State = 1156; forrangeinitializer();
				State = 1157; Match(RightParen);
				State = 1158; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForinitstatementContext : ParserRuleContext {
		public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		public SimpledeclarationContext simpledeclaration() {
			return GetRuleContext<SimpledeclarationContext>(0);
		}
		public ForinitstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forinitstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForinitstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForinitstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForinitstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForinitstatementContext forinitstatement() {
		ForinitstatementContext _localctx = new ForinitstatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_forinitstatement);
		try {
			State = 1164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1162; expressionstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1163; simpledeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForrangedeclarationContext : ParserRuleContext {
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ForrangedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forrangedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForrangedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForrangedeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForrangedeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForrangedeclarationContext forrangedeclaration() {
		ForrangedeclarationContext _localctx = new ForrangedeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_forrangedeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1166; attributespecifierseq(0);
				}
			}

			State = 1169; declspecifierseq();
			State = 1170; declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForrangeinitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ForrangeinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forrangeinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForrangeinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForrangeinitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForrangeinitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForrangeinitializerContext forrangeinitializer() {
		ForrangeinitializerContext _localctx = new ForrangeinitializerContext(Context, State);
		EnterRule(_localctx, 110, RULE_forrangeinitializer);
		try {
			State = 1174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case True:
			case Typeid:
			case Typename:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1172; expression(0);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1173; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpstatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(CPP14Parser.Break, 0); }
		public ITerminalNode Continue() { return GetToken(CPP14Parser.Continue, 0); }
		public ITerminalNode Return() { return GetToken(CPP14Parser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ITerminalNode Goto() { return GetToken(CPP14Parser.Goto, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public JumpstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterJumpstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitJumpstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpstatementContext jumpstatement() {
		JumpstatementContext _localctx = new JumpstatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_jumpstatement);
		int _la;
		try {
			State = 1192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1176; Match(Break);
				State = 1177; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1178; Match(Continue);
				State = 1179; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1180; Match(Return);
				State = 1182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 1181; expression(0);
					}
				}

				State = 1184; Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1185; Match(Return);
				State = 1186; bracedinitlist();
				State = 1187; Match(Semi);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1189; Match(Goto);
				State = 1190; Match(Identifier);
				State = 1191; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationstatementContext : ParserRuleContext {
		public BlockdeclarationContext blockdeclaration() {
			return GetRuleContext<BlockdeclarationContext>(0);
		}
		public DeclarationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarationstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarationstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationstatementContext declarationstatement() {
		DeclarationstatementContext _localctx = new DeclarationstatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_declarationstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194; blockdeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationseqContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public DeclarationseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarationseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarationseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationseqContext declarationseq() {
		return declarationseq(0);
	}

	private DeclarationseqContext declarationseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationseqContext _localctx = new DeclarationseqContext(Context, _parentState);
		DeclarationseqContext _prevctx = _localctx;
		int _startState = 116;
		EnterRecursionRule(_localctx, 116, RULE_declarationseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1197; declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationseq);
					State = 1199;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1200; declaration();
					}
					} 
				}
				State = 1205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public BlockdeclarationContext blockdeclaration() {
			return GetRuleContext<BlockdeclarationContext>(0);
		}
		public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		public TemplatedeclarationContext templatedeclaration() {
			return GetRuleContext<TemplatedeclarationContext>(0);
		}
		public ExplicitinstantiationContext explicitinstantiation() {
			return GetRuleContext<ExplicitinstantiationContext>(0);
		}
		public ExplicitspecializationContext explicitspecialization() {
			return GetRuleContext<ExplicitspecializationContext>(0);
		}
		public LinkagespecificationContext linkagespecification() {
			return GetRuleContext<LinkagespecificationContext>(0);
		}
		public NamespacedefinitionContext namespacedefinition() {
			return GetRuleContext<NamespacedefinitionContext>(0);
		}
		public EmptydeclarationContext emptydeclaration() {
			return GetRuleContext<EmptydeclarationContext>(0);
		}
		public AttributedeclarationContext attributedeclaration() {
			return GetRuleContext<AttributedeclarationContext>(0);
		}
		public UdefineTopLevelContext udefineTopLevel() {
			return GetRuleContext<UdefineTopLevelContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 118, RULE_declaration);
		try {
			State = 1216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1206; blockdeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1207; functiondefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1208; templatedeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1209; explicitinstantiation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1210; explicitspecialization();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1211; linkagespecification();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1212; namespacedefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1213; emptydeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1214; attributedeclaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1215; udefineTopLevel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockdeclarationContext : ParserRuleContext {
		public SimpledeclarationContext simpledeclaration() {
			return GetRuleContext<SimpledeclarationContext>(0);
		}
		public AsmdefinitionContext asmdefinition() {
			return GetRuleContext<AsmdefinitionContext>(0);
		}
		public NamespacealiasdefinitionContext namespacealiasdefinition() {
			return GetRuleContext<NamespacealiasdefinitionContext>(0);
		}
		public UsingdeclarationContext usingdeclaration() {
			return GetRuleContext<UsingdeclarationContext>(0);
		}
		public UsingdirectiveContext usingdirective() {
			return GetRuleContext<UsingdirectiveContext>(0);
		}
		public Static_assertdeclarationContext static_assertdeclaration() {
			return GetRuleContext<Static_assertdeclarationContext>(0);
		}
		public AliasdeclarationContext aliasdeclaration() {
			return GetRuleContext<AliasdeclarationContext>(0);
		}
		public OpaqueenumdeclarationContext opaqueenumdeclaration() {
			return GetRuleContext<OpaqueenumdeclarationContext>(0);
		}
		public BlockdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBlockdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBlockdeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockdeclarationContext blockdeclaration() {
		BlockdeclarationContext _localctx = new BlockdeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_blockdeclaration);
		try {
			State = 1226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1218; simpledeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1219; asmdefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1220; namespacealiasdefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1221; usingdeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1222; usingdirective();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1223; static_assertdeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1224; aliasdeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1225; opaqueenumdeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasdeclarationContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AliasdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAliasdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAliasdeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasdeclarationContext aliasdeclaration() {
		AliasdeclarationContext _localctx = new AliasdeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_aliasdeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228; Match(Using);
			State = 1229; Match(Identifier);
			State = 1231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1230; attributespecifierseq(0);
				}
			}

			State = 1233; Match(Assign);
			State = 1234; thetypeid();
			State = 1235; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpledeclarationContext : ParserRuleContext {
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public InitdeclaratorlistContext initdeclaratorlist() {
			return GetRuleContext<InitdeclaratorlistContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public SimpledeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpledeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpledeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpledeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpledeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpledeclarationContext simpledeclaration() {
		SimpledeclarationContext _localctx = new SimpledeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_simpledeclaration);
		int _la;
		try {
			State = 1251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case Thread_local:
			case Typedef:
			case Typename:
			case Union:
			case Unsigned:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1238;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 1237; declspecifierseq();
					}
					break;
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Operator || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (Tilde - 85)) | (1L << (AndAnd - 85)) | (1L << (Doublecolon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 1240; initdeclaratorlist(0);
					}
				}

				State = 1243; Match(Semi);
				}
				break;
			case Alignas:
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1244; attributespecifierseq(0);
				State = 1246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 1245; declspecifierseq();
					}
					break;
				}
				State = 1248; initdeclaratorlist(0);
				State = 1249; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_assertdeclarationContext : ParserRuleContext {
		public ITerminalNode Static_assert() { return GetToken(CPP14Parser.Static_assert, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public Static_assertdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_assertdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatic_assertdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatic_assertdeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_assertdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_assertdeclarationContext static_assertdeclaration() {
		Static_assertdeclarationContext _localctx = new Static_assertdeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_static_assertdeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253; Match(Static_assert);
			State = 1254; Match(LeftParen);
			State = 1255; constantexpression();
			State = 1256; Match(Comma);
			State = 1257; Match(Stringliteral);
			State = 1258; Match(RightParen);
			State = 1259; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptydeclarationContext : ParserRuleContext {
		public EmptydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptydeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEmptydeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEmptydeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptydeclarationContext emptydeclaration() {
		EmptydeclarationContext _localctx = new EmptydeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_emptydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributedeclarationContext : ParserRuleContext {
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AttributedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributedeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributedeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributedeclarationContext attributedeclaration() {
		AttributedeclarationContext _localctx = new AttributedeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_attributedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1263; attributespecifierseq(0);
			State = 1264; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclspecifierContext : ParserRuleContext {
		public StorageclassspecifierContext storageclassspecifier() {
			return GetRuleContext<StorageclassspecifierContext>(0);
		}
		public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		public FunctionspecifierContext functionspecifier() {
			return GetRuleContext<FunctionspecifierContext>(0);
		}
		public ITerminalNode Friend() { return GetToken(CPP14Parser.Friend, 0); }
		public ITerminalNode Typedef() { return GetToken(CPP14Parser.Typedef, 0); }
		public ITerminalNode Constexpr() { return GetToken(CPP14Parser.Constexpr, 0); }
		public DeclspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclspecifierContext declspecifier() {
		DeclspecifierContext _localctx = new DeclspecifierContext(Context, State);
		EnterRule(_localctx, 132, RULE_declspecifier);
		try {
			State = 1272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Extern:
			case Mutable:
			case Register:
			case Static:
			case Thread_local:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1266; storageclassspecifier();
				}
				break;
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1267; typespecifier();
				}
				break;
			case Explicit:
			case Inline:
			case Virtual:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1268; functionspecifier();
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1269; Match(Friend);
				}
				break;
			case Typedef:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1270; Match(Typedef);
				}
				break;
			case Constexpr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1271; Match(Constexpr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclspecifierseqContext : ParserRuleContext {
		public DeclspecifierContext declspecifier() {
			return GetRuleContext<DeclspecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclspecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declspecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclspecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclspecifierseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclspecifierseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclspecifierseqContext declspecifierseq() {
		DeclspecifierseqContext _localctx = new DeclspecifierseqContext(Context, State);
		EnterRule(_localctx, 134, RULE_declspecifierseq);
		try {
			State = 1281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1274; declspecifier();
				State = 1276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 1275; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1278; declspecifier();
				State = 1279; declspecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageclassspecifierContext : ParserRuleContext {
		public ITerminalNode Register() { return GetToken(CPP14Parser.Register, 0); }
		public ITerminalNode Static() { return GetToken(CPP14Parser.Static, 0); }
		public ITerminalNode Thread_local() { return GetToken(CPP14Parser.Thread_local, 0); }
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public StorageclassspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageclassspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStorageclassspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStorageclassspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageclassspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageclassspecifierContext storageclassspecifier() {
		StorageclassspecifierContext _localctx = new StorageclassspecifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_storageclassspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (Extern - 36)) | (1L << (Mutable - 36)) | (1L << (Register - 36)) | (1L << (Static - 36)) | (1L << (Thread_local - 36)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionspecifierContext : ParserRuleContext {
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		public ITerminalNode Explicit() { return GetToken(CPP14Parser.Explicit, 0); }
		public FunctionspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionspecifierContext functionspecifier() {
		FunctionspecifierContext _localctx = new FunctionspecifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_functionspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (Explicit - 34)) | (1L << (Inline - 34)) | (1L << (Virtual - 34)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypedefnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypedefname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypedefname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefnameContext typedefname() {
		TypedefnameContext _localctx = new TypedefnameContext(Context, State);
		EnterRule(_localctx, 140, RULE_typedefname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierContext : ParserRuleContext {
		public TrailingtypespecifierContext trailingtypespecifier() {
			return GetRuleContext<TrailingtypespecifierContext>(0);
		}
		public ClassspecifierContext classspecifier() {
			return GetRuleContext<ClassspecifierContext>(0);
		}
		public EnumspecifierContext enumspecifier() {
			return GetRuleContext<EnumspecifierContext>(0);
		}
		public TypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecifierContext typespecifier() {
		TypespecifierContext _localctx = new TypespecifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_typespecifier);
		try {
			State = 1292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1289; trailingtypespecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1290; classspecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1291; enumspecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingtypespecifierContext : ParserRuleContext {
		public SimpletypespecifierContext simpletypespecifier() {
			return GetRuleContext<SimpletypespecifierContext>(0);
		}
		public ElaboratedtypespecifierContext elaboratedtypespecifier() {
			return GetRuleContext<ElaboratedtypespecifierContext>(0);
		}
		public TypenamespecifierContext typenamespecifier() {
			return GetRuleContext<TypenamespecifierContext>(0);
		}
		public CvqualifierContext cvqualifier() {
			return GetRuleContext<CvqualifierContext>(0);
		}
		public TrailingtypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingtypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingtypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingtypespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingtypespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingtypespecifierContext trailingtypespecifier() {
		TrailingtypespecifierContext _localctx = new TrailingtypespecifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_trailingtypespecifier);
		try {
			State = 1298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Decltype:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1294; simpletypespecifier();
				}
				break;
			case Class:
			case Enum:
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1295; elaboratedtypespecifier();
				}
				break;
			case Typename:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1296; typenamespecifier();
				}
				break;
			case Const:
			case Volatile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1297; cvqualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierseqContext : ParserRuleContext {
		public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public TypespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypespecifierseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecifierseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecifierseqContext typespecifierseq() {
		TypespecifierseqContext _localctx = new TypespecifierseqContext(Context, State);
		EnterRule(_localctx, 146, RULE_typespecifierseq);
		try {
			State = 1307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1300; typespecifier();
				State = 1302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 1301; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1304; typespecifier();
				State = 1305; typespecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingtypespecifierseqContext : ParserRuleContext {
		public TrailingtypespecifierContext trailingtypespecifier() {
			return GetRuleContext<TrailingtypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TrailingtypespecifierseqContext trailingtypespecifierseq() {
			return GetRuleContext<TrailingtypespecifierseqContext>(0);
		}
		public TrailingtypespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingtypespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingtypespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingtypespecifierseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingtypespecifierseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingtypespecifierseqContext trailingtypespecifierseq() {
		TrailingtypespecifierseqContext _localctx = new TrailingtypespecifierseqContext(Context, State);
		EnterRule(_localctx, 148, RULE_trailingtypespecifierseq);
		try {
			State = 1316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1309; trailingtypespecifier();
				State = 1311;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
				case 1:
					{
					State = 1310; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1313; trailingtypespecifier();
				State = 1314; trailingtypespecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypespecifierContext : ParserRuleContext {
		public ThetypenameContext thetypename() {
			return GetRuleContext<ThetypenameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Char() { return GetToken(CPP14Parser.Char, 0); }
		public ITerminalNode Char16() { return GetToken(CPP14Parser.Char16, 0); }
		public ITerminalNode Char32() { return GetToken(CPP14Parser.Char32, 0); }
		public ITerminalNode Wchar() { return GetToken(CPP14Parser.Wchar, 0); }
		public ITerminalNode Bool() { return GetToken(CPP14Parser.Bool, 0); }
		public ITerminalNode Short() { return GetToken(CPP14Parser.Short, 0); }
		public ITerminalNode Int() { return GetToken(CPP14Parser.Int, 0); }
		public ITerminalNode Long() { return GetToken(CPP14Parser.Long, 0); }
		public ITerminalNode Signed() { return GetToken(CPP14Parser.Signed, 0); }
		public ITerminalNode Unsigned() { return GetToken(CPP14Parser.Unsigned, 0); }
		public ITerminalNode Float() { return GetToken(CPP14Parser.Float, 0); }
		public ITerminalNode Double() { return GetToken(CPP14Parser.Double, 0); }
		public ITerminalNode Void() { return GetToken(CPP14Parser.Void, 0); }
		public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public SimpletypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpletypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpletypespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpletypespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypespecifierContext simpletypespecifier() {
		SimpletypespecifierContext _localctx = new SimpletypespecifierContext(Context, State);
		EnterRule(_localctx, 150, RULE_simpletypespecifier);
		try {
			State = 1341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1319;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 1318; nestednamespecifier(0);
					}
					break;
				}
				State = 1321; thetypename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1322; nestednamespecifier(0);
				State = 1323; Match(Template);
				State = 1324; simpletemplateid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1326; Match(Char);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1327; Match(Char16);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1328; Match(Char32);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1329; Match(Wchar);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1330; Match(Bool);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1331; Match(Short);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1332; Match(Int);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1333; Match(Long);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1334; Match(Signed);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1335; Match(Unsigned);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1336; Match(Float);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1337; Match(Double);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1338; Match(Void);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1339; Match(Auto);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1340; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThetypenameContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public EnumnameContext enumname() {
			return GetRuleContext<EnumnameContext>(0);
		}
		public TypedefnameContext typedefname() {
			return GetRuleContext<TypedefnameContext>(0);
		}
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ThetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thetypename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterThetypename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitThetypename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThetypenameContext thetypename() {
		ThetypenameContext _localctx = new ThetypenameContext(Context, State);
		EnterRule(_localctx, 152, RULE_thetypename);
		try {
			State = 1347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1343; classname();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1344; enumname();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1345; typedefname();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1346; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecltypespecifierContext : ParserRuleContext {
		public ITerminalNode Decltype() { return GetToken(CPP14Parser.Decltype, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decltypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDecltypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDecltypespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecltypespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecltypespecifierContext decltypespecifier() {
		DecltypespecifierContext _localctx = new DecltypespecifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_decltypespecifier);
		try {
			State = 1358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1349; Match(Decltype);
				State = 1350; Match(LeftParen);
				State = 1351; expression(0);
				State = 1352; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1354; Match(Decltype);
				State = 1355; Match(LeftParen);
				State = 1356; Match(Auto);
				State = 1357; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboratedtypespecifierContext : ParserRuleContext {
		public ClasskeyContext classkey() {
			return GetRuleContext<ClasskeyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ElaboratedtypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboratedtypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterElaboratedtypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitElaboratedtypespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboratedtypespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElaboratedtypespecifierContext elaboratedtypespecifier() {
		ElaboratedtypespecifierContext _localctx = new ElaboratedtypespecifierContext(Context, State);
		EnterRule(_localctx, 156, RULE_elaboratedtypespecifier);
		int _la;
		try {
			State = 1384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1360; classkey();
				State = 1362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1361; attributespecifierseq(0);
					}
				}

				State = 1365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
				case 1:
					{
					State = 1364; nestednamespecifier(0);
					}
					break;
				}
				State = 1367; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1369; classkey();
				State = 1370; simpletemplateid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1372; classkey();
				State = 1373; nestednamespecifier(0);
				State = 1375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 1374; Match(Template);
					}
				}

				State = 1377; simpletemplateid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1379; Match(Enum);
				State = 1381;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1380; nestednamespecifier(0);
					}
					break;
				}
				State = 1383; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumnameContext enumname() {
		EnumnameContext _localctx = new EnumnameContext(Context, State);
		EnterRule(_localctx, 158, RULE_enumname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumspecifierContext : ParserRuleContext {
		public EnumheadContext enumhead() {
			return GetRuleContext<EnumheadContext>(0);
		}
		public EnumeratorlistContext enumeratorlist() {
			return GetRuleContext<EnumeratorlistContext>(0);
		}
		public EnumspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumspecifierContext enumspecifier() {
		EnumspecifierContext _localctx = new EnumspecifierContext(Context, State);
		EnterRule(_localctx, 160, RULE_enumspecifier);
		int _la;
		try {
			State = 1401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1388; enumhead();
				State = 1389; Match(LeftBrace);
				State = 1391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1390; enumeratorlist(0);
					}
				}

				State = 1393; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1395; enumhead();
				State = 1396; Match(LeftBrace);
				State = 1397; enumeratorlist(0);
				State = 1398; Match(Comma);
				State = 1399; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumheadContext : ParserRuleContext {
		public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public EnumheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumhead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumhead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumhead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumhead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumheadContext enumhead() {
		EnumheadContext _localctx = new EnumheadContext(Context, State);
		EnterRule(_localctx, 162, RULE_enumhead);
		int _la;
		try {
			State = 1422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1403; enumkey();
				State = 1405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1404; attributespecifierseq(0);
					}
				}

				State = 1408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1407; Match(Identifier);
					}
				}

				State = 1411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1410; enumbase();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1413; enumkey();
				State = 1415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1414; attributespecifierseq(0);
					}
				}

				State = 1417; nestednamespecifier(0);
				State = 1418; Match(Identifier);
				State = 1420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1419; enumbase();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpaqueenumdeclarationContext : ParserRuleContext {
		public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public OpaqueenumdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opaqueenumdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOpaqueenumdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOpaqueenumdeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpaqueenumdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpaqueenumdeclarationContext opaqueenumdeclaration() {
		OpaqueenumdeclarationContext _localctx = new OpaqueenumdeclarationContext(Context, State);
		EnterRule(_localctx, 164, RULE_opaqueenumdeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1424; enumkey();
			State = 1426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1425; attributespecifierseq(0);
				}
			}

			State = 1428; Match(Identifier);
			State = 1430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1429; enumbase();
				}
			}

			State = 1432; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumkeyContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public EnumkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumkey; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumkey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumkey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumkeyContext enumkey() {
		EnumkeyContext _localctx = new EnumkeyContext(Context, State);
		EnterRule(_localctx, 166, RULE_enumkey);
		try {
			State = 1439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1434; Match(Enum);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1435; Match(Enum);
				State = 1436; Match(Class);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1437; Match(Enum);
				State = 1438; Match(Struct);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumbaseContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public EnumbaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumbase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumbase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumbase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumbase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumbaseContext enumbase() {
		EnumbaseContext _localctx = new EnumbaseContext(Context, State);
		EnterRule(_localctx, 168, RULE_enumbase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441; Match(Colon);
			State = 1442; typespecifierseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorlistContext : ParserRuleContext {
		public EnumeratordefinitionContext enumeratordefinition() {
			return GetRuleContext<EnumeratordefinitionContext>(0);
		}
		public EnumeratorlistContext enumeratorlist() {
			return GetRuleContext<EnumeratorlistContext>(0);
		}
		public EnumeratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumeratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumeratorlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorlistContext enumeratorlist() {
		return enumeratorlist(0);
	}

	private EnumeratorlistContext enumeratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EnumeratorlistContext _localctx = new EnumeratorlistContext(Context, _parentState);
		EnumeratorlistContext _prevctx = _localctx;
		int _startState = 170;
		EnterRecursionRule(_localctx, 170, RULE_enumeratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1445; enumeratordefinition();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1452;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumeratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enumeratorlist);
					State = 1447;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1448; Match(Comma);
					State = 1449; enumeratordefinition();
					}
					} 
				}
				State = 1454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumeratordefinitionContext : ParserRuleContext {
		public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public EnumeratordefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratordefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumeratordefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumeratordefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratordefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratordefinitionContext enumeratordefinition() {
		EnumeratordefinitionContext _localctx = new EnumeratordefinitionContext(Context, State);
		EnterRule(_localctx, 172, RULE_enumeratordefinition);
		try {
			State = 1460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1455; enumerator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1456; enumerator();
				State = 1457; Match(Assign);
				State = 1458; constantexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 174, RULE_enumerator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacenameContext : ParserRuleContext {
		public OriginalnamespacenameContext originalnamespacename() {
			return GetRuleContext<OriginalnamespacenameContext>(0);
		}
		public NamespacealiasContext namespacealias() {
			return GetRuleContext<NamespacealiasContext>(0);
		}
		public NamespacenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacenameContext namespacename() {
		NamespacenameContext _localctx = new NamespacenameContext(Context, State);
		EnterRule(_localctx, 176, RULE_namespacename);
		try {
			State = 1466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1464; originalnamespacename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1465; namespacealias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalnamespacenameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OriginalnamespacenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalnamespacename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOriginalnamespacename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOriginalnamespacename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriginalnamespacename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OriginalnamespacenameContext originalnamespacename() {
		OriginalnamespacenameContext _localctx = new OriginalnamespacenameContext(Context, State);
		EnterRule(_localctx, 178, RULE_originalnamespacename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedefinitionContext : ParserRuleContext {
		public NamednamespacedefinitionContext namednamespacedefinition() {
			return GetRuleContext<NamednamespacedefinitionContext>(0);
		}
		public UnnamednamespacedefinitionContext unnamednamespacedefinition() {
			return GetRuleContext<UnnamednamespacedefinitionContext>(0);
		}
		public NamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacedefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedefinitionContext namespacedefinition() {
		NamespacedefinitionContext _localctx = new NamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 180, RULE_namespacedefinition);
		try {
			State = 1472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1470; namednamespacedefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1471; unnamednamespacedefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamednamespacedefinitionContext : ParserRuleContext {
		public OriginalnamespacedefinitionContext originalnamespacedefinition() {
			return GetRuleContext<OriginalnamespacedefinitionContext>(0);
		}
		public ExtensionnamespacedefinitionContext extensionnamespacedefinition() {
			return GetRuleContext<ExtensionnamespacedefinitionContext>(0);
		}
		public NamednamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namednamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamednamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamednamespacedefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamednamespacedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamednamespacedefinitionContext namednamespacedefinition() {
		NamednamespacedefinitionContext _localctx = new NamednamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 182, RULE_namednamespacedefinition);
		try {
			State = 1476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1474; originalnamespacedefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1475; extensionnamespacedefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalnamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public OriginalnamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalnamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOriginalnamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOriginalnamespacedefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriginalnamespacedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OriginalnamespacedefinitionContext originalnamespacedefinition() {
		OriginalnamespacedefinitionContext _localctx = new OriginalnamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 184, RULE_originalnamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1478; Match(Inline);
				}
			}

			State = 1481; Match(Namespace);
			State = 1482; Match(Identifier);
			State = 1483; Match(LeftBrace);
			State = 1484; namespacebody();
			State = 1485; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionnamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public OriginalnamespacenameContext originalnamespacename() {
			return GetRuleContext<OriginalnamespacenameContext>(0);
		}
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ExtensionnamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionnamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExtensionnamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExtensionnamespacedefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionnamespacedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionnamespacedefinitionContext extensionnamespacedefinition() {
		ExtensionnamespacedefinitionContext _localctx = new ExtensionnamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 186, RULE_extensionnamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1487; Match(Inline);
				}
			}

			State = 1490; Match(Namespace);
			State = 1491; originalnamespacename();
			State = 1492; Match(LeftBrace);
			State = 1493; namespacebody();
			State = 1494; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamednamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public UnnamednamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamednamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnnamednamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnnamednamespacedefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnamednamespacedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnnamednamespacedefinitionContext unnamednamespacedefinition() {
		UnnamednamespacedefinitionContext _localctx = new UnnamednamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 188, RULE_unnamednamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1496; Match(Inline);
				}
			}

			State = 1499; Match(Namespace);
			State = 1500; Match(LeftBrace);
			State = 1501; namespacebody();
			State = 1502; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacebodyContext : ParserRuleContext {
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public NamespacebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacebody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacebody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacebody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacebodyContext namespacebody() {
		NamespacebodyContext _localctx = new NamespacebodyContext(Context, State);
		EnterRule(_localctx, 190, RULE_namespacebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << Alignas) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (Thread_local - 64)) | (1L << (Typedef - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (AndAnd - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (UEAPI - 128)) | (1L << (Identifier - 128)))) != 0)) {
				{
				State = 1504; declarationseq(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacealiasContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespacealiasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacealias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacealias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacealias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacealias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacealiasContext namespacealias() {
		NamespacealiasContext _localctx = new NamespacealiasContext(Context, State);
		EnterRule(_localctx, 192, RULE_namespacealias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacealiasdefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
			return GetRuleContext<QualifiednamespacespecifierContext>(0);
		}
		public NamespacealiasdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacealiasdefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacealiasdefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacealiasdefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacealiasdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacealiasdefinitionContext namespacealiasdefinition() {
		NamespacealiasdefinitionContext _localctx = new NamespacealiasdefinitionContext(Context, State);
		EnterRule(_localctx, 194, RULE_namespacealiasdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509; Match(Namespace);
			State = 1510; Match(Identifier);
			State = 1511; Match(Assign);
			State = 1512; qualifiednamespacespecifier();
			State = 1513; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiednamespacespecifierContext : ParserRuleContext {
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public QualifiednamespacespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiednamespacespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterQualifiednamespacespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitQualifiednamespacespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiednamespacespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
		QualifiednamespacespecifierContext _localctx = new QualifiednamespacespecifierContext(Context, State);
		EnterRule(_localctx, 196, RULE_qualifiednamespacespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1515; nestednamespecifier(0);
				}
				break;
			}
			State = 1518; namespacename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingdeclarationContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		public UsingdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUsingdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUsingdeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingdeclarationContext usingdeclaration() {
		UsingdeclarationContext _localctx = new UsingdeclarationContext(Context, State);
		EnterRule(_localctx, 198, RULE_usingdeclaration);
		int _la;
		try {
			State = 1533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1520; Match(Using);
				State = 1522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Typename) {
					{
					State = 1521; Match(Typename);
					}
				}

				State = 1524; nestednamespecifier(0);
				State = 1525; unqualifiedid();
				State = 1526; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1528; Match(Using);
				State = 1529; Match(Doublecolon);
				State = 1530; unqualifiedid();
				State = 1531; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingdirectiveContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UsingdirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingdirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUsingdirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUsingdirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingdirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingdirectiveContext usingdirective() {
		UsingdirectiveContext _localctx = new UsingdirectiveContext(Context, State);
		EnterRule(_localctx, 200, RULE_usingdirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1535; attributespecifierseq(0);
				}
			}

			State = 1538; Match(Using);
			State = 1539; Match(Namespace);
			State = 1541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1540; nestednamespecifier(0);
				}
				break;
			}
			State = 1543; namespacename();
			State = 1544; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmdefinitionContext : ParserRuleContext {
		public ITerminalNode Asm() { return GetToken(CPP14Parser.Asm, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public AsmdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmdefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAsmdefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAsmdefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmdefinitionContext asmdefinition() {
		AsmdefinitionContext _localctx = new AsmdefinitionContext(Context, State);
		EnterRule(_localctx, 202, RULE_asmdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546; Match(Asm);
			State = 1547; Match(LeftParen);
			State = 1548; Match(Stringliteral);
			State = 1549; Match(RightParen);
			State = 1550; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkagespecificationContext : ParserRuleContext {
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public LinkagespecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkagespecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLinkagespecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLinkagespecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkagespecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkagespecificationContext linkagespecification() {
		LinkagespecificationContext _localctx = new LinkagespecificationContext(Context, State);
		EnterRule(_localctx, 204, RULE_linkagespecification);
		int _la;
		try {
			State = 1562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1552; Match(Extern);
				State = 1553; Match(Stringliteral);
				State = 1554; Match(LeftBrace);
				State = 1556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << Alignas) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (Thread_local - 64)) | (1L << (Typedef - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (AndAnd - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (UEAPI - 128)) | (1L << (Identifier - 128)))) != 0)) {
					{
					State = 1555; declarationseq(0);
					}
				}

				State = 1558; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1559; Match(Extern);
				State = 1560; Match(Stringliteral);
				State = 1561; declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributespecifierseqContext : ParserRuleContext {
		public AttributespecifierContext attributespecifier() {
			return GetRuleContext<AttributespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AttributespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributespecifierseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributespecifierseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributespecifierseqContext attributespecifierseq() {
		return attributespecifierseq(0);
	}

	private AttributespecifierseqContext attributespecifierseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributespecifierseqContext _localctx = new AttributespecifierseqContext(Context, _parentState);
		AttributespecifierseqContext _prevctx = _localctx;
		int _startState = 206;
		EnterRecursionRule(_localctx, 206, RULE_attributespecifierseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1565; attributespecifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1571;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttributespecifierseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_attributespecifierseq);
					State = 1567;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1568; attributespecifier();
					}
					} 
				}
				State = 1573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributespecifierContext : ParserRuleContext {
		public AttributelistContext attributelist() {
			return GetRuleContext<AttributelistContext>(0);
		}
		public AlignmentspecifierContext alignmentspecifier() {
			return GetRuleContext<AlignmentspecifierContext>(0);
		}
		public AttributespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributespecifierContext attributespecifier() {
		AttributespecifierContext _localctx = new AttributespecifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_attributespecifier);
		try {
			State = 1581;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1574; Match(LeftBracket);
				State = 1575; Match(LeftBracket);
				State = 1576; attributelist(0);
				State = 1577; Match(RightBracket);
				State = 1578; Match(RightBracket);
				}
				break;
			case Alignas:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1580; alignmentspecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentspecifierContext : ParserRuleContext {
		public ITerminalNode Alignas() { return GetToken(CPP14Parser.Alignas, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AlignmentspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAlignmentspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAlignmentspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignmentspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentspecifierContext alignmentspecifier() {
		AlignmentspecifierContext _localctx = new AlignmentspecifierContext(Context, State);
		EnterRule(_localctx, 210, RULE_alignmentspecifier);
		int _la;
		try {
			State = 1599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1583; Match(Alignas);
				State = 1584; Match(LeftParen);
				State = 1585; thetypeid();
				State = 1587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1586; Match(Ellipsis);
					}
				}

				State = 1589; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1591; Match(Alignas);
				State = 1592; Match(LeftParen);
				State = 1593; constantexpression();
				State = 1595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1594; Match(Ellipsis);
					}
				}

				State = 1597; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributelistContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public AttributelistContext attributelist() {
			return GetRuleContext<AttributelistContext>(0);
		}
		public AttributelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributelist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributelistContext attributelist() {
		return attributelist(0);
	}

	private AttributelistContext attributelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributelistContext _localctx = new AttributelistContext(Context, _parentState);
		AttributelistContext _prevctx = _localctx;
		int _startState = 212;
		EnterRecursionRule(_localctx, 212, RULE_attributelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1603;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
				case 1:
					{
					State = 1602; attribute();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1605; attribute();
				State = 1606; Match(Ellipsis);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1622;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1620;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
					case 1:
						{
						_localctx = new AttributelistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributelist);
						State = 1610;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1611; Match(Comma);
						State = 1613;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
						case 1:
							{
							State = 1612; attribute();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new AttributelistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributelist);
						State = 1615;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1616; Match(Comma);
						State = 1617; attribute();
						State = 1618; Match(Ellipsis);
						}
						break;
					}
					} 
				}
				State = 1624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributetokenContext attributetoken() {
			return GetRuleContext<AttributetokenContext>(0);
		}
		public AttributeargumentclauseContext attributeargumentclause() {
			return GetRuleContext<AttributeargumentclauseContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 214, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625; attributetoken();
			State = 1627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1626; attributeargumentclause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributetokenContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributescopedtokenContext attributescopedtoken() {
			return GetRuleContext<AttributescopedtokenContext>(0);
		}
		public AttributetokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributetoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributetoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributetoken(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributetoken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributetokenContext attributetoken() {
		AttributetokenContext _localctx = new AttributetokenContext(Context, State);
		EnterRule(_localctx, 216, RULE_attributetoken);
		try {
			State = 1631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1629; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1630; attributescopedtoken();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributescopedtokenContext : ParserRuleContext {
		public AttributenamespaceContext attributenamespace() {
			return GetRuleContext<AttributenamespaceContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributescopedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributescopedtoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributescopedtoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributescopedtoken(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributescopedtoken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributescopedtokenContext attributescopedtoken() {
		AttributescopedtokenContext _localctx = new AttributescopedtokenContext(Context, State);
		EnterRule(_localctx, 218, RULE_attributescopedtoken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1633; attributenamespace();
			State = 1634; Match(Doublecolon);
			State = 1635; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributenamespaceContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributenamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributenamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributenamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributenamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributenamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributenamespaceContext attributenamespace() {
		AttributenamespaceContext _localctx = new AttributenamespaceContext(Context, State);
		EnterRule(_localctx, 220, RULE_attributenamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1637; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeargumentclauseContext : ParserRuleContext {
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public AttributeargumentclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeargumentclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeargumentclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeargumentclause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeargumentclause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeargumentclauseContext attributeargumentclause() {
		AttributeargumentclauseContext _localctx = new AttributeargumentclauseContext(Context, State);
		EnterRule(_localctx, 222, RULE_attributeargumentclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639; Match(LeftParen);
			State = 1640; balancedtokenseq(0);
			State = 1641; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedtokenseqContext : ParserRuleContext {
		public BalancedtokenContext balancedtoken() {
			return GetRuleContext<BalancedtokenContext>(0);
		}
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public BalancedtokenseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtokenseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBalancedtokenseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBalancedtokenseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBalancedtokenseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BalancedtokenseqContext balancedtokenseq() {
		return balancedtokenseq(0);
	}

	private BalancedtokenseqContext balancedtokenseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BalancedtokenseqContext _localctx = new BalancedtokenseqContext(Context, _parentState);
		BalancedtokenseqContext _prevctx = _localctx;
		int _startState = 224;
		EnterRecursionRule(_localctx, 224, RULE_balancedtokenseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1644; balancedtoken();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1651;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BalancedtokenseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_balancedtokenseq);
					State = 1647;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1648; balancedtoken();
					}
					} 
				}
				State = 1653;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BalancedtokenContext : ParserRuleContext {
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public BalancedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBalancedtoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBalancedtoken(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBalancedtoken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BalancedtokenContext balancedtoken() {
		BalancedtokenContext _localctx = new BalancedtokenContext(Context, State);
		EnterRule(_localctx, 226, RULE_balancedtoken);
		try {
			State = 1666;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1654; Match(LeftParen);
				State = 1655; balancedtokenseq(0);
				State = 1656; Match(RightParen);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1658; Match(LeftBracket);
				State = 1659; balancedtokenseq(0);
				State = 1660; Match(RightBracket);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1662; Match(LeftBrace);
				State = 1663; balancedtokenseq(0);
				State = 1664; Match(RightBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitdeclaratorlistContext : ParserRuleContext {
		public InitdeclaratorContext initdeclarator() {
			return GetRuleContext<InitdeclaratorContext>(0);
		}
		public InitdeclaratorlistContext initdeclaratorlist() {
			return GetRuleContext<InitdeclaratorlistContext>(0);
		}
		public InitdeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initdeclaratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitdeclaratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitdeclaratorlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitdeclaratorlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitdeclaratorlistContext initdeclaratorlist() {
		return initdeclaratorlist(0);
	}

	private InitdeclaratorlistContext initdeclaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitdeclaratorlistContext _localctx = new InitdeclaratorlistContext(Context, _parentState);
		InitdeclaratorlistContext _prevctx = _localctx;
		int _startState = 228;
		EnterRecursionRule(_localctx, 228, RULE_initdeclaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1669; initdeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1676;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitdeclaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initdeclaratorlist);
					State = 1671;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1672; Match(Comma);
					State = 1673; initdeclarator();
					}
					} 
				}
				State = 1678;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitdeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitdeclaratorContext initdeclarator() {
		InitdeclaratorContext _localctx = new InitdeclaratorContext(Context, State);
		EnterRule(_localctx, 230, RULE_initdeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679; declarator();
			State = 1681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 1680; initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 232, RULE_declarator);
		try {
			State = 1688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1683; ptrdeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1684; noptrdeclarator(0);
				State = 1685; parametersandqualifiers();
				State = 1686; trailingreturntype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrdeclaratorContext : ParserRuleContext {
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public PtrdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrdeclaratorContext ptrdeclarator() {
		PtrdeclaratorContext _localctx = new PtrdeclaratorContext(Context, State);
		EnterRule(_localctx, 234, RULE_ptrdeclarator);
		try {
			State = 1694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1690; noptrdeclarator(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1691; ptroperator();
				State = 1692; ptrdeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrdeclaratorContext : ParserRuleContext {
		public DeclaratoridContext declaratorid() {
			return GetRuleContext<DeclaratoridContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoptrdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoptrdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoptrdeclaratorContext noptrdeclarator() {
		return noptrdeclarator(0);
	}

	private NoptrdeclaratorContext noptrdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrdeclaratorContext _localctx = new NoptrdeclaratorContext(Context, _parentState);
		NoptrdeclaratorContext _prevctx = _localctx;
		int _startState = 236;
		EnterRecursionRule(_localctx, 236, RULE_noptrdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Ellipsis:
			case Identifier:
				{
				State = 1697; declaratorid();
				State = 1699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
				case 1:
					{
					State = 1698; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				State = 1701; Match(LeftParen);
				State = 1702; ptrdeclarator();
				State = 1703; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1718;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
					case 1:
						{
						_localctx = new NoptrdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrdeclarator);
						State = 1707;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1708; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrdeclarator);
						State = 1709;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1710; Match(LeftBracket);
						State = 1712;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
							{
							State = 1711; constantexpression();
							}
						}

						State = 1714; Match(RightBracket);
						State = 1716;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
						case 1:
							{
							State = 1715; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersandqualifiersContext : ParserRuleContext {
		public ParameterdeclarationclauseContext parameterdeclarationclause() {
			return GetRuleContext<ParameterdeclarationclauseContext>(0);
		}
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public RefqualifierContext refqualifier() {
			return GetRuleContext<RefqualifierContext>(0);
		}
		public ExceptionspecificationContext exceptionspecification() {
			return GetRuleContext<ExceptionspecificationContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ParametersandqualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersandqualifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParametersandqualifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParametersandqualifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersandqualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersandqualifiersContext parametersandqualifiers() {
		ParametersandqualifiersContext _localctx = new ParametersandqualifiersContext(Context, State);
		EnterRule(_localctx, 238, RULE_parametersandqualifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723; Match(LeftParen);
			State = 1724; parameterdeclarationclause();
			State = 1725; Match(RightParen);
			State = 1727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1726; cvqualifierseq();
				}
				break;
			}
			State = 1730;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1729; refqualifier();
				}
				break;
			}
			State = 1733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1732; exceptionspecification();
				}
				break;
			}
			State = 1736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				{
				State = 1735; attributespecifierseq(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingreturntypeContext : ParserRuleContext {
		public TrailingtypespecifierseqContext trailingtypespecifierseq() {
			return GetRuleContext<TrailingtypespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public TrailingreturntypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingreturntype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingreturntype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingreturntype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingreturntype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingreturntypeContext trailingreturntype() {
		TrailingreturntypeContext _localctx = new TrailingreturntypeContext(Context, State);
		EnterRule(_localctx, 240, RULE_trailingreturntype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738; Match(Arrow);
			State = 1739; trailingtypespecifierseq();
			State = 1741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1740; abstractdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtroperatorContext : ParserRuleContext {
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public PtroperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptroperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtroperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtroperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtroperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtroperatorContext ptroperator() {
		PtroperatorContext _localctx = new PtroperatorContext(Context, State);
		EnterRule(_localctx, 242, RULE_ptroperator);
		try {
			State = 1766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Star:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1743; Match(Star);
				State = 1745;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1744; attributespecifierseq(0);
					}
					break;
				}
				State = 1748;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
				case 1:
					{
					State = 1747; cvqualifierseq();
					}
					break;
				}
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1750; Match(And);
				State = 1752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1751; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case AndAnd:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1754; Match(AndAnd);
				State = 1756;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1755; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case Decltype:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1758; nestednamespecifier(0);
				State = 1759; Match(Star);
				State = 1761;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1760; attributespecifierseq(0);
					}
					break;
				}
				State = 1764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1763; cvqualifierseq();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierseqContext : ParserRuleContext {
		public CvqualifierContext cvqualifier() {
			return GetRuleContext<CvqualifierContext>(0);
		}
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public CvqualifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCvqualifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCvqualifierseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCvqualifierseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CvqualifierseqContext cvqualifierseq() {
		CvqualifierseqContext _localctx = new CvqualifierseqContext(Context, State);
		EnterRule(_localctx, 244, RULE_cvqualifierseq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1768; cvqualifier();
			State = 1770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1769; cvqualifierseq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(CPP14Parser.Const, 0); }
		public ITerminalNode Volatile() { return GetToken(CPP14Parser.Volatile, 0); }
		public CvqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCvqualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCvqualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCvqualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CvqualifierContext cvqualifier() {
		CvqualifierContext _localctx = new CvqualifierContext(Context, State);
		EnterRule(_localctx, 246, RULE_cvqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772;
			_la = TokenStream.LA(1);
			if ( !(_la==Const || _la==Volatile) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefqualifierContext : ParserRuleContext {
		public RefqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refqualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRefqualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRefqualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefqualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefqualifierContext refqualifier() {
		RefqualifierContext _localctx = new RefqualifierContext(Context, State);
		EnterRule(_localctx, 248, RULE_refqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1774;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==AndAnd) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratoridContext : ParserRuleContext {
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public DeclaratoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclaratorid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclaratorid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaratorid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratoridContext declaratorid() {
		DeclaratoridContext _localctx = new DeclaratoridContext(Context, State);
		EnterRule(_localctx, 250, RULE_declaratorid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1776; Match(Ellipsis);
				}
			}

			State = 1779; idexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThetypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ThetypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thetypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterThetypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitThetypeid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThetypeid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThetypeidContext thetypeid() {
		ThetypeidContext _localctx = new ThetypeidContext(Context, State);
		EnterRule(_localctx, 252, RULE_thetypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1781; typespecifierseq();
			State = 1783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 1782; abstractdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractdeclaratorContext : ParserRuleContext {
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public AbstractpackdeclaratorContext abstractpackdeclarator() {
			return GetRuleContext<AbstractpackdeclaratorContext>(0);
		}
		public AbstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAbstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAbstractdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractdeclaratorContext abstractdeclarator() {
		AbstractdeclaratorContext _localctx = new AbstractdeclaratorContext(Context, State);
		EnterRule(_localctx, 254, RULE_abstractdeclarator);
		try {
			State = 1793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1785; ptrabstractdeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1787;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1786; noptrabstractdeclarator(0);
					}
					break;
				}
				State = 1789; parametersandqualifiers();
				State = 1790; trailingreturntype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1792; abstractpackdeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrabstractdeclaratorContext : ParserRuleContext {
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public PtrabstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrabstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrabstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrabstractdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrabstractdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrabstractdeclaratorContext ptrabstractdeclarator() {
		PtrabstractdeclaratorContext _localctx = new PtrabstractdeclaratorContext(Context, State);
		EnterRule(_localctx, 256, RULE_ptrabstractdeclarator);
		try {
			State = 1800;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1795; noptrabstractdeclarator(0);
				}
				break;
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1796; ptroperator();
				State = 1798;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1797; ptrabstractdeclarator();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrabstractdeclaratorContext : ParserRuleContext {
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public NoptrabstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrabstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrabstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrabstractdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoptrabstractdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
		return noptrabstractdeclarator(0);
	}

	private NoptrabstractdeclaratorContext noptrabstractdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrabstractdeclaratorContext _localctx = new NoptrabstractdeclaratorContext(Context, _parentState);
		NoptrabstractdeclaratorContext _prevctx = _localctx;
		int _startState = 258;
		EnterRecursionRule(_localctx, 258, RULE_noptrabstractdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1803; parametersandqualifiers();
				}
				break;
			case 2:
				{
				State = 1804; Match(LeftBracket);
				State = 1806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 1805; constantexpression();
					}
				}

				State = 1808; Match(RightBracket);
				State = 1810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 1809; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1812; Match(LeftParen);
				State = 1813; ptrabstractdeclarator();
				State = 1814; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1831;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1829;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
					case 1:
						{
						_localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractdeclarator);
						State = 1818;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1819; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractdeclarator);
						State = 1820;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1821; Match(LeftBracket);
						State = 1823;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
							{
							State = 1822; constantexpression();
							}
						}

						State = 1825; Match(RightBracket);
						State = 1827;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
						case 1:
							{
							State = 1826; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1833;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractpackdeclaratorContext : ParserRuleContext {
		public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
			return GetRuleContext<NoptrabstractpackdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public AbstractpackdeclaratorContext abstractpackdeclarator() {
			return GetRuleContext<AbstractpackdeclaratorContext>(0);
		}
		public AbstractpackdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractpackdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAbstractpackdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAbstractpackdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractpackdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractpackdeclaratorContext abstractpackdeclarator() {
		AbstractpackdeclaratorContext _localctx = new AbstractpackdeclaratorContext(Context, State);
		EnterRule(_localctx, 260, RULE_abstractpackdeclarator);
		try {
			State = 1838;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ellipsis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1834; noptrabstractpackdeclarator(0);
				}
				break;
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1835; ptroperator();
				State = 1836; abstractpackdeclarator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrabstractpackdeclaratorContext : ParserRuleContext {
		public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
			return GetRuleContext<NoptrabstractpackdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NoptrabstractpackdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrabstractpackdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrabstractpackdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrabstractpackdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoptrabstractpackdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
		return noptrabstractpackdeclarator(0);
	}

	private NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrabstractpackdeclaratorContext _localctx = new NoptrabstractpackdeclaratorContext(Context, _parentState);
		NoptrabstractpackdeclaratorContext _prevctx = _localctx;
		int _startState = 262;
		EnterRecursionRule(_localctx, 262, RULE_noptrabstractpackdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1841; Match(Ellipsis);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1856;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1854;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
					case 1:
						{
						_localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractpackdeclarator);
						State = 1843;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1844; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractpackdeclarator);
						State = 1845;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1846; Match(LeftBracket);
						State = 1848;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
							{
							State = 1847; constantexpression();
							}
						}

						State = 1850; Match(RightBracket);
						State = 1852;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
						case 1:
							{
							State = 1851; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1858;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterdeclarationclauseContext : ParserRuleContext {
		public ParameterdeclarationlistContext parameterdeclarationlist() {
			return GetRuleContext<ParameterdeclarationlistContext>(0);
		}
		public ParameterdeclarationclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclarationclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclarationclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclarationclause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterdeclarationclause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationclauseContext parameterdeclarationclause() {
		ParameterdeclarationclauseContext _localctx = new ParameterdeclarationclauseContext(Context, State);
		EnterRule(_localctx, 264, RULE_parameterdeclarationclause);
		int _la;
		try {
			State = 1869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Struct - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftBracket - 74)) | (1L << (Doublecolon - 74)) | (1L << (Identifier - 74)))) != 0)) {
					{
					State = 1859; parameterdeclarationlist(0);
					}
				}

				State = 1863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1862; Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1865; parameterdeclarationlist(0);
				State = 1866; Match(Comma);
				State = 1867; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterdeclarationlistContext : ParserRuleContext {
		public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		public ParameterdeclarationlistContext parameterdeclarationlist() {
			return GetRuleContext<ParameterdeclarationlistContext>(0);
		}
		public ParameterdeclarationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclarationlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclarationlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclarationlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterdeclarationlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationlistContext parameterdeclarationlist() {
		return parameterdeclarationlist(0);
	}

	private ParameterdeclarationlistContext parameterdeclarationlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterdeclarationlistContext _localctx = new ParameterdeclarationlistContext(Context, _parentState);
		ParameterdeclarationlistContext _prevctx = _localctx;
		int _startState = 266;
		EnterRecursionRule(_localctx, 266, RULE_parameterdeclarationlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1872; parameterdeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1879;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterdeclarationlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterdeclarationlist);
					State = 1874;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1875; Match(Comma);
					State = 1876; parameterdeclaration();
					}
					} 
				}
				State = 1881;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterdeclarationContext : ParserRuleContext {
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ParameterdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationContext parameterdeclaration() {
		ParameterdeclarationContext _localctx = new ParameterdeclarationContext(Context, State);
		EnterRule(_localctx, 268, RULE_parameterdeclaration);
		int _la;
		try {
			State = 1913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1882; attributespecifierseq(0);
					}
				}

				State = 1885; declspecifierseq();
				State = 1886; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1888; attributespecifierseq(0);
					}
				}

				State = 1891; declspecifierseq();
				State = 1892; declarator();
				State = 1893; Match(Assign);
				State = 1894; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1896; attributespecifierseq(0);
					}
				}

				State = 1899; declspecifierseq();
				State = 1901;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
				case 1:
					{
					State = 1900; abstractdeclarator();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1903; attributespecifierseq(0);
					}
				}

				State = 1906; declspecifierseq();
				State = 1908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (AndAnd - 85)) | (1L << (Doublecolon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 1907; abstractdeclarator();
					}
				}

				State = 1910; Match(Assign);
				State = 1911; initializerclause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctiondefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctiondefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 270, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1915; attributespecifierseq(0);
				}
			}

			State = 1919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 1918; declspecifierseq();
				}
				break;
			}
			State = 1921; declarator();
			State = 1923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final || _la==Override) {
				{
				State = 1922; virtspecifierseq(0);
				}
			}

			State = 1925; functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdefineTopLevelContext : ParserRuleContext {
		public UclassContext uclass() {
			return GetRuleContext<UclassContext>(0);
		}
		public UstructContext ustruct() {
			return GetRuleContext<UstructContext>(0);
		}
		public UenumContext uenum() {
			return GetRuleContext<UenumContext>(0);
		}
		public ITerminalNode UEAPI() { return GetToken(CPP14Parser.UEAPI, 0); }
		public UdefineTopLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udefineTopLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUdefineTopLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUdefineTopLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdefineTopLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdefineTopLevelContext udefineTopLevel() {
		UdefineTopLevelContext _localctx = new UdefineTopLevelContext(Context, State);
		EnterRule(_localctx, 272, RULE_udefineTopLevel);
		try {
			State = 1931;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1927; uclass();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1928; ustruct();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1929; uenum();
				}
				break;
			case UEAPI:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1930; Match(UEAPI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdefineContext : ParserRuleContext {
		public UfunctionContext ufunction() {
			return GetRuleContext<UfunctionContext>(0);
		}
		public UpropertyContext uproperty() {
			return GetRuleContext<UpropertyContext>(0);
		}
		public UdeprecatedContext udeprecated() {
			return GetRuleContext<UdeprecatedContext>(0);
		}
		public UdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUdefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUdefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdefineContext udefine() {
		UdefineContext _localctx = new UdefineContext(Context, State);
		EnterRule(_localctx, 274, RULE_udefine);
		try {
			State = 1937;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1933; ufunction();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1934; uproperty();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1935; udeprecated();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1936; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UclassContext : ParserRuleContext {
		public UmetaContext umeta() {
			return GetRuleContext<UmetaContext>(0);
		}
		public UclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UclassContext uclass() {
		UclassContext _localctx = new UclassContext(Context, State);
		EnterRule(_localctx, 276, RULE_uclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1939; Match(T__1);
			State = 1940; umeta();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UstructContext : ParserRuleContext {
		public UmetaContext umeta() {
			return GetRuleContext<UmetaContext>(0);
		}
		public UstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ustruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UstructContext ustruct() {
		UstructContext _localctx = new UstructContext(Context, State);
		EnterRule(_localctx, 278, RULE_ustruct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942; Match(T__2);
			State = 1943; umeta();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UenumContext : ParserRuleContext {
		public UmetaContext umeta() {
			return GetRuleContext<UmetaContext>(0);
		}
		public UenumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uenum; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUenum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUenum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUenum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UenumContext uenum() {
		UenumContext _localctx = new UenumContext(Context, State);
		EnterRule(_localctx, 280, RULE_uenum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945; Match(T__3);
			State = 1946; umeta();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UfunctionContext : ParserRuleContext {
		public UmetaContext umeta() {
			return GetRuleContext<UmetaContext>(0);
		}
		public UfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ufunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUfunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UfunctionContext ufunction() {
		UfunctionContext _localctx = new UfunctionContext(Context, State);
		EnterRule(_localctx, 282, RULE_ufunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1948; Match(T__4);
			State = 1949; umeta();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpropertyContext : ParserRuleContext {
		public UmetaContext umeta() {
			return GetRuleContext<UmetaContext>(0);
		}
		public UpropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uproperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUproperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUproperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpropertyContext uproperty() {
		UpropertyContext _localctx = new UpropertyContext(Context, State);
		EnterRule(_localctx, 284, RULE_uproperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1951; Match(T__5);
			State = 1952; umeta();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdeprecatedContext : ParserRuleContext {
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public UdeprecatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udeprecated; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUdeprecated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUdeprecated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdeprecated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdeprecatedContext udeprecated() {
		UdeprecatedContext _localctx = new UdeprecatedContext(Context, State);
		EnterRule(_localctx, 286, RULE_udeprecated);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1954; Match(T__6);
			State = 1955; Match(LeftParen);
			State = 1956; literal();
			State = 1957; Match(Comma);
			State = 1958; literal();
			State = 1959; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UmetaContext : ParserRuleContext {
		public UmetaParametrListContext umetaParametrList() {
			return GetRuleContext<UmetaParametrListContext>(0);
		}
		public UmetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_umeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUmeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUmeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUmeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UmetaContext umeta() {
		UmetaContext _localctx = new UmetaContext(Context, State);
		EnterRule(_localctx, 288, RULE_umeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1961; Match(LeftParen);
			State = 1963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1962; umetaParametrList();
				}
			}

			State = 1965; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UmetaParametrListContext : ParserRuleContext {
		public UmetaParametrContext umetaParametr() {
			return GetRuleContext<UmetaParametrContext>(0);
		}
		public UmetaParametrListContext umetaParametrList() {
			return GetRuleContext<UmetaParametrListContext>(0);
		}
		public UmetaParametrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_umetaParametrList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUmetaParametrList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUmetaParametrList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUmetaParametrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UmetaParametrListContext umetaParametrList() {
		UmetaParametrListContext _localctx = new UmetaParametrListContext(Context, State);
		EnterRule(_localctx, 290, RULE_umetaParametrList);
		try {
			State = 1972;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1967; umetaParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1968; umetaParametr();
				State = 1969; Match(Comma);
				State = 1970; umetaParametrList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UmetaParametrContext : ParserRuleContext {
		public UmetaParametrKeyContext umetaParametrKey() {
			return GetRuleContext<UmetaParametrKeyContext>(0);
		}
		public UmetaParametrValueContext umetaParametrValue() {
			return GetRuleContext<UmetaParametrValueContext>(0);
		}
		public UmetaParametrListContext umetaParametrList() {
			return GetRuleContext<UmetaParametrListContext>(0);
		}
		public UmetaParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_umetaParametr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUmetaParametr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUmetaParametr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUmetaParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UmetaParametrContext umetaParametr() {
		UmetaParametrContext _localctx = new UmetaParametrContext(Context, State);
		EnterRule(_localctx, 292, RULE_umetaParametr);
		try {
			State = 1985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1974; umetaParametrKey();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1975; umetaParametrKey();
				State = 1976; Match(Assign);
				State = 1977; umetaParametrValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1979; umetaParametrKey();
				State = 1980; Match(Assign);
				State = 1981; Match(LeftParen);
				State = 1982; umetaParametrList();
				State = 1983; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UmetaParametrKeyContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public UmetaParametrKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_umetaParametrKey; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUmetaParametrKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUmetaParametrKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUmetaParametrKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UmetaParametrKeyContext umetaParametrKey() {
		UmetaParametrKeyContext _localctx = new UmetaParametrKeyContext(Context, State);
		EnterRule(_localctx, 294, RULE_umetaParametrKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UmetaParametrValueContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public UmetaParametrValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_umetaParametrValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUmetaParametrValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUmetaParametrValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUmetaParametrValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UmetaParametrValueContext umetaParametrValue() {
		UmetaParametrValueContext _localctx = new UmetaParametrValueContext(Context, State);
		EnterRule(_localctx, 296, RULE_umetaParametrValue);
		try {
			State = 1991;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1989; Match(Identifier);
				}
				break;
			case False:
			case Nullptr:
			case True:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1990; literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public CtorinitializerContext ctorinitializer() {
			return GetRuleContext<CtorinitializerContext>(0);
		}
		public FunctiontryblockContext functiontryblock() {
			return GetRuleContext<FunctiontryblockContext>(0);
		}
		public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 298, RULE_functionbody);
		int _la;
		try {
			State = 2004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1993; ctorinitializer();
					}
				}

				State = 1996; compoundstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1997; functiontryblock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1998; Match(Assign);
				State = 1999; Match(Default);
				State = 2000; Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2001; Match(Assign);
				State = 2002; Match(Delete);
				State = 2003; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public BraceorequalinitializerContext braceorequalinitializer() {
			return GetRuleContext<BraceorequalinitializerContext>(0);
		}
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 300, RULE_initializer);
		try {
			State = 2011;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2006; braceorequalinitializer();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2007; Match(LeftParen);
				State = 2008; expressionlist();
				State = 2009; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceorequalinitializerContext : ParserRuleContext {
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public BraceorequalinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceorequalinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBraceorequalinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBraceorequalinitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceorequalinitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceorequalinitializerContext braceorequalinitializer() {
		BraceorequalinitializerContext _localctx = new BraceorequalinitializerContext(Context, State);
		EnterRule(_localctx, 302, RULE_braceorequalinitializer);
		try {
			State = 2016;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2013; Match(Assign);
				State = 2014; initializerclause();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2015; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerclauseContext : ParserRuleContext {
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public InitializerclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializerclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializerclause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerclause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerclauseContext initializerclause() {
		InitializerclauseContext _localctx = new InitializerclauseContext(Context, State);
		EnterRule(_localctx, 304, RULE_initializerclause);
		try {
			State = 2020;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case True:
			case Typeid:
			case Typename:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2018; assignmentexpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2019; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerlistContext : ParserRuleContext {
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public InitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializerlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializerlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerlistContext initializerlist() {
		return initializerlist(0);
	}

	private InitializerlistContext initializerlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerlistContext _localctx = new InitializerlistContext(Context, _parentState);
		InitializerlistContext _prevctx = _localctx;
		int _startState = 306;
		EnterRecursionRule(_localctx, 306, RULE_initializerlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2023; initializerclause();
			State = 2025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
			case 1:
				{
				State = 2024; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2035;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,236,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerlist);
					State = 2027;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2028; Match(Comma);
					State = 2029; initializerclause();
					State = 2031;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
					case 1:
						{
						State = 2030; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2037;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,236,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracedinitlistContext : ParserRuleContext {
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public BracedinitlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedinitlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBracedinitlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBracedinitlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedinitlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracedinitlistContext bracedinitlist() {
		BracedinitlistContext _localctx = new BracedinitlistContext(Context, State);
		EnterRule(_localctx, 308, RULE_bracedinitlist);
		int _la;
		try {
			State = 2047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2038; Match(LeftBrace);
				State = 2039; initializerlist(0);
				State = 2041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 2040; Match(Comma);
					}
				}

				State = 2043; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2045; Match(LeftBrace);
				State = 2046; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ClassnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassnameContext classname() {
		ClassnameContext _localctx = new ClassnameContext(Context, State);
		EnterRule(_localctx, 310, RULE_classname);
		try {
			State = 2051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2049; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2050; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassspecifierContext : ParserRuleContext {
		public ClassheadContext classhead() {
			return GetRuleContext<ClassheadContext>(0);
		}
		public MemberspecificationContext memberspecification() {
			return GetRuleContext<MemberspecificationContext>(0);
		}
		public ClassspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassspecifierContext classspecifier() {
		ClassspecifierContext _localctx = new ClassspecifierContext(Context, State);
		EnterRule(_localctx, 312, RULE_classspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2053; classhead();
			State = 2054; Match(LeftBrace);
			State = 2056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << Alignas) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (Thread_local - 64)) | (1L << (Typedef - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (AndAnd - 64)) | (1L << (Colon - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
				{
				State = 2055; memberspecification();
				}
			}

			State = 2058; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassheadContext : ParserRuleContext {
		public ClasskeyContext classkey() {
			return GetRuleContext<ClasskeyContext>(0);
		}
		public ClassheadnameContext classheadname() {
			return GetRuleContext<ClassheadnameContext>(0);
		}
		public ClassUEAPIContext classUEAPI() {
			return GetRuleContext<ClassUEAPIContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ClassvirtspecifierContext classvirtspecifier() {
			return GetRuleContext<ClassvirtspecifierContext>(0);
		}
		public BaseclauseContext baseclause() {
			return GetRuleContext<BaseclauseContext>(0);
		}
		public ClassheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classhead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClasshead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClasshead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClasshead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassheadContext classhead() {
		ClassheadContext _localctx = new ClassheadContext(Context, State);
		EnterRule(_localctx, 314, RULE_classhead);
		int _la;
		try {
			State = 2084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2060; classkey();
				State = 2062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UEAPI) {
					{
					State = 2061; classUEAPI();
					}
				}

				State = 2065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2064; attributespecifierseq(0);
					}
				}

				State = 2067; classheadname();
				State = 2069;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Final) {
					{
					State = 2068; classvirtspecifier();
					}
				}

				State = 2072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 2071; baseclause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2074; classkey();
				State = 2076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UEAPI) {
					{
					State = 2075; classUEAPI();
					}
				}

				State = 2079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2078; attributespecifierseq(0);
					}
				}

				State = 2082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 2081; baseclause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassheadnameContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ClassheadnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classheadname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassheadname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassheadname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassheadname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassheadnameContext classheadname() {
		ClassheadnameContext _localctx = new ClassheadnameContext(Context, State);
		EnterRule(_localctx, 316, RULE_classheadname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2087;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				{
				State = 2086; nestednamespecifier(0);
				}
				break;
			}
			State = 2089; classname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassUEAPIContext : ParserRuleContext {
		public ITerminalNode UEAPI() { return GetToken(CPP14Parser.UEAPI, 0); }
		public ClassUEAPIContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classUEAPI; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassUEAPI(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassUEAPI(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassUEAPI(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassUEAPIContext classUEAPI() {
		ClassUEAPIContext _localctx = new ClassUEAPIContext(Context, State);
		EnterRule(_localctx, 318, RULE_classUEAPI);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2091; Match(UEAPI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvirtspecifierContext : ParserRuleContext {
		public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public ClassvirtspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvirtspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassvirtspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassvirtspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassvirtspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassvirtspecifierContext classvirtspecifier() {
		ClassvirtspecifierContext _localctx = new ClassvirtspecifierContext(Context, State);
		EnterRule(_localctx, 320, RULE_classvirtspecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093; Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClasskeyContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public ITerminalNode Union() { return GetToken(CPP14Parser.Union, 0); }
		public ClasskeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classkey; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClasskey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClasskey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClasskey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClasskeyContext classkey() {
		ClasskeyContext _localctx = new ClasskeyContext(Context, State);
		EnterRule(_localctx, 322, RULE_classkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2095;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (Class - 21)) | (1L << (Struct - 21)) | (1L << (Union - 21)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberspecificationContext : ParserRuleContext {
		public MemberdeclarationContext memberdeclaration() {
			return GetRuleContext<MemberdeclarationContext>(0);
		}
		public MemberspecificationContext memberspecification() {
			return GetRuleContext<MemberspecificationContext>(0);
		}
		public AccessspecifierContext accessspecifier() {
			return GetRuleContext<AccessspecifierContext>(0);
		}
		public MemberspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberspecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberspecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberspecificationContext memberspecification() {
		MemberspecificationContext _localctx = new MemberspecificationContext(Context, State);
		EnterRule(_localctx, 324, RULE_memberspecification);
		int _la;
		try {
			State = 2106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__4:
			case T__5:
			case T__6:
			case Alignas:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Static_assert:
			case Struct:
			case Template:
			case Thread_local:
			case Typedef:
			case Typename:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Colon:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2097; memberdeclaration();
				State = 2099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << Alignas) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (Thread_local - 64)) | (1L << (Typedef - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (AndAnd - 64)) | (1L << (Colon - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
					{
					State = 2098; memberspecification();
					}
				}

				}
				break;
			case Private:
			case Protected:
			case Public:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2101; accessspecifier();
				State = 2102; Match(Colon);
				State = 2104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << Alignas) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (Thread_local - 64)) | (1L << (Typedef - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (AndAnd - 64)) | (1L << (Colon - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
					{
					State = 2103; memberspecification();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclarationContext : ParserRuleContext {
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public MemberdeclaratorlistContext memberdeclaratorlist() {
			return GetRuleContext<MemberdeclaratorlistContext>(0);
		}
		public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		public UsingdeclarationContext usingdeclaration() {
			return GetRuleContext<UsingdeclarationContext>(0);
		}
		public Static_assertdeclarationContext static_assertdeclaration() {
			return GetRuleContext<Static_assertdeclarationContext>(0);
		}
		public TemplatedeclarationContext templatedeclaration() {
			return GetRuleContext<TemplatedeclarationContext>(0);
		}
		public AliasdeclarationContext aliasdeclaration() {
			return GetRuleContext<AliasdeclarationContext>(0);
		}
		public EmptydeclarationContext emptydeclaration() {
			return GetRuleContext<EmptydeclarationContext>(0);
		}
		public UdefineContext udefine() {
			return GetRuleContext<UdefineContext>(0);
		}
		public MemberdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclarationContext memberdeclaration() {
		MemberdeclarationContext _localctx = new MemberdeclarationContext(Context, State);
		EnterRule(_localctx, 326, RULE_memberdeclaration);
		int _la;
		try {
			State = 2125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2109;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
				case 1:
					{
					State = 2108; attributespecifierseq(0);
					}
					break;
				}
				State = 2112;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
				case 1:
					{
					State = 2111; declspecifierseq();
					}
					break;
				}
				State = 2115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Decltype) | (1L << Operator))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (Tilde - 85)) | (1L << (AndAnd - 85)) | (1L << (Colon - 85)) | (1L << (Doublecolon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 2114; memberdeclaratorlist(0);
					}
				}

				State = 2117; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2118; functiondefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2119; usingdeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2120; static_assertdeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2121; templatedeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2122; aliasdeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2123; emptydeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2124; udefine();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclaratorlistContext : ParserRuleContext {
		public MemberdeclaratorContext memberdeclarator() {
			return GetRuleContext<MemberdeclaratorContext>(0);
		}
		public MemberdeclaratorlistContext memberdeclaratorlist() {
			return GetRuleContext<MemberdeclaratorlistContext>(0);
		}
		public MemberdeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclaratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclaratorlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberdeclaratorlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclaratorlistContext memberdeclaratorlist() {
		return memberdeclaratorlist(0);
	}

	private MemberdeclaratorlistContext memberdeclaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MemberdeclaratorlistContext _localctx = new MemberdeclaratorlistContext(Context, _parentState);
		MemberdeclaratorlistContext _prevctx = _localctx;
		int _startState = 328;
		EnterRecursionRule(_localctx, 328, RULE_memberdeclaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2128; memberdeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,257,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MemberdeclaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_memberdeclaratorlist);
					State = 2130;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2131; Match(Comma);
					State = 2132; memberdeclarator();
					}
					} 
				}
				State = 2137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,257,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberdeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public PurespecifierContext purespecifier() {
			return GetRuleContext<PurespecifierContext>(0);
		}
		public BraceorequalinitializerContext braceorequalinitializer() {
			return GetRuleContext<BraceorequalinitializerContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public MemberdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberdeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclaratorContext memberdeclarator() {
		MemberdeclaratorContext _localctx = new MemberdeclaratorContext(Context, State);
		EnterRule(_localctx, 330, RULE_memberdeclarator);
		int _la;
		try {
			State = 2157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2138; declarator();
				State = 2140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
				case 1:
					{
					State = 2139; virtspecifierseq(0);
					}
					break;
				}
				State = 2143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
				case 1:
					{
					State = 2142; purespecifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2145; declarator();
				State = 2147;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
				case 1:
					{
					State = 2146; braceorequalinitializer();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2149; Match(Identifier);
					}
				}

				State = 2153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2152; attributespecifierseq(0);
					}
				}

				State = 2155; Match(Colon);
				State = 2156; constantexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtspecifierseqContext : ParserRuleContext {
		public VirtspecifierContext virtspecifier() {
			return GetRuleContext<VirtspecifierContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public VirtspecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtspecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterVirtspecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitVirtspecifierseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtspecifierseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtspecifierseqContext virtspecifierseq() {
		return virtspecifierseq(0);
	}

	private VirtspecifierseqContext virtspecifierseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		VirtspecifierseqContext _localctx = new VirtspecifierseqContext(Context, _parentState);
		VirtspecifierseqContext _prevctx = _localctx;
		int _startState = 332;
		EnterRecursionRule(_localctx, 332, RULE_virtspecifierseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2160; virtspecifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,264,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VirtspecifierseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_virtspecifierseq);
					State = 2162;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2163; virtspecifier();
					}
					} 
				}
				State = 2168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,264,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VirtspecifierContext : ParserRuleContext {
		public ITerminalNode Override() { return GetToken(CPP14Parser.Override, 0); }
		public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public VirtspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterVirtspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitVirtspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtspecifierContext virtspecifier() {
		VirtspecifierContext _localctx = new VirtspecifierContext(Context, State);
		EnterRule(_localctx, 334, RULE_virtspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2169;
			_la = TokenStream.LA(1);
			if ( !(_la==Final || _la==Override) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurespecifierContext : ParserRuleContext {
		public IToken val;
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode Octalliteral() { return GetToken(CPP14Parser.Octalliteral, 0); }
		public PurespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPurespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPurespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurespecifierContext purespecifier() {
		PurespecifierContext _localctx = new PurespecifierContext(Context, State);
		EnterRule(_localctx, 336, RULE_purespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2171; Match(Assign);
			State = 2172; _localctx.val = Match(Octalliteral);
			if((_localctx.val!=null?_localctx.val.Text:null).compareTo("0")!=0) throw new InputMismatchException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseclauseContext : ParserRuleContext {
		public BasespecifierlistContext basespecifierlist() {
			return GetRuleContext<BasespecifierlistContext>(0);
		}
		public BaseclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBaseclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBaseclause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseclause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseclauseContext baseclause() {
		BaseclauseContext _localctx = new BaseclauseContext(Context, State);
		EnterRule(_localctx, 338, RULE_baseclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2175; Match(Colon);
			State = 2176; basespecifierlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasespecifierlistContext : ParserRuleContext {
		public BasespecifierContext basespecifier() {
			return GetRuleContext<BasespecifierContext>(0);
		}
		public BasespecifierlistContext basespecifierlist() {
			return GetRuleContext<BasespecifierlistContext>(0);
		}
		public BasespecifierlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basespecifierlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasespecifierlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasespecifierlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasespecifierlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasespecifierlistContext basespecifierlist() {
		return basespecifierlist(0);
	}

	private BasespecifierlistContext basespecifierlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BasespecifierlistContext _localctx = new BasespecifierlistContext(Context, _parentState);
		BasespecifierlistContext _prevctx = _localctx;
		int _startState = 340;
		EnterRecursionRule(_localctx, 340, RULE_basespecifierlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2179; basespecifier();
			State = 2181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				{
				State = 2180; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,267,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BasespecifierlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_basespecifierlist);
					State = 2183;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2184; Match(Comma);
					State = 2185; basespecifier();
					State = 2187;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
					case 1:
						{
						State = 2186; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,267,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasespecifierContext : ParserRuleContext {
		public BasetypespecifierContext basetypespecifier() {
			return GetRuleContext<BasetypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		public AccessspecifierContext accessspecifier() {
			return GetRuleContext<AccessspecifierContext>(0);
		}
		public BasespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasespecifierContext basespecifier() {
		BasespecifierContext _localctx = new BasespecifierContext(Context, State);
		EnterRule(_localctx, 342, RULE_basespecifier);
		int _la;
		try {
			State = 2215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2194; attributespecifierseq(0);
					}
				}

				State = 2197; basetypespecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2198; attributespecifierseq(0);
					}
				}

				State = 2201; Match(Virtual);
				State = 2203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 2202; accessspecifier();
					}
				}

				State = 2205; basetypespecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2206; attributespecifierseq(0);
					}
				}

				State = 2209; accessspecifier();
				State = 2211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 2210; Match(Virtual);
					}
				}

				State = 2213; basetypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassordecltypeContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public ClassordecltypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classordecltype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassordecltype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassordecltype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassordecltype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassordecltypeContext classordecltype() {
		ClassordecltypeContext _localctx = new ClassordecltypeContext(Context, State);
		EnterRule(_localctx, 344, RULE_classordecltype);
		try {
			State = 2222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2218;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
				case 1:
					{
					State = 2217; nestednamespecifier(0);
					}
					break;
				}
				State = 2220; classname();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2221; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasetypespecifierContext : ParserRuleContext {
		public ClassordecltypeContext classordecltype() {
			return GetRuleContext<ClassordecltypeContext>(0);
		}
		public BasetypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basetypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasetypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasetypespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasetypespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasetypespecifierContext basetypespecifier() {
		BasetypespecifierContext _localctx = new BasetypespecifierContext(Context, State);
		EnterRule(_localctx, 346, RULE_basetypespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2224; classordecltype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessspecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(CPP14Parser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(CPP14Parser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(CPP14Parser.Public, 0); }
		public AccessspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAccessspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAccessspecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessspecifierContext accessspecifier() {
		AccessspecifierContext _localctx = new AccessspecifierContext(Context, State);
		EnterRule(_localctx, 348, RULE_accessspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2226;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionfunctionidContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public ConversiontypeidContext conversiontypeid() {
			return GetRuleContext<ConversiontypeidContext>(0);
		}
		public ConversionfunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionfunctionid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversionfunctionid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversionfunctionid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionfunctionid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionfunctionidContext conversionfunctionid() {
		ConversionfunctionidContext _localctx = new ConversionfunctionidContext(Context, State);
		EnterRule(_localctx, 350, RULE_conversionfunctionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228; Match(Operator);
			State = 2229; conversiontypeid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversiontypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public ConversiondeclaratorContext conversiondeclarator() {
			return GetRuleContext<ConversiondeclaratorContext>(0);
		}
		public ConversiontypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversiontypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversiontypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversiontypeid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversiontypeid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversiontypeidContext conversiontypeid() {
		ConversiontypeidContext _localctx = new ConversiontypeidContext(Context, State);
		EnterRule(_localctx, 352, RULE_conversiontypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231; typespecifierseq();
			State = 2233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2232; conversiondeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversiondeclaratorContext : ParserRuleContext {
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public ConversiondeclaratorContext conversiondeclarator() {
			return GetRuleContext<ConversiondeclaratorContext>(0);
		}
		public ConversiondeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversiondeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversiondeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversiondeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversiondeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversiondeclaratorContext conversiondeclarator() {
		ConversiondeclaratorContext _localctx = new ConversiondeclaratorContext(Context, State);
		EnterRule(_localctx, 354, RULE_conversiondeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2235; ptroperator();
			State = 2237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 2236; conversiondeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorinitializerContext : ParserRuleContext {
		public MeminitializerlistContext meminitializerlist() {
			return GetRuleContext<MeminitializerlistContext>(0);
		}
		public CtorinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctorinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCtorinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCtorinitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtorinitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtorinitializerContext ctorinitializer() {
		CtorinitializerContext _localctx = new CtorinitializerContext(Context, State);
		EnterRule(_localctx, 356, RULE_ctorinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2239; Match(Colon);
			State = 2240; meminitializerlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializerlistContext : ParserRuleContext {
		public MeminitializerContext meminitializer() {
			return GetRuleContext<MeminitializerContext>(0);
		}
		public MeminitializerlistContext meminitializerlist() {
			return GetRuleContext<MeminitializerlistContext>(0);
		}
		public MeminitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializerlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializerlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeminitializerlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializerlistContext meminitializerlist() {
		MeminitializerlistContext _localctx = new MeminitializerlistContext(Context, State);
		EnterRule(_localctx, 358, RULE_meminitializerlist);
		int _la;
		try {
			State = 2253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2242; meminitializer();
				State = 2244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2243; Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2246; meminitializer();
				State = 2248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2247; Match(Ellipsis);
					}
				}

				State = 2250; Match(Comma);
				State = 2251; meminitializerlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializerContext : ParserRuleContext {
		public MeminitializeridContext meminitializerid() {
			return GetRuleContext<MeminitializeridContext>(0);
		}
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public MeminitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeminitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializerContext meminitializer() {
		MeminitializerContext _localctx = new MeminitializerContext(Context, State);
		EnterRule(_localctx, 360, RULE_meminitializer);
		int _la;
		try {
			State = 2265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2255; meminitializerid();
				State = 2256; Match(LeftParen);
				State = 2258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 2257; expressionlist();
					}
				}

				State = 2260; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2262; meminitializerid();
				State = 2263; bracedinitlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializeridContext : ParserRuleContext {
		public ClassordecltypeContext classordecltype() {
			return GetRuleContext<ClassordecltypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public MeminitializeridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializerid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializerid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeminitializerid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializeridContext meminitializerid() {
		MeminitializeridContext _localctx = new MeminitializeridContext(Context, State);
		EnterRule(_localctx, 362, RULE_meminitializerid);
		try {
			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2267; classordecltype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2268; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorfunctionidContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public TheoperatorContext theoperator() {
			return GetRuleContext<TheoperatorContext>(0);
		}
		public OperatorfunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorfunctionid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOperatorfunctionid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOperatorfunctionid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorfunctionid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorfunctionidContext operatorfunctionid() {
		OperatorfunctionidContext _localctx = new OperatorfunctionidContext(Context, State);
		EnterRule(_localctx, 364, RULE_operatorfunctionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271; Match(Operator);
			State = 2272; theoperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteraloperatoridContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Userdefinedstringliteral() { return GetToken(CPP14Parser.Userdefinedstringliteral, 0); }
		public LiteraloperatoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literaloperatorid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLiteraloperatorid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLiteraloperatorid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteraloperatorid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteraloperatoridContext literaloperatorid() {
		LiteraloperatoridContext _localctx = new LiteraloperatoridContext(Context, State);
		EnterRule(_localctx, 366, RULE_literaloperatorid);
		try {
			State = 2279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2274; Match(Operator);
				State = 2275; Match(Stringliteral);
				State = 2276; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2277; Match(Operator);
				State = 2278; Match(Userdefinedstringliteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatedeclarationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TemplatedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplatedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplatedeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplatedeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplatedeclarationContext templatedeclaration() {
		TemplatedeclarationContext _localctx = new TemplatedeclarationContext(Context, State);
		EnterRule(_localctx, 368, RULE_templatedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2281; Match(Template);
			State = 2282; Match(Less);
			State = 2283; templateparameterlist(0);
			State = 2284; Match(Greater);
			State = 2285; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateparameterlistContext : ParserRuleContext {
		public TemplateparameterContext templateparameter() {
			return GetRuleContext<TemplateparameterContext>(0);
		}
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public TemplateparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameterlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateparameterlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateparameterlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateparameterlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateparameterlistContext templateparameterlist() {
		return templateparameterlist(0);
	}

	private TemplateparameterlistContext templateparameterlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateparameterlistContext _localctx = new TemplateparameterlistContext(Context, _parentState);
		TemplateparameterlistContext _prevctx = _localctx;
		int _startState = 370;
		EnterRecursionRule(_localctx, 370, RULE_templateparameterlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2288; templateparameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2295;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateparameterlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateparameterlist);
					State = 2290;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2291; Match(Comma);
					State = 2292; templateparameter();
					}
					} 
				}
				State = 2297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateparameterContext : ParserRuleContext {
		public TypeparameterContext typeparameter() {
			return GetRuleContext<TypeparameterContext>(0);
		}
		public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		public TemplateparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateparameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateparameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateparameterContext templateparameter() {
		TemplateparameterContext _localctx = new TemplateparameterContext(Context, State);
		EnterRule(_localctx, 372, RULE_templateparameter);
		try {
			State = 2300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2298; typeparameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2299; parameterdeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeparameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(Context, State);
		EnterRule(_localctx, 374, RULE_typeparameter);
		int _la;
		try {
			State = 2350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2302; Match(Class);
				State = 2304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
				case 1:
					{
					State = 2303; Match(Ellipsis);
					}
					break;
				}
				State = 2307;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
				case 1:
					{
					State = 2306; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2309; Match(Class);
				State = 2311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2310; Match(Identifier);
					}
				}

				State = 2313; Match(Assign);
				State = 2314; thetypeid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2315; Match(Typename);
				State = 2317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
				case 1:
					{
					State = 2316; Match(Ellipsis);
					}
					break;
				}
				State = 2320;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
				case 1:
					{
					State = 2319; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2322; Match(Typename);
				State = 2324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2323; Match(Identifier);
					}
				}

				State = 2326; Match(Assign);
				State = 2327; thetypeid();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2328; Match(Template);
				State = 2329; Match(Less);
				State = 2330; templateparameterlist(0);
				State = 2331; Match(Greater);
				State = 2332; Match(Class);
				State = 2334;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
				case 1:
					{
					State = 2333; Match(Ellipsis);
					}
					break;
				}
				State = 2337;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
				case 1:
					{
					State = 2336; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2339; Match(Template);
				State = 2340; Match(Less);
				State = 2341; templateparameterlist(0);
				State = 2342; Match(Greater);
				State = 2343; Match(Class);
				State = 2345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2344; Match(Identifier);
					}
				}

				State = 2347; Match(Assign);
				State = 2348; idexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletemplateidContext : ParserRuleContext {
		public TemplatenameContext templatename() {
			return GetRuleContext<TemplatenameContext>(0);
		}
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public SimpletemplateidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletemplateid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpletemplateid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpletemplateid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpletemplateid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpletemplateidContext simpletemplateid() {
		SimpletemplateidContext _localctx = new SimpletemplateidContext(Context, State);
		EnterRule(_localctx, 376, RULE_simpletemplateid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2352; templatename();
			State = 2353; Match(Less);
			State = 2355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
				{
				State = 2354; templateargumentlist(0);
				}
			}

			State = 2357; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateidContext : ParserRuleContext {
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public OperatorfunctionidContext operatorfunctionid() {
			return GetRuleContext<OperatorfunctionidContext>(0);
		}
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public LiteraloperatoridContext literaloperatorid() {
			return GetRuleContext<LiteraloperatoridContext>(0);
		}
		public TemplateidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateidContext templateid() {
		TemplateidContext _localctx = new TemplateidContext(Context, State);
		EnterRule(_localctx, 378, RULE_templateid);
		int _la;
		try {
			State = 2374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2359; simpletemplateid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2360; operatorfunctionid();
				State = 2361; Match(Less);
				State = 2363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 2362; templateargumentlist(0);
					}
				}

				State = 2365; Match(Greater);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2367; literaloperatorid();
				State = 2368; Match(Less);
				State = 2370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (Typeid - 65)) | (1L << (Typename - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (Identifier - 133)) | (1L << (Integerliteral - 133)) | (1L << (Characterliteral - 133)) | (1L << (Floatingliteral - 133)) | (1L << (Stringliteral - 133)) | (1L << (Userdefinedintegerliteral - 133)) | (1L << (Userdefinedfloatingliteral - 133)) | (1L << (Userdefinedstringliteral - 133)) | (1L << (Userdefinedcharacterliteral - 133)))) != 0)) {
					{
					State = 2369; templateargumentlist(0);
					}
				}

				State = 2372; Match(Greater);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatenameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TemplatenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplatename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplatename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplatename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplatenameContext templatename() {
		TemplatenameContext _localctx = new TemplatenameContext(Context, State);
		EnterRule(_localctx, 380, RULE_templatename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2376; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateargumentlistContext : ParserRuleContext {
		public TemplateargumentContext templateargument() {
			return GetRuleContext<TemplateargumentContext>(0);
		}
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public TemplateargumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateargumentlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateargumentlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateargumentlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateargumentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateargumentlistContext templateargumentlist() {
		return templateargumentlist(0);
	}

	private TemplateargumentlistContext templateargumentlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateargumentlistContext _localctx = new TemplateargumentlistContext(Context, _parentState);
		TemplateargumentlistContext _prevctx = _localctx;
		int _startState = 382;
		EnterRecursionRule(_localctx, 382, RULE_templateargumentlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2379; templateargument();
			State = 2381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 2380; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2391;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,303,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateargumentlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateargumentlist);
					State = 2383;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2384; Match(Comma);
					State = 2385; templateargument();
					State = 2387;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
					case 1:
						{
						State = 2386; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,303,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateargumentContext : ParserRuleContext {
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public TemplateargumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateargument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateargument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateargument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateargument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateargumentContext templateargument() {
		TemplateargumentContext _localctx = new TemplateargumentContext(Context, State);
		EnterRule(_localctx, 384, RULE_templateargument);
		try {
			State = 2397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2394; thetypeid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2395; constantexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2396; idexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenamespecifierContext : ParserRuleContext {
		public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TypenamespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typenamespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypenamespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypenamespecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypenamespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenamespecifierContext typenamespecifier() {
		TypenamespecifierContext _localctx = new TypenamespecifierContext(Context, State);
		EnterRule(_localctx, 386, RULE_typenamespecifier);
		int _la;
		try {
			State = 2410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2399; Match(Typename);
				State = 2400; nestednamespecifier(0);
				State = 2401; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2403; Match(Typename);
				State = 2404; nestednamespecifier(0);
				State = 2406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 2405; Match(Template);
					}
				}

				State = 2408; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitinstantiationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ExplicitinstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitinstantiation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExplicitinstantiation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExplicitinstantiation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitinstantiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitinstantiationContext explicitinstantiation() {
		ExplicitinstantiationContext _localctx = new ExplicitinstantiationContext(Context, State);
		EnterRule(_localctx, 388, RULE_explicitinstantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extern) {
				{
				State = 2412; Match(Extern);
				}
			}

			State = 2415; Match(Template);
			State = 2416; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitspecializationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExplicitspecializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitspecialization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExplicitspecialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExplicitspecialization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitspecialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitspecializationContext explicitspecialization() {
		ExplicitspecializationContext _localctx = new ExplicitspecializationContext(Context, State);
		EnterRule(_localctx, 390, RULE_explicitspecialization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2418; Match(Template);
			State = 2419; Match(Less);
			State = 2420; Match(Greater);
			State = 2421; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryblockContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public TryblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTryblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTryblock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryblockContext tryblock() {
		TryblockContext _localctx = new TryblockContext(Context, State);
		EnterRule(_localctx, 392, RULE_tryblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2423; Match(Try);
			State = 2424; compoundstatement();
			State = 2425; handlerseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiontryblockContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public CtorinitializerContext ctorinitializer() {
			return GetRuleContext<CtorinitializerContext>(0);
		}
		public FunctiontryblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiontryblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctiontryblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctiontryblock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiontryblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiontryblockContext functiontryblock() {
		FunctiontryblockContext _localctx = new FunctiontryblockContext(Context, State);
		EnterRule(_localctx, 394, RULE_functiontryblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427; Match(Try);
			State = 2429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 2428; ctorinitializer();
				}
			}

			State = 2431; compoundstatement();
			State = 2432; handlerseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerseqContext : ParserRuleContext {
		public HandlerContext handler() {
			return GetRuleContext<HandlerContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public HandlerseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterHandlerseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitHandlerseq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerseqContext handlerseq() {
		HandlerseqContext _localctx = new HandlerseqContext(Context, State);
		EnterRule(_localctx, 396, RULE_handlerseq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2434; handler();
			State = 2436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				{
				State = 2435; handlerseq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(CPP14Parser.Catch, 0); }
		public ExceptiondeclarationContext exceptiondeclaration() {
			return GetRuleContext<ExceptiondeclarationContext>(0);
		}
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerContext handler() {
		HandlerContext _localctx = new HandlerContext(Context, State);
		EnterRule(_localctx, 398, RULE_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2438; Match(Catch);
			State = 2439; Match(LeftParen);
			State = 2440; exceptiondeclaration();
			State = 2441; Match(RightParen);
			State = 2442; compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptiondeclarationContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ExceptiondeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptiondeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExceptiondeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExceptiondeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptiondeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptiondeclarationContext exceptiondeclaration() {
		ExceptiondeclarationContext _localctx = new ExceptiondeclarationContext(Context, State);
		EnterRule(_localctx, 400, RULE_exceptiondeclaration);
		int _la;
		try {
			State = 2458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2444; attributespecifierseq(0);
					}
				}

				State = 2447; typespecifierseq();
				State = 2448; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2450; attributespecifierseq(0);
					}
				}

				State = 2453; typespecifierseq();
				State = 2455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (AndAnd - 85)) | (1L << (Doublecolon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 2454; abstractdeclarator();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2457; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowexpressionContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ThrowexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterThrowexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitThrowexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowexpressionContext throwexpression() {
		ThrowexpressionContext _localctx = new ThrowexpressionContext(Context, State);
		EnterRule(_localctx, 402, RULE_throwexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2460; Match(Throw);
			State = 2462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
			case 1:
				{
				State = 2461; assignmentexpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionspecificationContext : ParserRuleContext {
		public DynamicexceptionspecificationContext dynamicexceptionspecification() {
			return GetRuleContext<DynamicexceptionspecificationContext>(0);
		}
		public NoexceptspecificationContext noexceptspecification() {
			return GetRuleContext<NoexceptspecificationContext>(0);
		}
		public ExceptionspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExceptionspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExceptionspecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionspecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionspecificationContext exceptionspecification() {
		ExceptionspecificationContext _localctx = new ExceptionspecificationContext(Context, State);
		EnterRule(_localctx, 404, RULE_exceptionspecification);
		try {
			State = 2466;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Throw:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2464; dynamicexceptionspecification();
				}
				break;
			case Noexcept:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2465; noexceptspecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicexceptionspecificationContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		public TypeidlistContext typeidlist() {
			return GetRuleContext<TypeidlistContext>(0);
		}
		public DynamicexceptionspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicexceptionspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDynamicexceptionspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDynamicexceptionspecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicexceptionspecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicexceptionspecificationContext dynamicexceptionspecification() {
		DynamicexceptionspecificationContext _localctx = new DynamicexceptionspecificationContext(Context, State);
		EnterRule(_localctx, 406, RULE_dynamicexceptionspecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2468; Match(Throw);
			State = 2469; Match(LeftParen);
			State = 2471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (Auto - 13)) | (1L << (Bool - 13)) | (1L << (Char - 13)) | (1L << (Char16 - 13)) | (1L << (Char32 - 13)) | (1L << (Class - 13)) | (1L << (Const - 13)) | (1L << (Decltype - 13)) | (1L << (Double - 13)) | (1L << (Enum - 13)) | (1L << (Float - 13)) | (1L << (Int - 13)) | (1L << (Long - 13)) | (1L << (Short - 13)) | (1L << (Signed - 13)) | (1L << (Struct - 13)) | (1L << (Typename - 13)))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Union - 77)) | (1L << (Unsigned - 77)) | (1L << (Void - 77)) | (1L << (Volatile - 77)) | (1L << (Wchar - 77)) | (1L << (Doublecolon - 77)) | (1L << (Identifier - 77)))) != 0)) {
				{
				State = 2470; typeidlist(0);
				}
			}

			State = 2473; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidlistContext : ParserRuleContext {
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public TypeidlistContext typeidlist() {
			return GetRuleContext<TypeidlistContext>(0);
		}
		public TypeidlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeidlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeidlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeidlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeidlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeidlistContext typeidlist() {
		return typeidlist(0);
	}

	private TypeidlistContext typeidlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeidlistContext _localctx = new TypeidlistContext(Context, _parentState);
		TypeidlistContext _prevctx = _localctx;
		int _startState = 408;
		EnterRecursionRule(_localctx, 408, RULE_typeidlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2476; thetypeid();
			State = 2478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				{
				State = 2477; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2488;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeidlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeidlist);
					State = 2480;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2481; Match(Comma);
					State = 2482; thetypeid();
					State = 2484;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
					case 1:
						{
						State = 2483; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2490;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NoexceptspecificationContext : ParserRuleContext {
		public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoexceptspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noexceptspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoexceptspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoexceptspecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoexceptspecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoexceptspecificationContext noexceptspecification() {
		NoexceptspecificationContext _localctx = new NoexceptspecificationContext(Context, State);
		EnterRule(_localctx, 410, RULE_noexceptspecification);
		try {
			State = 2497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,320,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2491; Match(Noexcept);
				State = 2492; Match(LeftParen);
				State = 2493; constantexpression();
				State = 2494; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2496; Match(Noexcept);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 412, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499; Match(Greater);
			State = 2500; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftAssignContext : ParserRuleContext {
		public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public RightShiftAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRightShiftAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRightShiftAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShiftAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftAssignContext rightShiftAssign() {
		RightShiftAssignContext _localctx = new RightShiftAssignContext(Context, State);
		EnterRule(_localctx, 414, RULE_rightShiftAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2502; Match(Greater);
			State = 2503; Match(Greater);
			State = 2504; Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheoperatorContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public RightShiftAssignContext rightShiftAssign() {
			return GetRuleContext<RightShiftAssignContext>(0);
		}
		public TheoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTheoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTheoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TheoperatorContext theoperator() {
		TheoperatorContext _localctx = new TheoperatorContext(Context, State);
		EnterRule(_localctx, 416, RULE_theoperator);
		try {
			State = 2554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2506; Match(New);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2507; Match(Delete);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2508; Match(New);
				State = 2509; Match(LeftBracket);
				State = 2510; Match(RightBracket);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2511; Match(Delete);
				State = 2512; Match(LeftBracket);
				State = 2513; Match(RightBracket);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2514; Match(Plus);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2515; Match(Minus);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2516; Match(Star);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2517; Match(Div);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2518; Match(Mod);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2519; Match(Caret);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2520; Match(And);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2521; Match(Or);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2522; Match(Tilde);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2523; Match(Not);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2524; Match(Assign);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2525; Match(Less);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2526; Match(Greater);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2527; Match(PlusAssign);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2528; Match(MinusAssign);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2529; Match(StarAssign);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2530; Match(DivAssign);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2531; Match(ModAssign);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2532; Match(XorAssign);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2533; Match(AndAssign);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2534; Match(OrAssign);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2535; Match(LeftShift);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2536; rightShift();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2537; rightShiftAssign();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2538; Match(LeftShiftAssign);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2539; Match(Equal);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2540; Match(NotEqual);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2541; Match(LessEqual);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2542; Match(GreaterEqual);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2543; Match(AndAnd);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2544; Match(OrOr);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2545; Match(PlusPlus);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2546; Match(MinusMinus);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2547; Match(Comma);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2548; Match(ArrowStar);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2549; Match(Arrow);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2550; Match(LeftParen);
				State = 2551; Match(RightParen);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2552; Match(LeftBracket);
				State = 2553; Match(RightBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode Integerliteral() { return GetToken(CPP14Parser.Integerliteral, 0); }
		public ITerminalNode Characterliteral() { return GetToken(CPP14Parser.Characterliteral, 0); }
		public ITerminalNode Floatingliteral() { return GetToken(CPP14Parser.Floatingliteral, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public BooleanliteralContext booleanliteral() {
			return GetRuleContext<BooleanliteralContext>(0);
		}
		public PointerliteralContext pointerliteral() {
			return GetRuleContext<PointerliteralContext>(0);
		}
		public UserdefinedliteralContext userdefinedliteral() {
			return GetRuleContext<UserdefinedliteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 418, RULE_literal);
		try {
			State = 2563;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integerliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2556; Match(Integerliteral);
				}
				break;
			case Characterliteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2557; Match(Characterliteral);
				}
				break;
			case Floatingliteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2558; Match(Floatingliteral);
				}
				break;
			case Stringliteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2559; Match(Stringliteral);
				}
				break;
			case False:
			case True:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2560; booleanliteral();
				}
				break;
			case Nullptr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2561; pointerliteral();
				}
				break;
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2562; userdefinedliteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanliteralContext : ParserRuleContext {
		public ITerminalNode False() { return GetToken(CPP14Parser.False, 0); }
		public ITerminalNode True() { return GetToken(CPP14Parser.True, 0); }
		public BooleanliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBooleanliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBooleanliteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanliteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanliteralContext booleanliteral() {
		BooleanliteralContext _localctx = new BooleanliteralContext(Context, State);
		EnterRule(_localctx, 420, RULE_booleanliteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2565;
			_la = TokenStream.LA(1);
			if ( !(_la==False || _la==True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerliteralContext : ParserRuleContext {
		public ITerminalNode Nullptr() { return GetToken(CPP14Parser.Nullptr, 0); }
		public PointerliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPointerliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPointerliteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerliteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerliteralContext pointerliteral() {
		PointerliteralContext _localctx = new PointerliteralContext(Context, State);
		EnterRule(_localctx, 422, RULE_pointerliteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567; Match(Nullptr);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserdefinedliteralContext : ParserRuleContext {
		public ITerminalNode Userdefinedintegerliteral() { return GetToken(CPP14Parser.Userdefinedintegerliteral, 0); }
		public ITerminalNode Userdefinedfloatingliteral() { return GetToken(CPP14Parser.Userdefinedfloatingliteral, 0); }
		public ITerminalNode Userdefinedstringliteral() { return GetToken(CPP14Parser.Userdefinedstringliteral, 0); }
		public ITerminalNode Userdefinedcharacterliteral() { return GetToken(CPP14Parser.Userdefinedcharacterliteral, 0); }
		public UserdefinedliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userdefinedliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUserdefinedliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUserdefinedliteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14Visitor<TResult> typedVisitor = visitor as ICPP14Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserdefinedliteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserdefinedliteralContext userdefinedliteral() {
		UserdefinedliteralContext _localctx = new UserdefinedliteralContext(Context, State);
		EnterRule(_localctx, 424, RULE_userdefinedliteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2569;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (Userdefinedintegerliteral - 143)) | (1L << (Userdefinedfloatingliteral - 143)) | (1L << (Userdefinedstringliteral - 143)) | (1L << (Userdefinedcharacterliteral - 143)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return nestednamespecifier_sempred((NestednamespecifierContext)_localctx, predIndex);
		case 10: return capturelist_sempred((CapturelistContext)_localctx, predIndex);
		case 15: return postfixexpression_sempred((PostfixexpressionContext)_localctx, predIndex);
		case 24: return noptrnewdeclarator_sempred((NoptrnewdeclaratorContext)_localctx, predIndex);
		case 29: return pmexpression_sempred((PmexpressionContext)_localctx, predIndex);
		case 30: return multiplicativeexpression_sempred((MultiplicativeexpressionContext)_localctx, predIndex);
		case 31: return additiveexpression_sempred((AdditiveexpressionContext)_localctx, predIndex);
		case 32: return shiftexpression_sempred((ShiftexpressionContext)_localctx, predIndex);
		case 33: return relationalexpression_sempred((RelationalexpressionContext)_localctx, predIndex);
		case 34: return equalityexpression_sempred((EqualityexpressionContext)_localctx, predIndex);
		case 35: return andexpression_sempred((AndexpressionContext)_localctx, predIndex);
		case 36: return exclusiveorexpression_sempred((ExclusiveorexpressionContext)_localctx, predIndex);
		case 37: return inclusiveorexpression_sempred((InclusiveorexpressionContext)_localctx, predIndex);
		case 38: return logicalandexpression_sempred((LogicalandexpressionContext)_localctx, predIndex);
		case 39: return logicalorexpression_sempred((LogicalorexpressionContext)_localctx, predIndex);
		case 43: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 49: return statementseq_sempred((StatementseqContext)_localctx, predIndex);
		case 58: return declarationseq_sempred((DeclarationseqContext)_localctx, predIndex);
		case 85: return enumeratorlist_sempred((EnumeratorlistContext)_localctx, predIndex);
		case 103: return attributespecifierseq_sempred((AttributespecifierseqContext)_localctx, predIndex);
		case 106: return attributelist_sempred((AttributelistContext)_localctx, predIndex);
		case 112: return balancedtokenseq_sempred((BalancedtokenseqContext)_localctx, predIndex);
		case 114: return initdeclaratorlist_sempred((InitdeclaratorlistContext)_localctx, predIndex);
		case 118: return noptrdeclarator_sempred((NoptrdeclaratorContext)_localctx, predIndex);
		case 129: return noptrabstractdeclarator_sempred((NoptrabstractdeclaratorContext)_localctx, predIndex);
		case 131: return noptrabstractpackdeclarator_sempred((NoptrabstractpackdeclaratorContext)_localctx, predIndex);
		case 133: return parameterdeclarationlist_sempred((ParameterdeclarationlistContext)_localctx, predIndex);
		case 153: return initializerlist_sempred((InitializerlistContext)_localctx, predIndex);
		case 164: return memberdeclaratorlist_sempred((MemberdeclaratorlistContext)_localctx, predIndex);
		case 166: return virtspecifierseq_sempred((VirtspecifierseqContext)_localctx, predIndex);
		case 170: return basespecifierlist_sempred((BasespecifierlistContext)_localctx, predIndex);
		case 185: return templateparameterlist_sempred((TemplateparameterlistContext)_localctx, predIndex);
		case 191: return templateargumentlist_sempred((TemplateargumentlistContext)_localctx, predIndex);
		case 204: return typeidlist_sempred((TypeidlistContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nestednamespecifier_sempred(NestednamespecifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool capturelist_sempred(CapturelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixexpression_sempred(PostfixexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 7);
		}
		return true;
	}
	private bool noptrnewdeclarator_sempred(NoptrnewdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool pmexpression_sempred(PmexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeexpression_sempred(MultiplicativeexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveexpression_sempred(AdditiveexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftexpression_sempred(ShiftexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 2);
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalexpression_sempred(RelationalexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 4);
		case 23: return Precpred(Context, 3);
		case 24: return Precpred(Context, 2);
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityexpression_sempred(EqualityexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 2);
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andexpression_sempred(AndexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveorexpression_sempred(ExclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveorexpression_sempred(InclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalandexpression_sempred(LogicalandexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalorexpression_sempred(LogicalorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statementseq_sempred(StatementseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarationseq_sempred(DeclarationseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enumeratorlist_sempred(EnumeratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributespecifierseq_sempred(AttributespecifierseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributelist_sempred(AttributelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 3);
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool balancedtokenseq_sempred(BalancedtokenseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initdeclaratorlist_sempred(InitdeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool noptrdeclarator_sempred(NoptrdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 3);
		case 43: return Precpred(Context, 2);
		}
		return true;
	}
	private bool noptrabstractdeclarator_sempred(NoptrabstractdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 5);
		case 45: return Precpred(Context, 3);
		}
		return true;
	}
	private bool noptrabstractpackdeclarator_sempred(NoptrabstractpackdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(Context, 3);
		case 47: return Precpred(Context, 2);
		}
		return true;
	}
	private bool parameterdeclarationlist_sempred(ParameterdeclarationlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerlist_sempred(InitializerlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool memberdeclaratorlist_sempred(MemberdeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool virtspecifierseq_sempred(VirtspecifierseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool basespecifierlist_sempred(BasespecifierlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateparameterlist_sempred(TemplateparameterlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateargumentlist_sempred(TemplateargumentlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeidlist_sempred(TypeidlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x98', '\xA0E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x3', '\x2', '\x5', '\x2', 
		'\x1AE', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1BA', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x1BE', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1C9', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x1CD', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x1DC', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1E3', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x1E8', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x1EB', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x1EF', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x1F5', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x1FF', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x206', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x20C', 
		'\n', '\f', '\a', '\f', '\x20E', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x211', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x215', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x21B', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x222', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x228', '\n', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x22B', '\n', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x22E', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x231', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x238', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x23F', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x273', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x282', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x288', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x28E', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x29B', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x29E', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x5', '\x13', '\x2A3', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x2B2', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x2B8', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x2D6', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x5', '\x16', '\x2DB', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x2DF', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x2E3', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x2E6', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x2EA', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x2F0', 
		'\n', '\x16', '\x5', '\x16', '\x2F2', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x2FA', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x2FE', '\n', '\x19', '\x3', '\x19', '\x5', '\x19', '\x301', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x308', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x30F', '\n', '\x1A', 
		'\a', '\x1A', '\x311', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x314', 
		'\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x318', '\n', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x31C', '\n', '\x1B', 
		'\x3', '\x1C', '\x5', '\x1C', '\x31F', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x324', '\n', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x32A', '\n', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x337', '\n', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x342', '\n', 
		'\x1F', '\f', '\x1F', '\xE', '\x1F', '\x345', '\v', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', 
		'\x353', '\n', ' ', '\f', ' ', '\xE', ' ', '\x356', '\v', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\a', '!', '\x361', '\n', '!', '\f', '!', 
		'\xE', '!', '\x364', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x370', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x373', '\v', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', 
		'#', '\x384', '\n', '#', '\f', '#', '\xE', '#', '\x387', '\v', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\a', '$', '\x392', '\n', '$', '\f', '$', 
		'\xE', '$', '\x395', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\a', '%', '\x39D', '\n', '%', '\f', '%', 
		'\xE', '%', '\x3A0', '\v', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\a', '&', '\x3A8', '\n', '&', '\f', '&', 
		'\xE', '&', '\x3AB', '\v', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x3B3', '\n', '\'', 
		'\f', '\'', '\xE', '\'', '\x3B6', '\v', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x3BE', '\n', 
		'(', '\f', '(', '\xE', '(', '\x3C1', '\v', '(', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x3C9', '\n', 
		')', '\f', ')', '\xE', ')', '\x3CC', '\v', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', 
		'\x3D5', '\n', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x3DD', '\n', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x3EA', '\n', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\a', 
		'-', '\x3F2', '\n', '-', '\f', '-', '\xE', '-', '\x3F5', '\v', '-', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x3FB', '\n', '/', 
		'\x3', '/', '\x3', '/', '\x5', '/', '\x3FF', '\n', '/', '\x3', '/', '\x3', 
		'/', '\x5', '/', '\x403', '\n', '/', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x407', '\n', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x40B', '\n', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x410', '\n', '/', 
		'\x3', '/', '\x5', '/', '\x413', '\n', '/', '\x3', '\x30', '\x5', '\x30', 
		'\x416', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x41C', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x424', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x429', '\n', '\x30', '\x3', '\x31', '\x5', '\x31', '\x42C', 
		'\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x432', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\a', 
		'\x33', '\x43B', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x43E', '\v', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x454', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x5', '\x35', '\x458', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x460', 
		'\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x5', '\x35', '\x466', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x5', '\x36', '\x47A', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x47E', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x48B', 
		'\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x48F', '\n', 
		'\x37', '\x3', '\x38', '\x5', '\x38', '\x492', '\n', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x499', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x5', ':', '\x4A1', '\n', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x5', ':', '\x4AB', '\n', ':', '\x3', ';', '\x3', ';', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\a', '<', '\x4B4', '\n', 
		'<', '\f', '<', '\xE', '<', '\x4B7', '\v', '<', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x5', '=', '\x4C3', '\n', '=', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x5', '>', '\x4CD', '\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x5', '?', '\x4D2', '\n', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '@', '\x5', '@', '\x4D9', '\n', '@', '\x3', '@', '\x5', '@', 
		'\x4DC', '\n', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x4E1', 
		'\n', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x4E6', '\n', 
		'@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x4FB', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', 
		'\x4FF', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x504', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x50F', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x5', 'J', '\x515', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x5', 'K', 
		'\x519', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x51E', 
		'\n', 'K', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x522', '\n', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x527', '\n', 'L', '\x3', 'M', 
		'\x5', 'M', '\x52A', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x540', 
		'\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x546', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x551', 
		'\n', 'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x555', '\n', 'P', '\x3', 
		'P', '\x5', 'P', '\x558', '\n', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', 
		'\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x5', 'P', 
		'\x562', '\n', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x5', 
		'P', '\x568', '\n', 'P', '\x3', 'P', '\x5', 'P', '\x56B', '\n', 'P', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x572', 
		'\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x57C', '\n', 'R', '\x3', 
		'S', '\x3', 'S', '\x5', 'S', '\x580', '\n', 'S', '\x3', 'S', '\x5', 'S', 
		'\x583', '\n', 'S', '\x3', 'S', '\x5', 'S', '\x586', '\n', 'S', '\x3', 
		'S', '\x3', 'S', '\x5', 'S', '\x58A', '\n', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x5', 'S', '\x58F', '\n', 'S', '\x5', 'S', '\x591', '\n', 
		'S', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x595', '\n', 'T', '\x3', 'T', 
		'\x3', 'T', '\x5', 'T', '\x599', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x5A2', 
		'\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\a', 'W', '\x5AD', '\n', 
		'W', '\f', 'W', '\xE', 'W', '\x5B0', '\v', 'W', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x5B7', '\n', 'X', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x5BD', '\n', 'Z', 
		'\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x5C3', 
		'\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\x5C7', '\n', ']', '\x3', 
		'^', '\x5', '^', '\x5CA', '\n', '^', '\x3', '^', '\x3', '^', '\x3', '^', 
		'\x3', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x5', '_', '\x5D3', '\n', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '`', '\x5', '`', '\x5DC', '\n', '`', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x5', '\x61', '\x5E4', 
		'\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', 
		'\x5', '\x64', '\x5EF', '\n', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x65', '\x3', '\x65', '\x5', '\x65', '\x5F5', '\n', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\x600', '\n', 
		'\x65', '\x3', '\x66', '\x5', '\x66', '\x603', '\n', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x608', '\n', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', 
		'\x3', 'h', '\x5', 'h', '\x617', '\n', 'h', '\x3', 'h', '\x3', 'h', '\x3', 
		'h', '\x3', 'h', '\x5', 'h', '\x61D', '\n', 'h', '\x3', 'i', '\x3', 'i', 
		'\x3', 'i', '\x3', 'i', '\x3', 'i', '\a', 'i', '\x624', '\n', 'i', '\f', 
		'i', '\xE', 'i', '\x627', '\v', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x630', '\n', 
		'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x5', 'k', '\x636', 
		'\n', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', 
		'\x3', 'k', '\x5', 'k', '\x63E', '\n', 'k', '\x3', 'k', '\x3', 'k', '\x5', 
		'k', '\x642', '\n', 'k', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x646', 
		'\n', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x64B', '\n', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x650', '\n', 'l', 
		'\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\a', 'l', 
		'\x657', '\n', 'l', '\f', 'l', '\xE', 'l', '\x65A', '\v', 'l', '\x3', 
		'm', '\x3', 'm', '\x5', 'm', '\x65E', '\n', 'm', '\x3', 'n', '\x3', 'n', 
		'\x5', 'n', '\x662', '\n', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 
		'o', '\x3', 'p', '\x3', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 
		'q', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\x670', '\n', 'r', '\x3', 'r', 
		'\x3', 'r', '\a', 'r', '\x674', '\n', 'r', '\f', 'r', '\xE', 'r', '\x677', 
		'\v', 'r', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x5', 's', '\x685', '\n', 's', '\x3', 't', '\x3', 't', '\x3', 
		't', '\x3', 't', '\x3', 't', '\x3', 't', '\a', 't', '\x68D', '\n', 't', 
		'\f', 't', '\xE', 't', '\x690', '\v', 't', '\x3', 'u', '\x3', 'u', '\x5', 
		'u', '\x694', '\n', 'u', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', 
		'\x3', 'v', '\x5', 'v', '\x69B', '\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 
		'w', '\x3', 'w', '\x5', 'w', '\x6A1', '\n', 'w', '\x3', 'x', '\x3', 'x', 
		'\x3', 'x', '\x5', 'x', '\x6A6', '\n', 'x', '\x3', 'x', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x5', 'x', '\x6AC', '\n', 'x', '\x3', 'x', '\x3', 'x', 
		'\x3', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\x6B3', '\n', 'x', '\x3', 
		'x', '\x3', 'x', '\x5', 'x', '\x6B7', '\n', 'x', '\a', 'x', '\x6B9', '\n', 
		'x', '\f', 'x', '\xE', 'x', '\x6BC', '\v', 'x', '\x3', 'y', '\x3', 'y', 
		'\x3', 'y', '\x3', 'y', '\x5', 'y', '\x6C2', '\n', 'y', '\x3', 'y', '\x5', 
		'y', '\x6C5', '\n', 'y', '\x3', 'y', '\x5', 'y', '\x6C8', '\n', 'y', '\x3', 
		'y', '\x5', 'y', '\x6CB', '\n', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', 
		'\x5', 'z', '\x6D0', '\n', 'z', '\x3', '{', '\x3', '{', '\x5', '{', '\x6D4', 
		'\n', '{', '\x3', '{', '\x5', '{', '\x6D7', '\n', '{', '\x3', '{', '\x3', 
		'{', '\x5', '{', '\x6DB', '\n', '{', '\x3', '{', '\x3', '{', '\x5', '{', 
		'\x6DF', '\n', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\x6E4', 
		'\n', '{', '\x3', '{', '\x5', '{', '\x6E7', '\n', '{', '\x5', '{', '\x6E9', 
		'\n', '{', '\x3', '|', '\x3', '|', '\x5', '|', '\x6ED', '\n', '|', '\x3', 
		'}', '\x3', '}', '\x3', '~', '\x3', '~', '\x3', '\x7F', '\x5', '\x7F', 
		'\x6F4', '\n', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x80', '\x3', 
		'\x80', '\x5', '\x80', '\x6FA', '\n', '\x80', '\x3', '\x81', '\x3', '\x81', 
		'\x5', '\x81', '\x6FE', '\n', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x5', '\x81', '\x704', '\n', '\x81', '\x3', '\x82', 
		'\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\x709', '\n', '\x82', '\x5', 
		'\x82', '\x70B', '\n', '\x82', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', 
		'\x3', '\x83', '\x5', '\x83', '\x711', '\n', '\x83', '\x3', '\x83', '\x3', 
		'\x83', '\x5', '\x83', '\x715', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', 
		'\x3', '\x83', '\x3', '\x83', '\x5', '\x83', '\x71B', '\n', '\x83', '\x3', 
		'\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', 
		'\x83', '\x722', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', 
		'\x726', '\n', '\x83', '\a', '\x83', '\x728', '\n', '\x83', '\f', '\x83', 
		'\xE', '\x83', '\x72B', '\v', '\x83', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x5', '\x84', '\x731', '\n', '\x84', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x73B', '\n', '\x85', '\x3', 
		'\x85', '\x3', '\x85', '\x5', '\x85', '\x73F', '\n', '\x85', '\a', '\x85', 
		'\x741', '\n', '\x85', '\f', '\x85', '\xE', '\x85', '\x744', '\v', '\x85', 
		'\x3', '\x86', '\x5', '\x86', '\x747', '\n', '\x86', '\x3', '\x86', '\x5', 
		'\x86', '\x74A', '\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x5', '\x86', '\x750', '\n', '\x86', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\a', 
		'\x87', '\x758', '\n', '\x87', '\f', '\x87', '\xE', '\x87', '\x75B', '\v', 
		'\x87', '\x3', '\x88', '\x5', '\x88', '\x75E', '\n', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\x764', '\n', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x5', '\x88', '\x76C', '\n', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x5', '\x88', '\x770', '\n', '\x88', '\x3', '\x88', '\x5', 
		'\x88', '\x773', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', 
		'\x777', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', 
		'\x88', '\x77C', '\n', '\x88', '\x3', '\x89', '\x5', '\x89', '\x77F', 
		'\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\x782', '\n', '\x89', '\x3', 
		'\x89', '\x3', '\x89', '\x5', '\x89', '\x786', '\n', '\x89', '\x3', '\x89', 
		'\x3', '\x89', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', 
		'\x5', '\x8A', '\x78E', '\n', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', 
		'\x8B', '\x3', '\x8B', '\x5', '\x8B', '\x794', '\n', '\x8B', '\x3', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x92', '\x3', '\x92', '\x5', '\x92', '\x7AE', '\n', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x93', '\x3', '\x93', '\x3', 
		'\x93', '\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\x7B7', '\n', '\x93', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x5', '\x94', '\x7C4', '\n', '\x94', '\x3', '\x95', '\x3', 
		'\x95', '\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\x7CA', '\n', '\x96', 
		'\x3', '\x97', '\x5', '\x97', '\x7CD', '\n', '\x97', '\x3', '\x97', '\x3', 
		'\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', 
		'\x97', '\x3', '\x97', '\x5', '\x97', '\x7D7', '\n', '\x97', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', 
		'\x7DE', '\n', '\x98', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x5', 
		'\x99', '\x7E3', '\n', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', 
		'\x7E7', '\n', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', 
		'\x9B', '\x7EC', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x5', '\x9B', '\x7F2', '\n', '\x9B', '\a', '\x9B', '\x7F4', 
		'\n', '\x9B', '\f', '\x9B', '\xE', '\x9B', '\x7F7', '\v', '\x9B', '\x3', 
		'\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x5', '\x9C', '\x7FC', '\n', '\x9C', 
		'\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x5', '\x9C', 
		'\x802', '\n', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x806', 
		'\n', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', 
		'\x80B', '\n', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3', 
		'\x9F', '\x5', '\x9F', '\x811', '\n', '\x9F', '\x3', '\x9F', '\x5', '\x9F', 
		'\x814', '\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\x818', 
		'\n', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\x81B', '\n', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x5', '\x9F', '\x81F', '\n', '\x9F', '\x3', '\x9F', 
		'\x5', '\x9F', '\x822', '\n', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\x825', 
		'\n', '\x9F', '\x5', '\x9F', '\x827', '\n', '\x9F', '\x3', '\xA0', '\x5', 
		'\xA0', '\x82A', '\n', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA1', 
		'\x3', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA4', '\x3', '\xA4', '\x5', '\xA4', '\x836', '\n', '\xA4', '\x3', 
		'\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x5', '\xA4', '\x83B', '\n', '\xA4', 
		'\x5', '\xA4', '\x83D', '\n', '\xA4', '\x3', '\xA5', '\x5', '\xA5', '\x840', 
		'\n', '\xA5', '\x3', '\xA5', '\x5', '\xA5', '\x843', '\n', '\xA5', '\x3', 
		'\xA5', '\x5', '\xA5', '\x846', '\n', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x3', '\xA5', '\x5', '\xA5', '\x850', '\n', '\xA5', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\a', 
		'\xA6', '\x858', '\n', '\xA6', '\f', '\xA6', '\xE', '\xA6', '\x85B', '\v', 
		'\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x85F', '\n', '\xA7', 
		'\x3', '\xA7', '\x5', '\xA7', '\x862', '\n', '\xA7', '\x3', '\xA7', '\x3', 
		'\xA7', '\x5', '\xA7', '\x866', '\n', '\xA7', '\x3', '\xA7', '\x5', '\xA7', 
		'\x869', '\n', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x86C', '\n', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x870', '\n', '\xA7', '\x3', 
		'\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\a', 
		'\xA8', '\x877', '\n', '\xA8', '\f', '\xA8', '\xE', '\xA8', '\x87A', '\v', 
		'\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\x888', '\n', '\xAC', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', 
		'\x88E', '\n', '\xAC', '\a', '\xAC', '\x890', '\n', '\xAC', '\f', '\xAC', 
		'\xE', '\xAC', '\x893', '\v', '\xAC', '\x3', '\xAD', '\x5', '\xAD', '\x896', 
		'\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x89A', '\n', 
		'\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x89E', '\n', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x8A2', '\n', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x8A6', '\n', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x5', '\xAD', '\x8AA', '\n', '\xAD', '\x3', '\xAE', '\x5', 
		'\xAE', '\x8AD', '\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', 
		'\x8B1', '\n', '\xAE', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xB0', '\x3', 
		'\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB2', '\x3', 
		'\xB2', '\x5', '\xB2', '\x8BC', '\n', '\xB2', '\x3', '\xB3', '\x3', '\xB3', 
		'\x5', '\xB3', '\x8C0', '\n', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x8C7', '\n', '\xB5', 
		'\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x8CB', '\n', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x8D0', '\n', '\xB5', 
		'\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x5', '\xB6', '\x8D5', '\n', 
		'\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', 
		'\xB6', '\x5', '\xB6', '\x8DC', '\n', '\xB6', '\x3', '\xB7', '\x3', '\xB7', 
		'\x5', '\xB7', '\x8E0', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', 
		'\xB9', '\x5', '\xB9', '\x8EA', '\n', '\xB9', '\x3', '\xBA', '\x3', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\a', '\xBB', '\x8F8', '\n', '\xBB', '\f', '\xBB', '\xE', '\xBB', '\x8FB', 
		'\v', '\xBB', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x8FF', '\n', 
		'\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x903', '\n', '\xBD', 
		'\x3', '\xBD', '\x5', '\xBD', '\x906', '\n', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x5', '\xBD', '\x90A', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x910', '\n', '\xBD', '\x3', 
		'\xBD', '\x5', '\xBD', '\x913', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x5', '\xBD', '\x917', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x5', '\xBD', '\x921', '\n', '\xBD', '\x3', '\xBD', '\x5', '\xBD', 
		'\x924', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x92C', '\n', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x931', '\n', 
		'\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x936', 
		'\n', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x93E', '\n', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', 
		'\xBF', '\x945', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', 
		'\x949', '\n', '\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x5', '\xC1', '\x950', '\n', '\xC1', '\x3', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x5', '\xC1', '\x956', '\n', 
		'\xC1', '\a', '\xC1', '\x958', '\n', '\xC1', '\f', '\xC1', '\xE', '\xC1', 
		'\x95B', '\v', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x5', 
		'\xC2', '\x960', '\n', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', 
		'\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', 
		'\x969', '\n', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', '\x96D', 
		'\n', '\xC3', '\x3', '\xC4', '\x5', '\xC4', '\x970', '\n', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x980', 
		'\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC8', 
		'\x3', '\xC8', '\x5', '\xC8', '\x987', '\n', '\xC8', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xCA', '\x5', '\xCA', '\x990', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x996', '\n', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x99A', '\n', '\xCA', '\x3', '\xCA', 
		'\x5', '\xCA', '\x99D', '\n', '\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x5', 
		'\xCB', '\x9A1', '\n', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', 
		'\x9A5', '\n', '\xCC', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x5', 
		'\xCD', '\x9AA', '\n', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCE', 
		'\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\x9B1', '\n', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\x9B7', 
		'\n', '\xCE', '\a', '\xCE', '\x9B9', '\n', '\xCE', '\f', '\xCE', '\xE', 
		'\xCE', '\x9BC', '\v', '\xCE', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\x9C4', '\n', 
		'\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x5', '\xD2', '\x9FD', '\n', '\xD2', '\x3', '\xD3', '\x3', '\xD3', 
		'\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', 
		'\x5', '\xD3', '\xA06', '\n', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x2', 
		'$', '\f', '\x16', ' ', '\x32', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'X', '\x64', 'v', '\xAC', '\xD0', '\xD6', '\xE2', 
		'\xE6', '\xEE', '\x104', '\x108', '\x10C', '\x134', '\x14A', '\x14E', 
		'\x156', '\x174', '\x180', '\x19A', '\xD7', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', 
		'\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', 
		'\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', 
		'\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', 
		'\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', 
		'\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', 
		'\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', 
		'\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', 
		'\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', 
		'\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', 
		'\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', 
		'\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', 
		'\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', 
		'\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', 
		'\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x2', '\r', '\x4', 
		'\x2', '\x63', '\x63', 'g', 'g', '\x4', '\x2', ']', '_', '\x63', '\x66', 
		'\a', '\x2', '&', '&', '\x31', '\x31', ';', ';', '\x41', '\x41', 'H', 
		'H', '\x5', '\x2', '$', '$', '.', '.', 'R', 'R', '\x4', '\x2', '\x18', 
		'\x18', 'T', 'T', '\x4', '\x2', '\x63', '\x63', 'x', 'x', '\x5', '\x2', 
		'\x17', '\x17', '\x44', '\x44', 'O', 'O', '\x4', '\x2', '(', '(', '\x37', 
		'\x37', '\x3', '\x2', '\x38', ':', '\x4', '\x2', '\'', '\'', 'J', 'J', 
		'\x3', '\x2', '\x91', '\x94', '\x2', '\xB30', '\x2', '\x1AD', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\f', '\x1DB', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x10', '\x1F2', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x200', '\x3', '\x2', '\x2', '\x2', '\x16', '\x202', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x214', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x223', '\x3', '\x2', '\x2', '\x2', ' ', '\x272', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x29F', '\x3', '\x2', '\x2', '\x2', '$', '\x2B7', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x2D7', '\x3', '\x2', '\x2', '\x2', '*', '\x2F1', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x2F3', '\x3', '\x2', '\x2', '\x2', '.', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x300', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x302', '\x3', '\x2', '\x2', '\x2', '\x34', '\x31B', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x329', '\x3', '\x2', '\x2', '\x2', '\x38', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x338', '\x3', '\x2', '\x2', '\x2', '>', '\x346', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x357', '\x3', '\x2', '\x2', '\x2', '\x42', '\x365', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x374', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x388', '\x3', '\x2', '\x2', '\x2', 'H', '\x396', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x3A1', '\x3', '\x2', '\x2', '\x2', 'L', '\x3AC', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x3B7', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x3C2', '\x3', '\x2', '\x2', '\x2', 'R', '\x3D4', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x3DC', '\x3', '\x2', '\x2', '\x2', 'V', '\x3E9', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x3EB', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\\', '\x412', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x428', '\x3', '\x2', '\x2', '\x2', '`', '\x42B', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x42F', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x435', '\x3', '\x2', '\x2', '\x2', '\x66', '\x453', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x465', '\x3', '\x2', '\x2', '\x2', 'j', '\x48A', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x48E', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x491', '\x3', '\x2', '\x2', '\x2', 'p', '\x498', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x4AA', '\x3', '\x2', '\x2', '\x2', 't', '\x4AC', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x4AE', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x4C2', '\x3', '\x2', '\x2', '\x2', 'z', '\x4CC', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x4CE', '\x3', '\x2', '\x2', '\x2', '~', '\x4E5', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x4E7', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\x84', '\x4F1', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x88', '\x503', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x505', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x507', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x509', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x50E', '\x3', '\x2', '\x2', '\x2', '\x92', '\x514', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x51D', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x526', '\x3', '\x2', '\x2', '\x2', '\x98', '\x53F', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x545', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x550', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x56A', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x56C', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x57B', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x590', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x592', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x5A1', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x5A3', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x5A6', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x5B6', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x5B8', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x5BC', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x5C2', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x5C6', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x5C9', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x5D2', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x5E3', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x5E7', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x5EE', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x5FF', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x602', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x60C', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x61C', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x61E', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x62F', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x641', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x64A', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x65B', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\x661', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\x663', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x667', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\x669', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x66D', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\x684', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\x686', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x691', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\x69A', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x6A0', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\x6AB', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\x6BD', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x6CC', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\x6E8', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x6EA', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x6EE', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x6F3', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x100', '\x703', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x70A', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x71A', '\x3', '\x2', '\x2', '\x2', '\x106', '\x730', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x732', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x74F', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x751', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x77B', '\x3', '\x2', '\x2', '\x2', '\x110', '\x77E', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x78D', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x793', '\x3', '\x2', '\x2', '\x2', '\x116', '\x795', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x798', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x79B', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x79E', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x7A1', '\x3', '\x2', '\x2', '\x2', '\x120', '\x7A4', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x7AB', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x7B6', '\x3', '\x2', '\x2', '\x2', '\x126', '\x7C3', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x7C5', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x7C9', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x7D6', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x7DD', '\x3', '\x2', '\x2', '\x2', '\x130', '\x7E2', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x7E6', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x7E8', '\x3', '\x2', '\x2', '\x2', '\x136', '\x801', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x805', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x807', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x826', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x829', '\x3', '\x2', '\x2', '\x2', '\x140', '\x82D', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x82F', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x831', '\x3', '\x2', '\x2', '\x2', '\x146', '\x83C', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x84F', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x851', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x86F', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x871', '\x3', '\x2', '\x2', '\x2', '\x150', '\x87B', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x87D', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x881', '\x3', '\x2', '\x2', '\x2', '\x156', '\x884', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x8A9', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x8B0', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x8B2', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x8B4', '\x3', '\x2', '\x2', '\x2', '\x160', '\x8B6', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x8B9', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x8BD', '\x3', '\x2', '\x2', '\x2', '\x166', '\x8C1', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x8CF', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x8DB', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x8DF', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x8E1', '\x3', '\x2', '\x2', '\x2', '\x170', '\x8E9', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x8EB', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x8F1', '\x3', '\x2', '\x2', '\x2', '\x176', '\x8FE', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x930', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x932', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x948', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x94A', '\x3', '\x2', '\x2', '\x2', '\x180', '\x94C', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x95F', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x186', '\x96F', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x974', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x979', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x97D', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x984', '\x3', '\x2', '\x2', '\x2', '\x190', '\x988', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x99C', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x99E', '\x3', '\x2', '\x2', '\x2', '\x196', '\x9A4', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x9AD', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x9C3', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x9C5', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x9C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x9FC', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\xA05', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\xA07', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\xA09', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\xA0B', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AE', '\x5', 'v', '<', 
		'\x2', '\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B0', '\a', '\x2', '\x2', '\x3', '\x1B0', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1', '\x1BA', '\x5', '\x1A4', '\xD3', '\x2', '\x1B2', 
		'\x1BA', '\a', 'G', '\x2', '\x2', '\x1B3', '\x1B4', '\a', 'W', '\x2', 
		'\x2', '\x1B4', '\x1B5', '\x5', 'X', '-', '\x2', '\x1B5', '\x1B6', '\a', 
		'X', '\x2', '\x2', '\x1B6', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1BA', '\x5', '\x6', '\x4', '\x2', '\x1B8', '\x1BA', '\x5', '\xE', '\b', 
		'\x2', '\x1B9', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1BB', 
		'\x1BE', '\x5', '\b', '\x5', '\x2', '\x1BC', '\x1BE', '\x5', '\n', '\x6', 
		'\x2', '\x1BD', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1C9', '\a', '\x87', '\x2', '\x2', '\x1C0', '\x1C9', '\x5', 
		'\x16E', '\xB8', '\x2', '\x1C1', '\x1C9', '\x5', '\x160', '\xB1', '\x2', 
		'\x1C2', '\x1C9', '\x5', '\x170', '\xB9', '\x2', '\x1C3', '\x1C4', '\a', 
		'\x65', '\x2', '\x2', '\x1C4', '\x1C9', '\x5', '\x138', '\x9D', '\x2', 
		'\x1C5', '\x1C6', '\a', '\x65', '\x2', '\x2', '\x1C6', '\x1C9', '\x5', 
		'\x9C', 'O', '\x2', '\x1C7', '\x1C9', '\x5', '\x17C', '\xBF', '\x2', '\x1C8', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C0', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\t', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CC', '\x5', '\f', '\a', '\x2', '\x1CB', '\x1CD', '\a', '\x46', '\x2', 
		'\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1CF', '\x5', '\b', '\x5', '\x2', '\x1CF', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x1D0', '\x1D1', '\b', '\a', '\x1', '\x2', '\x1D1', '\x1DC', 
		'\a', '\x81', '\x2', '\x2', '\x1D2', '\x1D3', '\x5', '\x9A', 'N', '\x2', 
		'\x1D3', '\x1D4', '\a', '\x81', '\x2', '\x2', '\x1D4', '\x1DC', '\x3', 
		'\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x5', '\xB2', 'Z', '\x2', '\x1D6', 
		'\x1D7', '\a', '\x81', '\x2', '\x2', '\x1D7', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D9', '\x5', '\x9C', 'O', '\x2', '\x1D9', '\x1DA', 
		'\a', '\x81', '\x2', '\x2', '\x1DA', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1D2', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1DE', '\f', '\x4', '\x2', '\x2', '\x1DE', '\x1DF', 
		'\a', '\x87', '\x2', '\x2', '\x1DF', '\x1E8', '\a', '\x81', '\x2', '\x2', 
		'\x1E0', '\x1E2', '\f', '\x3', '\x2', '\x2', '\x1E1', '\x1E3', '\a', '\x46', 
		'\x2', '\x2', '\x1E2', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\x1E5', '\x5', '\x17A', '\xBE', '\x2', '\x1E5', '\x1E6', '\a', 
		'\x81', '\x2', '\x2', '\x1E6', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E0', '\x3', '\x2', '\x2', 
		'\x2', '\x1E8', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\r', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E9', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC', '\x1EE', '\x5', '\x10', '\t', '\x2', '\x1ED', '\x1EF', 
		'\x5', '\x1E', '\x10', '\x2', '\x1EE', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x5', '\x62', '\x32', '\x2', '\x1F1', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F4', '\a', 'Y', '\x2', 
		'\x2', '\x1F3', '\x1F5', '\x5', '\x12', '\n', '\x2', '\x1F4', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\a', 
		'Z', '\x2', '\x2', '\x1F7', '\x11', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1FF', '\x5', '\x14', '\v', '\x2', '\x1F9', '\x1FF', '\x5', '\x16', 
		'\f', '\x2', '\x1FA', '\x1FB', '\x5', '\x14', '\v', '\x2', '\x1FB', '\x1FC', 
		'\a', '|', '\x2', '\x2', '\x1FC', '\x1FD', '\x5', '\x16', '\f', '\x2', 
		'\x1FD', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1F8', '\x3', 
		'\x2', '\x2', '\x2', '\x1FE', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x200', '\x201', '\t', '\x2', '\x2', '\x2', '\x201', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x202', '\x203', '\b', '\f', '\x1', '\x2', '\x203', 
		'\x205', '\x5', '\x18', '\r', '\x2', '\x204', '\x206', '\a', '\x85', '\x2', 
		'\x2', '\x205', '\x204', '\x3', '\x2', '\x2', '\x2', '\x205', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x207', '\x208', '\f', '\x3', '\x2', '\x2', '\x208', '\x209', '\a', '|', 
		'\x2', '\x2', '\x209', '\x20B', '\x5', '\x18', '\r', '\x2', '\x20A', '\x20C', 
		'\a', '\x85', '\x2', '\x2', '\x20B', '\x20A', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20E', '\x3', 
		'\x2', '\x2', '\x2', '\x20D', '\x207', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x211', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20F', '\x210', '\x3', '\x2', '\x2', '\x2', '\x210', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x211', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\x215', '\x5', '\x1A', '\xE', '\x2', '\x213', '\x215', '\x5', 
		'\x1C', '\xF', '\x2', '\x214', '\x212', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x215', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x216', '\x21B', '\a', '\x87', '\x2', '\x2', '\x217', '\x218', 
		'\a', '\x63', '\x2', '\x2', '\x218', '\x21B', '\a', '\x87', '\x2', '\x2', 
		'\x219', '\x21B', '\a', 'G', '\x2', '\x2', '\x21A', '\x216', '\x3', '\x2', 
		'\x2', '\x2', '\x21A', '\x217', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21D', '\a', '\x87', '\x2', '\x2', '\x21D', '\x222', '\x5', 
		'\x12E', '\x98', '\x2', '\x21E', '\x21F', '\a', '\x63', '\x2', '\x2', 
		'\x21F', '\x220', '\a', '\x87', '\x2', '\x2', '\x220', '\x222', '\x5', 
		'\x12E', '\x98', '\x2', '\x221', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x221', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x222', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x223', '\x224', '\a', 'W', '\x2', '\x2', '\x224', 
		'\x225', '\x5', '\x10A', '\x86', '\x2', '\x225', '\x227', '\a', 'X', '\x2', 
		'\x2', '\x226', '\x228', '\a', '\x31', '\x2', '\x2', '\x227', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22B', '\x5', 
		'\x196', '\xCC', '\x2', '\x22A', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x22E', '\x5', '\xD0', 'i', '\x2', '\x22D', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x230', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x231', 
		'\x5', '\xF2', 'z', '\x2', '\x230', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x230', '\x231', '\x3', '\x2', '\x2', '\x2', '\x231', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x232', '\x233', '\b', '\x11', '\x1', '\x2', '\x233', 
		'\x273', '\x5', '\x4', '\x3', '\x2', '\x234', '\x235', '\x5', '\x98', 
		'M', '\x2', '\x235', '\x237', '\a', 'W', '\x2', '\x2', '\x236', '\x238', 
		'\x5', '\"', '\x12', '\x2', '\x237', '\x236', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x23A', '\a', 'X', '\x2', '\x2', '\x23A', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\x5', '\x184', 
		'\xC3', '\x2', '\x23C', '\x23E', '\a', 'W', '\x2', '\x2', '\x23D', '\x23F', 
		'\x5', '\"', '\x12', '\x2', '\x23E', '\x23D', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x241', '\a', 'X', '\x2', '\x2', '\x241', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\x5', '\x98', 
		'M', '\x2', '\x243', '\x244', '\x5', '\x136', '\x9C', '\x2', '\x244', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\x5', '\x184', 
		'\xC3', '\x2', '\x246', '\x247', '\x5', '\x136', '\x9C', '\x2', '\x247', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\a', '!', '\x2', 
		'\x2', '\x249', '\x24A', '\a', 'h', '\x2', '\x2', '\x24A', '\x24B', '\x5', 
		'\xFE', '\x80', '\x2', '\x24B', '\x24C', '\a', 'i', '\x2', '\x2', '\x24C', 
		'\x24D', '\a', 'W', '\x2', '\x2', '\x24D', '\x24E', '\x5', 'X', '-', '\x2', 
		'\x24E', '\x24F', '\a', 'X', '\x2', '\x2', '\x24F', '\x273', '\x3', '\x2', 
		'\x2', '\x2', '\x250', '\x251', '\a', '\x43', '\x2', '\x2', '\x251', '\x252', 
		'\a', 'h', '\x2', '\x2', '\x252', '\x253', '\x5', '\xFE', '\x80', '\x2', 
		'\x253', '\x254', '\a', 'i', '\x2', '\x2', '\x254', '\x255', '\a', 'W', 
		'\x2', '\x2', '\x255', '\x256', '\x5', 'X', '-', '\x2', '\x256', '\x257', 
		'\a', 'X', '\x2', '\x2', '\x257', '\x273', '\x3', '\x2', '\x2', '\x2', 
		'\x258', '\x259', '\a', '<', '\x2', '\x2', '\x259', '\x25A', '\a', 'h', 
		'\x2', '\x2', '\x25A', '\x25B', '\x5', '\xFE', '\x80', '\x2', '\x25B', 
		'\x25C', '\a', 'i', '\x2', '\x2', '\x25C', '\x25D', '\a', 'W', '\x2', 
		'\x2', '\x25D', '\x25E', '\x5', 'X', '-', '\x2', '\x25E', '\x25F', '\a', 
		'X', '\x2', '\x2', '\x25F', '\x273', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x261', '\a', '\x1A', '\x2', '\x2', '\x261', '\x262', '\a', 'h', '\x2', 
		'\x2', '\x262', '\x263', '\x5', '\xFE', '\x80', '\x2', '\x263', '\x264', 
		'\a', 'i', '\x2', '\x2', '\x264', '\x265', '\a', 'W', '\x2', '\x2', '\x265', 
		'\x266', '\x5', 'X', '-', '\x2', '\x266', '\x267', '\a', 'X', '\x2', '\x2', 
		'\x267', '\x273', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\a', 
		'M', '\x2', '\x2', '\x269', '\x26A', '\a', 'W', '\x2', '\x2', '\x26A', 
		'\x26B', '\x5', 'X', '-', '\x2', '\x26B', '\x26C', '\a', 'X', '\x2', '\x2', 
		'\x26C', '\x273', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', 
		'M', '\x2', '\x2', '\x26E', '\x26F', '\a', 'W', '\x2', '\x2', '\x26F', 
		'\x270', '\x5', '\xFE', '\x80', '\x2', '\x270', '\x271', '\a', 'X', '\x2', 
		'\x2', '\x271', '\x273', '\x3', '\x2', '\x2', '\x2', '\x272', '\x232', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x272', '\x242', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x245', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x248', '\x3', '\x2', '\x2', '\x2', '\x272', '\x250', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x258', '\x3', '\x2', '\x2', '\x2', '\x272', '\x260', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x273', '\x29C', '\x3', 
		'\x2', '\x2', '\x2', '\x274', '\x275', '\f', '\x15', '\x2', '\x2', '\x275', 
		'\x276', '\a', 'Y', '\x2', '\x2', '\x276', '\x277', '\x5', 'X', '-', '\x2', 
		'\x277', '\x278', '\a', 'Z', '\x2', '\x2', '\x278', '\x29B', '\x3', '\x2', 
		'\x2', '\x2', '\x279', '\x27A', '\f', '\x14', '\x2', '\x2', '\x27A', '\x27B', 
		'\a', 'Y', '\x2', '\x2', '\x27B', '\x27C', '\x5', '\x136', '\x9C', '\x2', 
		'\x27C', '\x27D', '\a', 'Z', '\x2', '\x2', '\x27D', '\x29B', '\x3', '\x2', 
		'\x2', '\x2', '\x27E', '\x27F', '\f', '\x13', '\x2', '\x2', '\x27F', '\x281', 
		'\a', 'W', '\x2', '\x2', '\x280', '\x282', '\x5', '\"', '\x12', '\x2', 
		'\x281', '\x280', '\x3', '\x2', '\x2', '\x2', '\x281', '\x282', '\x3', 
		'\x2', '\x2', '\x2', '\x282', '\x283', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x29B', '\a', 'X', '\x2', '\x2', '\x284', '\x285', '\f', '\xE', '\x2', 
		'\x2', '\x285', '\x287', '\a', '\x83', '\x2', '\x2', '\x286', '\x288', 
		'\a', '\x46', '\x2', '\x2', '\x287', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x287', '\x288', '\x3', '\x2', '\x2', '\x2', '\x288', '\x289', '\x3', 
		'\x2', '\x2', '\x2', '\x289', '\x29B', '\x5', '\x6', '\x4', '\x2', '\x28A', 
		'\x28B', '\f', '\r', '\x2', '\x2', '\x28B', '\x28D', '\a', '~', '\x2', 
		'\x2', '\x28C', '\x28E', '\a', '\x46', '\x2', '\x2', '\x28D', '\x28C', 
		'\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', '\x2', 
		'\x28E', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x29B', '\x5', 
		'\x6', '\x4', '\x2', '\x290', '\x291', '\f', '\f', '\x2', '\x2', '\x291', 
		'\x292', '\a', '\x83', '\x2', '\x2', '\x292', '\x29B', '\x5', '$', '\x13', 
		'\x2', '\x293', '\x294', '\f', '\v', '\x2', '\x2', '\x294', '\x295', '\a', 
		'~', '\x2', '\x2', '\x295', '\x29B', '\x5', '$', '\x13', '\x2', '\x296', 
		'\x297', '\f', '\n', '\x2', '\x2', '\x297', '\x29B', '\a', 'z', '\x2', 
		'\x2', '\x298', '\x299', '\f', '\t', '\x2', '\x2', '\x299', '\x29B', '\a', 
		'{', '\x2', '\x2', '\x29A', '\x274', '\x3', '\x2', '\x2', '\x2', '\x29A', 
		'\x279', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x27E', '\x3', '\x2', '\x2', 
		'\x2', '\x29A', '\x284', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x28A', 
		'\x3', '\x2', '\x2', '\x2', '\x29A', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x29A', '\x293', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x296', '\x3', 
		'\x2', '\x2', '\x2', '\x29A', '\x298', '\x3', '\x2', '\x2', '\x2', '\x29B', 
		'\x29E', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', 
		'\x2', '\x29C', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29D', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x29E', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29F', 
		'\x2A0', '\x5', '\x134', '\x9B', '\x2', '\x2A0', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x2A3', '\x5', '\f', '\a', '\x2', '\x2A2', '\x2A1', '\x3', 
		'\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A3', 
		'\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\x5', '\x9A', 
		'N', '\x2', '\x2A5', '\x2A6', '\a', '\x81', '\x2', '\x2', '\x2A6', '\x2A7', 
		'\a', '\x65', '\x2', '\x2', '\x2A7', '\x2A8', '\x5', '\x9A', 'N', '\x2', 
		'\x2A8', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x5', 
		'\f', '\a', '\x2', '\x2AA', '\x2AB', '\a', '\x46', '\x2', '\x2', '\x2AB', 
		'\x2AC', '\x5', '\x17A', '\xBE', '\x2', '\x2AC', '\x2AD', '\a', '\x81', 
		'\x2', '\x2', '\x2AD', '\x2AE', '\a', '\x65', '\x2', '\x2', '\x2AE', '\x2AF', 
		'\x5', '\x9A', 'N', '\x2', '\x2AF', '\x2B8', '\x3', '\x2', '\x2', '\x2', 
		'\x2B0', '\x2B2', '\x5', '\f', '\a', '\x2', '\x2B1', '\x2B0', '\x3', '\x2', 
		'\x2', '\x2', '\x2B1', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\a', '\x65', '\x2', '\x2', 
		'\x2B4', '\x2B8', '\x5', '\x9A', 'N', '\x2', '\x2B5', '\x2B6', '\a', '\x65', 
		'\x2', '\x2', '\x2B6', '\x2B8', '\x5', '\x9C', 'O', '\x2', '\x2B7', '\x2A2', 
		'\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		'\x2B7', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B5', '\x3', 
		'\x2', '\x2', '\x2', '\x2B8', '%', '\x3', '\x2', '\x2', '\x2', '\x2B9', 
		'\x2D6', '\x5', ' ', '\x11', '\x2', '\x2BA', '\x2BB', '\a', 'z', '\x2', 
		'\x2', '\x2BB', '\x2D6', '\x5', ':', '\x1E', '\x2', '\x2BC', '\x2BD', 
		'\a', '{', '\x2', '\x2', '\x2BD', '\x2D6', '\x5', ':', '\x1E', '\x2', 
		'\x2BE', '\x2BF', '\x5', '(', '\x15', '\x2', '\x2BF', '\x2C0', '\x5', 
		':', '\x1E', '\x2', '\x2C0', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2C1', 
		'\x2C2', '\a', '@', '\x2', '\x2', '\x2C2', '\x2D6', '\x5', '&', '\x14', 
		'\x2', '\x2C3', '\x2C4', '\a', '@', '\x2', '\x2', '\x2C4', '\x2C5', '\a', 
		'W', '\x2', '\x2', '\x2C5', '\x2C6', '\x5', '\xFE', '\x80', '\x2', '\x2C6', 
		'\x2C7', '\a', 'X', '\x2', '\x2', '\x2C7', '\x2D6', '\x3', '\x2', '\x2', 
		'\x2', '\x2C8', '\x2C9', '\a', '@', '\x2', '\x2', '\x2C9', '\x2CA', '\a', 
		'\x85', '\x2', '\x2', '\x2CA', '\x2CB', '\a', 'W', '\x2', '\x2', '\x2CB', 
		'\x2CC', '\a', '\x87', '\x2', '\x2', '\x2CC', '\x2D6', '\a', 'X', '\x2', 
		'\x2', '\x2CD', '\x2CE', '\a', '\r', '\x2', '\x2', '\x2CE', '\x2CF', '\a', 
		'W', '\x2', '\x2', '\x2CF', '\x2D0', '\x5', '\xFE', '\x80', '\x2', '\x2D0', 
		'\x2D1', '\a', 'X', '\x2', '\x2', '\x2D1', '\x2D6', '\x3', '\x2', '\x2', 
		'\x2', '\x2D2', '\x2D6', '\x5', '\x38', '\x1D', '\x2', '\x2D3', '\x2D6', 
		'\x5', '*', '\x16', '\x2', '\x2D4', '\x2D6', '\x5', '\x36', '\x1C', '\x2', 
		'\x2D5', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2BA', '\x3', 
		'\x2', '\x2', '\x2', '\x2D5', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2D5', 
		'\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2C1', '\x3', '\x2', '\x2', 
		'\x2', '\x2D5', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2CD', '\x3', '\x2', '\x2', '\x2', 
		'\x2D5', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D3', '\x3', 
		'\x2', '\x2', '\x2', '\x2D5', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\t', '\x3', '\x2', 
		'\x2', '\x2D8', ')', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DB', '\a', 
		'\x81', '\x2', '\x2', '\x2DA', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DA', 
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC', '\x3', '\x2', '\x2', 
		'\x2', '\x2DC', '\x2DE', '\a', '\x33', '\x2', '\x2', '\x2DD', '\x2DF', 
		'\x5', ',', '\x17', '\x2', '\x2DE', '\x2DD', '\x3', '\x2', '\x2', '\x2', 
		'\x2DE', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\x3', 
		'\x2', '\x2', '\x2', '\x2E0', '\x2E2', '\x5', '.', '\x18', '\x2', '\x2E1', 
		'\x2E3', '\x5', '\x34', '\x1B', '\x2', '\x2E2', '\x2E1', '\x3', '\x2', 
		'\x2', '\x2', '\x2E2', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2F2', 
		'\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E6', '\a', '\x81', '\x2', '\x2', 
		'\x2E5', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\x3', 
		'\x2', '\x2', '\x2', '\x2E6', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E7', 
		'\x2E9', '\a', '\x33', '\x2', '\x2', '\x2E8', '\x2EA', '\x5', ',', '\x17', 
		'\x2', '\x2E9', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', 
		'\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EB', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2EC', '\a', 'W', '\x2', '\x2', '\x2EC', '\x2ED', '\x5', '\xFE', 
		'\x80', '\x2', '\x2ED', '\x2EF', '\a', 'X', '\x2', '\x2', '\x2EE', '\x2F0', 
		'\x5', '\x34', '\x1B', '\x2', '\x2EF', '\x2EE', '\x3', '\x2', '\x2', '\x2', 
		'\x2EF', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F2', '\x3', 
		'\x2', '\x2', '\x2', '\x2F1', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2F1', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2F2', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x2F3', '\x2F4', '\a', 'W', '\x2', '\x2', '\x2F4', '\x2F5', '\x5', 
		'\"', '\x12', '\x2', '\x2F5', '\x2F6', '\a', 'X', '\x2', '\x2', '\x2F6', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F9', '\x5', '\x94', 'K', 
		'\x2', '\x2F8', '\x2FA', '\x5', '\x30', '\x19', '\x2', '\x2F9', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '/', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FD', '\x5', '\xF4', 
		'{', '\x2', '\x2FC', '\x2FE', '\x5', '\x30', '\x19', '\x2', '\x2FD', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x2FD', '\x2FE', '\x3', '\x2', '\x2', '\x2', 
		'\x2FE', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x301', '\x5', 
		'\x32', '\x1A', '\x2', '\x300', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x301', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x302', '\x303', '\b', '\x1A', '\x1', '\x2', '\x303', '\x304', 
		'\a', 'Y', '\x2', '\x2', '\x304', '\x305', '\x5', 'X', '-', '\x2', '\x305', 
		'\x307', '\a', 'Z', '\x2', '\x2', '\x306', '\x308', '\x5', '\xD0', 'i', 
		'\x2', '\x307', '\x306', '\x3', '\x2', '\x2', '\x2', '\x307', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x308', '\x312', '\x3', '\x2', '\x2', '\x2', 
		'\x309', '\x30A', '\f', '\x3', '\x2', '\x2', '\x30A', '\x30B', '\a', 'Y', 
		'\x2', '\x2', '\x30B', '\x30C', '\x5', 'Z', '.', '\x2', '\x30C', '\x30E', 
		'\a', 'Z', '\x2', '\x2', '\x30D', '\x30F', '\x5', '\xD0', 'i', '\x2', 
		'\x30E', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\x3', 
		'\x2', '\x2', '\x2', '\x30F', '\x311', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x311', '\x314', '\x3', '\x2', '\x2', 
		'\x2', '\x312', '\x310', '\x3', '\x2', '\x2', '\x2', '\x312', '\x313', 
		'\x3', '\x2', '\x2', '\x2', '\x313', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x314', '\x312', '\x3', '\x2', '\x2', '\x2', '\x315', '\x317', '\a', 
		'W', '\x2', '\x2', '\x316', '\x318', '\x5', '\"', '\x12', '\x2', '\x317', 
		'\x316', '\x3', '\x2', '\x2', '\x2', '\x317', '\x318', '\x3', '\x2', '\x2', 
		'\x2', '\x318', '\x319', '\x3', '\x2', '\x2', '\x2', '\x319', '\x31C', 
		'\a', 'X', '\x2', '\x2', '\x31A', '\x31C', '\x5', '\x136', '\x9C', '\x2', 
		'\x31B', '\x315', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31A', '\x3', 
		'\x2', '\x2', '\x2', '\x31C', '\x35', '\x3', '\x2', '\x2', '\x2', '\x31D', 
		'\x31F', '\a', '\x81', '\x2', '\x2', '\x31E', '\x31D', '\x3', '\x2', '\x2', 
		'\x2', '\x31E', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x320', '\x321', '\a', '\x1E', '\x2', '\x2', 
		'\x321', '\x32A', '\x5', ':', '\x1E', '\x2', '\x322', '\x324', '\a', '\x81', 
		'\x2', '\x2', '\x323', '\x322', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', 
		'\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x325', '\x326', '\a', '\x1E', '\x2', '\x2', '\x326', '\x327', '\a', 
		'Y', '\x2', '\x2', '\x327', '\x328', '\a', 'Z', '\x2', '\x2', '\x328', 
		'\x32A', '\x5', ':', '\x1E', '\x2', '\x329', '\x31E', '\x3', '\x2', '\x2', 
		'\x2', '\x329', '\x323', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\a', '\x34', '\x2', '\x2', 
		'\x32C', '\x32D', '\a', 'W', '\x2', '\x2', '\x32D', '\x32E', '\x5', 'X', 
		'-', '\x2', '\x32E', '\x32F', '\a', 'X', '\x2', '\x2', '\x32F', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x330', '\x337', '\x5', '&', '\x14', '\x2', 
		'\x331', '\x332', '\a', 'W', '\x2', '\x2', '\x332', '\x333', '\x5', '\xFE', 
		'\x80', '\x2', '\x333', '\x334', '\a', 'X', '\x2', '\x2', '\x334', '\x335', 
		'\x5', ':', '\x1E', '\x2', '\x335', '\x337', '\x3', '\x2', '\x2', '\x2', 
		'\x336', '\x330', '\x3', '\x2', '\x2', '\x2', '\x336', '\x331', '\x3', 
		'\x2', '\x2', '\x2', '\x337', ';', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x339', '\b', '\x1F', '\x1', '\x2', '\x339', '\x33A', '\x5', ':', '\x1E', 
		'\x2', '\x33A', '\x343', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', 
		'\f', '\x4', '\x2', '\x2', '\x33C', '\x33D', '\a', '\x84', '\x2', '\x2', 
		'\x33D', '\x342', '\x5', ':', '\x1E', '\x2', '\x33E', '\x33F', '\f', '\x3', 
		'\x2', '\x2', '\x33F', '\x340', '\a', '}', '\x2', '\x2', '\x340', '\x342', 
		'\x5', ':', '\x1E', '\x2', '\x341', '\x33B', '\x3', '\x2', '\x2', '\x2', 
		'\x341', '\x33E', '\x3', '\x2', '\x2', '\x2', '\x342', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x343', '\x341', '\x3', '\x2', '\x2', '\x2', '\x343', 
		'\x344', '\x3', '\x2', '\x2', '\x2', '\x344', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x345', '\x343', '\x3', '\x2', '\x2', '\x2', '\x346', '\x347', 
		'\b', ' ', '\x1', '\x2', '\x347', '\x348', '\x5', '<', '\x1F', '\x2', 
		'\x348', '\x354', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', '\f', 
		'\x5', '\x2', '\x2', '\x34A', '\x34B', '\a', '_', '\x2', '\x2', '\x34B', 
		'\x353', '\x5', '<', '\x1F', '\x2', '\x34C', '\x34D', '\f', '\x4', '\x2', 
		'\x2', '\x34D', '\x34E', '\a', '`', '\x2', '\x2', '\x34E', '\x353', '\x5', 
		'<', '\x1F', '\x2', '\x34F', '\x350', '\f', '\x3', '\x2', '\x2', '\x350', 
		'\x351', '\a', '\x61', '\x2', '\x2', '\x351', '\x353', '\x5', '<', '\x1F', 
		'\x2', '\x352', '\x349', '\x3', '\x2', '\x2', '\x2', '\x352', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x352', '\x34F', '\x3', '\x2', '\x2', '\x2', 
		'\x353', '\x356', '\x3', '\x2', '\x2', '\x2', '\x354', '\x352', '\x3', 
		'\x2', '\x2', '\x2', '\x354', '\x355', '\x3', '\x2', '\x2', '\x2', '\x355', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x356', '\x354', '\x3', '\x2', '\x2', 
		'\x2', '\x357', '\x358', '\b', '!', '\x1', '\x2', '\x358', '\x359', '\x5', 
		'>', ' ', '\x2', '\x359', '\x362', '\x3', '\x2', '\x2', '\x2', '\x35A', 
		'\x35B', '\f', '\x4', '\x2', '\x2', '\x35B', '\x35C', '\a', ']', '\x2', 
		'\x2', '\x35C', '\x361', '\x5', '>', ' ', '\x2', '\x35D', '\x35E', '\f', 
		'\x3', '\x2', '\x2', '\x35E', '\x35F', '\a', '^', '\x2', '\x2', '\x35F', 
		'\x361', '\x5', '>', ' ', '\x2', '\x360', '\x35A', '\x3', '\x2', '\x2', 
		'\x2', '\x360', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x361', '\x364', 
		'\x3', '\x2', '\x2', '\x2', '\x362', '\x360', '\x3', '\x2', '\x2', '\x2', 
		'\x362', '\x363', '\x3', '\x2', '\x2', '\x2', '\x363', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x364', '\x362', '\x3', '\x2', '\x2', '\x2', '\x365', 
		'\x366', '\b', '\"', '\x1', '\x2', '\x366', '\x367', '\x5', '@', '!', 
		'\x2', '\x367', '\x371', '\x3', '\x2', '\x2', '\x2', '\x368', '\x369', 
		'\f', '\x4', '\x2', '\x2', '\x369', '\x36A', '\a', 'r', '\x2', '\x2', 
		'\x36A', '\x370', '\x5', '@', '!', '\x2', '\x36B', '\x36C', '\f', '\x3', 
		'\x2', '\x2', '\x36C', '\x36D', '\x5', '\x19E', '\xD0', '\x2', '\x36D', 
		'\x36E', '\x5', '@', '!', '\x2', '\x36E', '\x370', '\x3', '\x2', '\x2', 
		'\x2', '\x36F', '\x368', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x36B', 
		'\x3', '\x2', '\x2', '\x2', '\x370', '\x373', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x371', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x372', '\x43', '\x3', '\x2', '\x2', '\x2', '\x373', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x374', '\x375', '\b', '#', '\x1', 
		'\x2', '\x375', '\x376', '\x5', '\x42', '\"', '\x2', '\x376', '\x385', 
		'\x3', '\x2', '\x2', '\x2', '\x377', '\x378', '\f', '\x6', '\x2', '\x2', 
		'\x378', '\x379', '\a', 'h', '\x2', '\x2', '\x379', '\x384', '\x5', '\x42', 
		'\"', '\x2', '\x37A', '\x37B', '\f', '\x5', '\x2', '\x2', '\x37B', '\x37C', 
		'\a', 'i', '\x2', '\x2', '\x37C', '\x384', '\x5', '\x42', '\"', '\x2', 
		'\x37D', '\x37E', '\f', '\x4', '\x2', '\x2', '\x37E', '\x37F', '\a', 'v', 
		'\x2', '\x2', '\x37F', '\x384', '\x5', '\x42', '\"', '\x2', '\x380', '\x381', 
		'\f', '\x3', '\x2', '\x2', '\x381', '\x382', '\a', 'w', '\x2', '\x2', 
		'\x382', '\x384', '\x5', '\x42', '\"', '\x2', '\x383', '\x377', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\x37D', '\x3', '\x2', '\x2', '\x2', '\x383', '\x380', '\x3', '\x2', '\x2', 
		'\x2', '\x384', '\x387', '\x3', '\x2', '\x2', '\x2', '\x385', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x385', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x386', '\x45', '\x3', '\x2', '\x2', '\x2', '\x387', '\x385', '\x3', 
		'\x2', '\x2', '\x2', '\x388', '\x389', '\b', '$', '\x1', '\x2', '\x389', 
		'\x38A', '\x5', '\x44', '#', '\x2', '\x38A', '\x393', '\x3', '\x2', '\x2', 
		'\x2', '\x38B', '\x38C', '\f', '\x4', '\x2', '\x2', '\x38C', '\x38D', 
		'\a', 't', '\x2', '\x2', '\x38D', '\x392', '\x5', '\x44', '#', '\x2', 
		'\x38E', '\x38F', '\f', '\x3', '\x2', '\x2', '\x38F', '\x390', '\a', 'u', 
		'\x2', '\x2', '\x390', '\x392', '\x5', '\x44', '#', '\x2', '\x391', '\x38B', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x38E', '\x3', '\x2', '\x2', '\x2', 
		'\x392', '\x395', '\x3', '\x2', '\x2', '\x2', '\x393', '\x391', '\x3', 
		'\x2', '\x2', '\x2', '\x393', '\x394', '\x3', '\x2', '\x2', '\x2', '\x394', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x395', '\x393', '\x3', '\x2', '\x2', 
		'\x2', '\x396', '\x397', '\b', '%', '\x1', '\x2', '\x397', '\x398', '\x5', 
		'\x46', '$', '\x2', '\x398', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x399', 
		'\x39A', '\f', '\x3', '\x2', '\x2', '\x39A', '\x39B', '\a', '\x63', '\x2', 
		'\x2', '\x39B', '\x39D', '\x5', '\x46', '$', '\x2', '\x39C', '\x399', 
		'\x3', '\x2', '\x2', '\x2', '\x39D', '\x3A0', '\x3', '\x2', '\x2', '\x2', 
		'\x39E', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39F', '\x3', 
		'\x2', '\x2', '\x2', '\x39F', 'I', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x39E', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A2', '\b', '&', '\x1', 
		'\x2', '\x3A2', '\x3A3', '\x5', 'H', '%', '\x2', '\x3A3', '\x3A9', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\x3A5', '\f', '\x3', '\x2', '\x2', '\x3A5', 
		'\x3A6', '\a', '\x62', '\x2', '\x2', '\x3A6', '\x3A8', '\x5', 'H', '%', 
		'\x2', '\x3A7', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3AB', 
		'\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3A7', '\x3', '\x2', '\x2', '\x2', 
		'\x3A9', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AA', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x3AB', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', 
		'\b', '\'', '\x1', '\x2', '\x3AD', '\x3AE', '\x5', 'J', '&', '\x2', '\x3AE', 
		'\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B0', '\f', '\x3', '\x2', 
		'\x2', '\x3B0', '\x3B1', '\a', '\x64', '\x2', '\x2', '\x3B1', '\x3B3', 
		'\x5', 'J', '&', '\x2', '\x3B2', '\x3AF', '\x3', '\x2', '\x2', '\x2', 
		'\x3B3', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B2', '\x3', 
		'\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B5', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B4', '\x3', '\x2', '\x2', 
		'\x2', '\x3B7', '\x3B8', '\b', '(', '\x1', '\x2', '\x3B8', '\x3B9', '\x5', 
		'L', '\'', '\x2', '\x3B9', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3BA', 
		'\x3BB', '\f', '\x3', '\x2', '\x2', '\x3BB', '\x3BC', '\a', 'x', '\x2', 
		'\x2', '\x3BC', '\x3BE', '\x5', 'L', '\'', '\x2', '\x3BD', '\x3BA', '\x3', 
		'\x2', '\x2', '\x2', '\x3BE', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3BF', 
		'\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C0', '\x3', '\x2', '\x2', 
		'\x2', '\x3C0', 'O', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3BF', '\x3', 
		'\x2', '\x2', '\x2', '\x3C2', '\x3C3', '\b', ')', '\x1', '\x2', '\x3C3', 
		'\x3C4', '\x5', 'N', '(', '\x2', '\x3C4', '\x3CA', '\x3', '\x2', '\x2', 
		'\x2', '\x3C5', '\x3C6', '\f', '\x3', '\x2', '\x2', '\x3C6', '\x3C7', 
		'\a', 'y', '\x2', '\x2', '\x3C7', '\x3C9', '\x5', 'N', '(', '\x2', '\x3C8', 
		'\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CC', '\x3', '\x2', '\x2', 
		'\x2', '\x3CA', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CB', 
		'\x3', '\x2', '\x2', '\x2', '\x3CB', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x3CC', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3D5', '\x5', 
		'P', ')', '\x2', '\x3CE', '\x3CF', '\x5', 'P', ')', '\x2', '\x3CF', '\x3D0', 
		'\a', '\x7F', '\x2', '\x2', '\x3D0', '\x3D1', '\x5', 'X', '-', '\x2', 
		'\x3D1', '\x3D2', '\a', '\x80', '\x2', '\x2', '\x3D2', '\x3D3', '\x5', 
		'T', '+', '\x2', '\x3D3', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D4', 
		'\x3CD', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3CE', '\x3', '\x2', '\x2', 
		'\x2', '\x3D5', 'S', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3DD', '\x5', 
		'R', '*', '\x2', '\x3D7', '\x3D8', '\x5', 'P', ')', '\x2', '\x3D8', '\x3D9', 
		'\x5', 'V', ',', '\x2', '\x3D9', '\x3DA', '\x5', '\x132', '\x9A', '\x2', 
		'\x3DA', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3DD', '\x5', 
		'\x194', '\xCB', '\x2', '\x3DC', '\x3D6', '\x3', '\x2', '\x2', '\x2', 
		'\x3DC', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DB', '\x3', 
		'\x2', '\x2', '\x2', '\x3DD', 'U', '\x3', '\x2', '\x2', '\x2', '\x3DE', 
		'\x3EA', '\a', 'g', '\x2', '\x2', '\x3DF', '\x3EA', '\a', 'l', '\x2', 
		'\x2', '\x3E0', '\x3EA', '\a', 'm', '\x2', '\x2', '\x3E1', '\x3EA', '\a', 
		'n', '\x2', '\x2', '\x3E2', '\x3EA', '\a', 'j', '\x2', '\x2', '\x3E3', 
		'\x3EA', '\a', 'k', '\x2', '\x2', '\x3E4', '\x3EA', '\x5', '\x1A0', '\xD1', 
		'\x2', '\x3E5', '\x3EA', '\a', 's', '\x2', '\x2', '\x3E6', '\x3EA', '\a', 
		'p', '\x2', '\x2', '\x3E7', '\x3EA', '\a', 'o', '\x2', '\x2', '\x3E8', 
		'\x3EA', '\a', 'q', '\x2', '\x2', '\x3E9', '\x3DE', '\x3', '\x2', '\x2', 
		'\x2', '\x3E9', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E0', 
		'\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E1', '\x3', '\x2', '\x2', '\x2', 
		'\x3E9', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E3', '\x3', 
		'\x2', '\x2', '\x2', '\x3E9', '\x3E4', '\x3', '\x2', '\x2', '\x2', '\x3E9', 
		'\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E6', '\x3', '\x2', '\x2', 
		'\x2', '\x3E9', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E8', 
		'\x3', '\x2', '\x2', '\x2', '\x3EA', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x3EB', '\x3EC', '\b', '-', '\x1', '\x2', '\x3EC', '\x3ED', '\x5', 'T', 
		'+', '\x2', '\x3ED', '\x3F3', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', 
		'\f', '\x3', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '|', '\x2', '\x2', 
		'\x3F0', '\x3F2', '\x5', 'T', '+', '\x2', '\x3F1', '\x3EE', '\x3', '\x2', 
		'\x2', '\x2', '\x3F2', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F1', 
		'\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\x3', '\x2', '\x2', '\x2', 
		'\x3F4', 'Y', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F3', '\x3', '\x2', 
		'\x2', '\x2', '\x3F6', '\x3F7', '\x5', 'R', '*', '\x2', '\x3F7', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x3F8', '\x413', '\x5', '^', '\x30', '\x2', 
		'\x3F9', '\x3FB', '\x5', '\xD0', 'i', '\x2', '\x3FA', '\x3F9', '\x3', 
		'\x2', '\x2', '\x2', '\x3FA', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FB', 
		'\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x413', '\x5', '`', '\x31', 
		'\x2', '\x3FD', '\x3FF', '\x5', '\xD0', 'i', '\x2', '\x3FE', '\x3FD', 
		'\x3', '\x2', '\x2', '\x2', '\x3FE', '\x3FF', '\x3', '\x2', '\x2', '\x2', 
		'\x3FF', '\x400', '\x3', '\x2', '\x2', '\x2', '\x400', '\x413', '\x5', 
		'\x62', '\x32', '\x2', '\x401', '\x403', '\x5', '\xD0', 'i', '\x2', '\x402', 
		'\x401', '\x3', '\x2', '\x2', '\x2', '\x402', '\x403', '\x3', '\x2', '\x2', 
		'\x2', '\x403', '\x404', '\x3', '\x2', '\x2', '\x2', '\x404', '\x413', 
		'\x5', '\x66', '\x34', '\x2', '\x405', '\x407', '\x5', '\xD0', 'i', '\x2', 
		'\x406', '\x405', '\x3', '\x2', '\x2', '\x2', '\x406', '\x407', '\x3', 
		'\x2', '\x2', '\x2', '\x407', '\x408', '\x3', '\x2', '\x2', '\x2', '\x408', 
		'\x413', '\x5', 'j', '\x36', '\x2', '\x409', '\x40B', '\x5', '\xD0', 'i', 
		'\x2', '\x40A', '\x409', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x40B', 
		'\x3', '\x2', '\x2', '\x2', '\x40B', '\x40C', '\x3', '\x2', '\x2', '\x2', 
		'\x40C', '\x413', '\x5', 'r', ':', '\x2', '\x40D', '\x413', '\x5', 't', 
		';', '\x2', '\x40E', '\x410', '\x5', '\xD0', 'i', '\x2', '\x40F', '\x40E', 
		'\x3', '\x2', '\x2', '\x2', '\x40F', '\x410', '\x3', '\x2', '\x2', '\x2', 
		'\x410', '\x411', '\x3', '\x2', '\x2', '\x2', '\x411', '\x413', '\x5', 
		'\x18A', '\xC6', '\x2', '\x412', '\x3F8', '\x3', '\x2', '\x2', '\x2', 
		'\x412', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x412', '\x3FE', '\x3', 
		'\x2', '\x2', '\x2', '\x412', '\x402', '\x3', '\x2', '\x2', '\x2', '\x412', 
		'\x406', '\x3', '\x2', '\x2', '\x2', '\x412', '\x40A', '\x3', '\x2', '\x2', 
		'\x2', '\x412', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x412', '\x40F', 
		'\x3', '\x2', '\x2', '\x2', '\x413', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x414', '\x416', '\x5', '\xD0', 'i', '\x2', '\x415', '\x414', '\x3', 
		'\x2', '\x2', '\x2', '\x415', '\x416', '\x3', '\x2', '\x2', '\x2', '\x416', 
		'\x417', '\x3', '\x2', '\x2', '\x2', '\x417', '\x418', '\a', '\x87', '\x2', 
		'\x2', '\x418', '\x419', '\a', '\x80', '\x2', '\x2', '\x419', '\x429', 
		'\x5', '\\', '/', '\x2', '\x41A', '\x41C', '\x5', '\xD0', 'i', '\x2', 
		'\x41B', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x41C', '\x3', 
		'\x2', '\x2', '\x2', '\x41C', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x41D', 
		'\x41E', '\a', '\x12', '\x2', '\x2', '\x41E', '\x41F', '\x5', 'Z', '.', 
		'\x2', '\x41F', '\x420', '\a', '\x80', '\x2', '\x2', '\x420', '\x421', 
		'\x5', '\\', '/', '\x2', '\x421', '\x429', '\x3', '\x2', '\x2', '\x2', 
		'\x422', '\x424', '\x5', '\xD0', 'i', '\x2', '\x423', '\x422', '\x3', 
		'\x2', '\x2', '\x2', '\x423', '\x424', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x425', '\x426', '\a', '\x1D', '\x2', 
		'\x2', '\x426', '\x427', '\a', '\x80', '\x2', '\x2', '\x427', '\x429', 
		'\x5', '\\', '/', '\x2', '\x428', '\x415', '\x3', '\x2', '\x2', '\x2', 
		'\x428', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x428', '\x423', '\x3', 
		'\x2', '\x2', '\x2', '\x429', '_', '\x3', '\x2', '\x2', '\x2', '\x42A', 
		'\x42C', '\x5', 'X', '-', '\x2', '\x42B', '\x42A', '\x3', '\x2', '\x2', 
		'\x2', '\x42B', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x42D', 
		'\x3', '\x2', '\x2', '\x2', '\x42D', '\x42E', '\a', '\x82', '\x2', '\x2', 
		'\x42E', '\x61', '\x3', '\x2', '\x2', '\x2', '\x42F', '\x431', '\a', '[', 
		'\x2', '\x2', '\x430', '\x432', '\x5', '\x64', '\x33', '\x2', '\x431', 
		'\x430', '\x3', '\x2', '\x2', '\x2', '\x431', '\x432', '\x3', '\x2', '\x2', 
		'\x2', '\x432', '\x433', '\x3', '\x2', '\x2', '\x2', '\x433', '\x434', 
		'\a', '\\', '\x2', '\x2', '\x434', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x435', '\x436', '\b', '\x33', '\x1', '\x2', '\x436', '\x437', '\x5', 
		'\\', '/', '\x2', '\x437', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x438', 
		'\x439', '\f', '\x3', '\x2', '\x2', '\x439', '\x43B', '\x5', '\\', '/', 
		'\x2', '\x43A', '\x438', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x43E', 
		'\x3', '\x2', '\x2', '\x2', '\x43C', '\x43A', '\x3', '\x2', '\x2', '\x2', 
		'\x43C', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x43D', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x43E', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x43F', 
		'\x440', '\a', '-', '\x2', '\x2', '\x440', '\x441', '\a', 'W', '\x2', 
		'\x2', '\x441', '\x442', '\x5', 'h', '\x35', '\x2', '\x442', '\x443', 
		'\a', 'X', '\x2', '\x2', '\x443', '\x444', '\x5', '\\', '/', '\x2', '\x444', 
		'\x454', '\x3', '\x2', '\x2', '\x2', '\x445', '\x446', '\a', '-', '\x2', 
		'\x2', '\x446', '\x447', '\a', 'W', '\x2', '\x2', '\x447', '\x448', '\x5', 
		'h', '\x35', '\x2', '\x448', '\x449', '\a', 'X', '\x2', '\x2', '\x449', 
		'\x44A', '\x5', '\\', '/', '\x2', '\x44A', '\x44B', '\a', '\"', '\x2', 
		'\x2', '\x44B', '\x44C', '\x5', '\\', '/', '\x2', '\x44C', '\x454', '\x3', 
		'\x2', '\x2', '\x2', '\x44D', '\x44E', '\a', '\x45', '\x2', '\x2', '\x44E', 
		'\x44F', '\a', 'W', '\x2', '\x2', '\x44F', '\x450', '\x5', 'h', '\x35', 
		'\x2', '\x450', '\x451', '\a', 'X', '\x2', '\x2', '\x451', '\x452', '\x5', 
		'\\', '/', '\x2', '\x452', '\x454', '\x3', '\x2', '\x2', '\x2', '\x453', 
		'\x43F', '\x3', '\x2', '\x2', '\x2', '\x453', '\x445', '\x3', '\x2', '\x2', 
		'\x2', '\x453', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x454', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x455', '\x466', '\x5', 'X', '-', '\x2', '\x456', 
		'\x458', '\x5', '\xD0', 'i', '\x2', '\x457', '\x456', '\x3', '\x2', '\x2', 
		'\x2', '\x457', '\x458', '\x3', '\x2', '\x2', '\x2', '\x458', '\x459', 
		'\x3', '\x2', '\x2', '\x2', '\x459', '\x45A', '\x5', '\x88', '\x45', '\x2', 
		'\x45A', '\x45B', '\x5', '\xEA', 'v', '\x2', '\x45B', '\x45C', '\a', 'g', 
		'\x2', '\x2', '\x45C', '\x45D', '\x5', '\x132', '\x9A', '\x2', '\x45D', 
		'\x466', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x460', '\x5', '\xD0', 
		'i', '\x2', '\x45F', '\x45E', '\x3', '\x2', '\x2', '\x2', '\x45F', '\x460', 
		'\x3', '\x2', '\x2', '\x2', '\x460', '\x461', '\x3', '\x2', '\x2', '\x2', 
		'\x461', '\x462', '\x5', '\x88', '\x45', '\x2', '\x462', '\x463', '\x5', 
		'\xEA', 'v', '\x2', '\x463', '\x464', '\x5', '\x136', '\x9C', '\x2', '\x464', 
		'\x466', '\x3', '\x2', '\x2', '\x2', '\x465', '\x455', '\x3', '\x2', '\x2', 
		'\x2', '\x465', '\x457', '\x3', '\x2', '\x2', '\x2', '\x465', '\x45F', 
		'\x3', '\x2', '\x2', '\x2', '\x466', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\x467', '\x468', '\a', 'V', '\x2', '\x2', '\x468', '\x469', '\a', 'W', 
		'\x2', '\x2', '\x469', '\x46A', '\x5', 'h', '\x35', '\x2', '\x46A', '\x46B', 
		'\a', 'X', '\x2', '\x2', '\x46B', '\x46C', '\x5', '\\', '/', '\x2', '\x46C', 
		'\x48B', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', '\a', '\x1F', '\x2', 
		'\x2', '\x46E', '\x46F', '\x5', '\\', '/', '\x2', '\x46F', '\x470', '\a', 
		'V', '\x2', '\x2', '\x470', '\x471', '\a', 'W', '\x2', '\x2', '\x471', 
		'\x472', '\x5', 'X', '-', '\x2', '\x472', '\x473', '\a', 'X', '\x2', '\x2', 
		'\x473', '\x474', '\a', '\x82', '\x2', '\x2', '\x474', '\x48B', '\x3', 
		'\x2', '\x2', '\x2', '\x475', '\x476', '\a', '*', '\x2', '\x2', '\x476', 
		'\x477', '\a', 'W', '\x2', '\x2', '\x477', '\x479', '\x5', 'l', '\x37', 
		'\x2', '\x478', '\x47A', '\x5', 'h', '\x35', '\x2', '\x479', '\x478', 
		'\x3', '\x2', '\x2', '\x2', '\x479', '\x47A', '\x3', '\x2', '\x2', '\x2', 
		'\x47A', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x47B', '\x47D', '\a', 
		'\x82', '\x2', '\x2', '\x47C', '\x47E', '\x5', 'X', '-', '\x2', '\x47D', 
		'\x47C', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47E', '\x3', '\x2', '\x2', 
		'\x2', '\x47E', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x47F', '\x480', 
		'\a', 'X', '\x2', '\x2', '\x480', '\x481', '\x5', '\\', '/', '\x2', '\x481', 
		'\x48B', '\x3', '\x2', '\x2', '\x2', '\x482', '\x483', '\a', '*', '\x2', 
		'\x2', '\x483', '\x484', '\a', 'W', '\x2', '\x2', '\x484', '\x485', '\x5', 
		'n', '\x38', '\x2', '\x485', '\x486', '\a', '\x80', '\x2', '\x2', '\x486', 
		'\x487', '\x5', 'p', '\x39', '\x2', '\x487', '\x488', '\a', 'X', '\x2', 
		'\x2', '\x488', '\x489', '\x5', '\\', '/', '\x2', '\x489', '\x48B', '\x3', 
		'\x2', '\x2', '\x2', '\x48A', '\x467', '\x3', '\x2', '\x2', '\x2', '\x48A', 
		'\x46D', '\x3', '\x2', '\x2', '\x2', '\x48A', '\x475', '\x3', '\x2', '\x2', 
		'\x2', '\x48A', '\x482', '\x3', '\x2', '\x2', '\x2', '\x48B', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x48F', '\x5', '`', '\x31', '\x2', '\x48D', 
		'\x48F', '\x5', '~', '@', '\x2', '\x48E', '\x48C', '\x3', '\x2', '\x2', 
		'\x2', '\x48E', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x48F', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x490', '\x492', '\x5', '\xD0', 'i', '\x2', '\x491', 
		'\x490', '\x3', '\x2', '\x2', '\x2', '\x491', '\x492', '\x3', '\x2', '\x2', 
		'\x2', '\x492', '\x493', '\x3', '\x2', '\x2', '\x2', '\x493', '\x494', 
		'\x5', '\x88', '\x45', '\x2', '\x494', '\x495', '\x5', '\xEA', 'v', '\x2', 
		'\x495', 'o', '\x3', '\x2', '\x2', '\x2', '\x496', '\x499', '\x5', 'X', 
		'-', '\x2', '\x497', '\x499', '\x5', '\x136', '\x9C', '\x2', '\x498', 
		'\x496', '\x3', '\x2', '\x2', '\x2', '\x498', '\x497', '\x3', '\x2', '\x2', 
		'\x2', '\x499', 'q', '\x3', '\x2', '\x2', '\x2', '\x49A', '\x49B', '\a', 
		'\x11', '\x2', '\x2', '\x49B', '\x4AB', '\a', '\x82', '\x2', '\x2', '\x49C', 
		'\x49D', '\a', '\x1B', '\x2', '\x2', '\x49D', '\x4AB', '\a', '\x82', '\x2', 
		'\x2', '\x49E', '\x4A0', '\a', '=', '\x2', '\x2', '\x49F', '\x4A1', '\x5', 
		'X', '-', '\x2', '\x4A0', '\x49F', '\x3', '\x2', '\x2', '\x2', '\x4A0', 
		'\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4A1', '\x4A2', '\x3', '\x2', '\x2', 
		'\x2', '\x4A2', '\x4AB', '\a', '\x82', '\x2', '\x2', '\x4A3', '\x4A4', 
		'\a', '=', '\x2', '\x2', '\x4A4', '\x4A5', '\x5', '\x136', '\x9C', '\x2', 
		'\x4A5', '\x4A6', '\a', '\x82', '\x2', '\x2', '\x4A6', '\x4AB', '\x3', 
		'\x2', '\x2', '\x2', '\x4A7', '\x4A8', '\a', ',', '\x2', '\x2', '\x4A8', 
		'\x4A9', '\a', '\x87', '\x2', '\x2', '\x4A9', '\x4AB', '\a', '\x82', '\x2', 
		'\x2', '\x4AA', '\x49A', '\x3', '\x2', '\x2', '\x2', '\x4AA', '\x49C', 
		'\x3', '\x2', '\x2', '\x2', '\x4AA', '\x49E', '\x3', '\x2', '\x2', '\x2', 
		'\x4AA', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4A7', '\x3', 
		'\x2', '\x2', '\x2', '\x4AB', 's', '\x3', '\x2', '\x2', '\x2', '\x4AC', 
		'\x4AD', '\x5', 'z', '>', '\x2', '\x4AD', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x4AE', '\x4AF', '\b', '<', '\x1', '\x2', '\x4AF', '\x4B0', '\x5', 'x', 
		'=', '\x2', '\x4B0', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4B2', 
		'\f', '\x3', '\x2', '\x2', '\x4B2', '\x4B4', '\x5', 'x', '=', '\x2', '\x4B3', 
		'\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B7', '\x3', '\x2', '\x2', 
		'\x2', '\x4B5', '\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4B5', '\x4B6', 
		'\x3', '\x2', '\x2', '\x2', '\x4B6', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x4B7', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4C3', '\x5', 
		'z', '>', '\x2', '\x4B9', '\x4C3', '\x5', '\x110', '\x89', '\x2', '\x4BA', 
		'\x4C3', '\x5', '\x172', '\xBA', '\x2', '\x4BB', '\x4C3', '\x5', '\x186', 
		'\xC4', '\x2', '\x4BC', '\x4C3', '\x5', '\x188', '\xC5', '\x2', '\x4BD', 
		'\x4C3', '\x5', '\xCE', 'h', '\x2', '\x4BE', '\x4C3', '\x5', '\xB6', '\\', 
		'\x2', '\x4BF', '\x4C3', '\x5', '\x82', '\x42', '\x2', '\x4C0', '\x4C3', 
		'\x5', '\x84', '\x43', '\x2', '\x4C1', '\x4C3', '\x5', '\x112', '\x8A', 
		'\x2', '\x4C2', '\x4B8', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4B9', 
		'\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4BA', '\x3', '\x2', '\x2', '\x2', 
		'\x4C2', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4BC', '\x3', 
		'\x2', '\x2', '\x2', '\x4C2', '\x4BD', '\x3', '\x2', '\x2', '\x2', '\x4C2', 
		'\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4BF', '\x3', '\x2', '\x2', 
		'\x2', '\x4C2', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C1', 
		'\x3', '\x2', '\x2', '\x2', '\x4C3', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x4C4', '\x4CD', '\x5', '~', '@', '\x2', '\x4C5', '\x4CD', '\x5', '\xCC', 
		'g', '\x2', '\x4C6', '\x4CD', '\x5', '\xC4', '\x63', '\x2', '\x4C7', '\x4CD', 
		'\x5', '\xC8', '\x65', '\x2', '\x4C8', '\x4CD', '\x5', '\xCA', '\x66', 
		'\x2', '\x4C9', '\x4CD', '\x5', '\x80', '\x41', '\x2', '\x4CA', '\x4CD', 
		'\x5', '|', '?', '\x2', '\x4CB', '\x4CD', '\x5', '\xA6', 'T', '\x2', '\x4CC', 
		'\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4C5', '\x3', '\x2', '\x2', 
		'\x2', '\x4CC', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4C7', 
		'\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4C8', '\x3', '\x2', '\x2', '\x2', 
		'\x4CC', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4CA', '\x3', 
		'\x2', '\x2', '\x2', '\x4CC', '\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4CD', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\a', 'Q', '\x2', '\x2', 
		'\x4CF', '\x4D1', '\a', '\x87', '\x2', '\x2', '\x4D0', '\x4D2', '\x5', 
		'\xD0', 'i', '\x2', '\x4D1', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D1', 
		'\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D3', '\x3', '\x2', '\x2', 
		'\x2', '\x4D3', '\x4D4', '\a', 'g', '\x2', '\x2', '\x4D4', '\x4D5', '\x5', 
		'\xFE', '\x80', '\x2', '\x4D5', '\x4D6', '\a', '\x82', '\x2', '\x2', '\x4D6', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4D9', '\x5', '\x88', '\x45', 
		'\x2', '\x4D8', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4D9', 
		'\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4DB', '\x3', '\x2', '\x2', '\x2', 
		'\x4DA', '\x4DC', '\x5', '\xE6', 't', '\x2', '\x4DB', '\x4DA', '\x3', 
		'\x2', '\x2', '\x2', '\x4DB', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DC', 
		'\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4E6', '\a', '\x82', '\x2', 
		'\x2', '\x4DE', '\x4E0', '\x5', '\xD0', 'i', '\x2', '\x4DF', '\x4E1', 
		'\x5', '\x88', '\x45', '\x2', '\x4E0', '\x4DF', '\x3', '\x2', '\x2', '\x2', 
		'\x4E0', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E2', '\x3', 
		'\x2', '\x2', '\x2', '\x4E2', '\x4E3', '\x5', '\xE6', 't', '\x2', '\x4E3', 
		'\x4E4', '\a', '\x82', '\x2', '\x2', '\x4E4', '\x4E6', '\x3', '\x2', '\x2', 
		'\x2', '\x4E5', '\x4D8', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4DE', 
		'\x3', '\x2', '\x2', '\x2', '\x4E6', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x4E7', '\x4E8', '\a', '\x42', '\x2', '\x2', '\x4E8', '\x4E9', '\a', 
		'W', '\x2', '\x2', '\x4E9', '\x4EA', '\x5', 'Z', '.', '\x2', '\x4EA', 
		'\x4EB', '\a', '|', '\x2', '\x2', '\x4EB', '\x4EC', '\a', '\x90', '\x2', 
		'\x2', '\x4EC', '\x4ED', '\a', 'X', '\x2', '\x2', '\x4ED', '\x4EE', '\a', 
		'\x82', '\x2', '\x2', '\x4EE', '\x81', '\x3', '\x2', '\x2', '\x2', '\x4EF', 
		'\x4F0', '\a', '\x82', '\x2', '\x2', '\x4F0', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x4F1', '\x4F2', '\x5', '\xD0', 'i', '\x2', '\x4F2', '\x4F3', 
		'\a', '\x82', '\x2', '\x2', '\x4F3', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x4F4', '\x4FB', '\x5', '\x8A', '\x46', '\x2', '\x4F5', '\x4FB', '\x5', 
		'\x90', 'I', '\x2', '\x4F6', '\x4FB', '\x5', '\x8C', 'G', '\x2', '\x4F7', 
		'\x4FB', '\a', '+', '\x2', '\x2', '\x4F8', '\x4FB', '\a', 'L', '\x2', 
		'\x2', '\x4F9', '\x4FB', '\a', '\x19', '\x2', '\x2', '\x4FA', '\x4F4', 
		'\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4F5', '\x3', '\x2', '\x2', '\x2', 
		'\x4FA', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4F7', '\x3', 
		'\x2', '\x2', '\x2', '\x4FA', '\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4FA', 
		'\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x4FC', '\x4FE', '\x5', '\x86', '\x44', '\x2', '\x4FD', '\x4FF', 
		'\x5', '\xD0', 'i', '\x2', '\x4FE', '\x4FD', '\x3', '\x2', '\x2', '\x2', 
		'\x4FE', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x504', '\x3', 
		'\x2', '\x2', '\x2', '\x500', '\x501', '\x5', '\x86', '\x44', '\x2', '\x501', 
		'\x502', '\x5', '\x88', '\x45', '\x2', '\x502', '\x504', '\x3', '\x2', 
		'\x2', '\x2', '\x503', '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x503', '\x500', 
		'\x3', '\x2', '\x2', '\x2', '\x504', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x505', '\x506', '\t', '\x4', '\x2', '\x2', '\x506', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x507', '\x508', '\t', '\x5', '\x2', '\x2', '\x508', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x509', '\x50A', '\a', '\x87', '\x2', '\x2', 
		'\x50A', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x50F', '\x5', 
		'\x92', 'J', '\x2', '\x50C', '\x50F', '\x5', '\x13A', '\x9E', '\x2', '\x50D', 
		'\x50F', '\x5', '\xA2', 'R', '\x2', '\x50E', '\x50B', '\x3', '\x2', '\x2', 
		'\x2', '\x50E', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x50D', 
		'\x3', '\x2', '\x2', '\x2', '\x50F', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x510', '\x515', '\x5', '\x98', 'M', '\x2', '\x511', '\x515', '\x5', 
		'\x9E', 'P', '\x2', '\x512', '\x515', '\x5', '\x184', '\xC3', '\x2', '\x513', 
		'\x515', '\x5', '\xF8', '}', '\x2', '\x514', '\x510', '\x3', '\x2', '\x2', 
		'\x2', '\x514', '\x511', '\x3', '\x2', '\x2', '\x2', '\x514', '\x512', 
		'\x3', '\x2', '\x2', '\x2', '\x514', '\x513', '\x3', '\x2', '\x2', '\x2', 
		'\x515', '\x93', '\x3', '\x2', '\x2', '\x2', '\x516', '\x518', '\x5', 
		'\x90', 'I', '\x2', '\x517', '\x519', '\x5', '\xD0', 'i', '\x2', '\x518', 
		'\x517', '\x3', '\x2', '\x2', '\x2', '\x518', '\x519', '\x3', '\x2', '\x2', 
		'\x2', '\x519', '\x51E', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x51B', 
		'\x5', '\x90', 'I', '\x2', '\x51B', '\x51C', '\x5', '\x94', 'K', '\x2', 
		'\x51C', '\x51E', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x516', '\x3', 
		'\x2', '\x2', '\x2', '\x51D', '\x51A', '\x3', '\x2', '\x2', '\x2', '\x51E', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x521', '\x5', '\x92', 'J', 
		'\x2', '\x520', '\x522', '\x5', '\xD0', 'i', '\x2', '\x521', '\x520', 
		'\x3', '\x2', '\x2', '\x2', '\x521', '\x522', '\x3', '\x2', '\x2', '\x2', 
		'\x522', '\x527', '\x3', '\x2', '\x2', '\x2', '\x523', '\x524', '\x5', 
		'\x92', 'J', '\x2', '\x524', '\x525', '\x5', '\x96', 'L', '\x2', '\x525', 
		'\x527', '\x3', '\x2', '\x2', '\x2', '\x526', '\x51F', '\x3', '\x2', '\x2', 
		'\x2', '\x526', '\x523', '\x3', '\x2', '\x2', '\x2', '\x527', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x528', '\x52A', '\x5', '\f', '\a', '\x2', 
		'\x529', '\x528', '\x3', '\x2', '\x2', '\x2', '\x529', '\x52A', '\x3', 
		'\x2', '\x2', '\x2', '\x52A', '\x52B', '\x3', '\x2', '\x2', '\x2', '\x52B', 
		'\x540', '\x5', '\x9A', 'N', '\x2', '\x52C', '\x52D', '\x5', '\f', '\a', 
		'\x2', '\x52D', '\x52E', '\a', '\x46', '\x2', '\x2', '\x52E', '\x52F', 
		'\x5', '\x17A', '\xBE', '\x2', '\x52F', '\x540', '\x3', '\x2', '\x2', 
		'\x2', '\x530', '\x540', '\a', '\x14', '\x2', '\x2', '\x531', '\x540', 
		'\a', '\x15', '\x2', '\x2', '\x532', '\x540', '\a', '\x16', '\x2', '\x2', 
		'\x533', '\x540', '\a', 'U', '\x2', '\x2', '\x534', '\x540', '\a', '\x10', 
		'\x2', '\x2', '\x535', '\x540', '\a', '>', '\x2', '\x2', '\x536', '\x540', 
		'\a', '/', '\x2', '\x2', '\x537', '\x540', '\a', '\x30', '\x2', '\x2', 
		'\x538', '\x540', '\a', '?', '\x2', '\x2', '\x539', '\x540', '\a', 'P', 
		'\x2', '\x2', '\x53A', '\x540', '\a', ')', '\x2', '\x2', '\x53B', '\x540', 
		'\a', ' ', '\x2', '\x2', '\x53C', '\x540', '\a', 'S', '\x2', '\x2', '\x53D', 
		'\x540', '\a', '\xF', '\x2', '\x2', '\x53E', '\x540', '\x5', '\x9C', 'O', 
		'\x2', '\x53F', '\x529', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x52C', 
		'\x3', '\x2', '\x2', '\x2', '\x53F', '\x530', '\x3', '\x2', '\x2', '\x2', 
		'\x53F', '\x531', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x532', '\x3', 
		'\x2', '\x2', '\x2', '\x53F', '\x533', '\x3', '\x2', '\x2', '\x2', '\x53F', 
		'\x534', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x535', '\x3', '\x2', '\x2', 
		'\x2', '\x53F', '\x536', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x537', 
		'\x3', '\x2', '\x2', '\x2', '\x53F', '\x538', '\x3', '\x2', '\x2', '\x2', 
		'\x53F', '\x539', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x53A', '\x3', 
		'\x2', '\x2', '\x2', '\x53F', '\x53B', '\x3', '\x2', '\x2', '\x2', '\x53F', 
		'\x53C', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x53D', '\x3', '\x2', '\x2', 
		'\x2', '\x53F', '\x53E', '\x3', '\x2', '\x2', '\x2', '\x540', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x541', '\x546', '\x5', '\x138', '\x9D', 
		'\x2', '\x542', '\x546', '\x5', '\xA0', 'Q', '\x2', '\x543', '\x546', 
		'\x5', '\x8E', 'H', '\x2', '\x544', '\x546', '\x5', '\x17A', '\xBE', '\x2', 
		'\x545', '\x541', '\x3', '\x2', '\x2', '\x2', '\x545', '\x542', '\x3', 
		'\x2', '\x2', '\x2', '\x545', '\x543', '\x3', '\x2', '\x2', '\x2', '\x545', 
		'\x544', '\x3', '\x2', '\x2', '\x2', '\x546', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x547', '\x548', '\a', '\x1C', '\x2', '\x2', '\x548', '\x549', 
		'\a', 'W', '\x2', '\x2', '\x549', '\x54A', '\x5', 'X', '-', '\x2', '\x54A', 
		'\x54B', '\a', 'X', '\x2', '\x2', '\x54B', '\x551', '\x3', '\x2', '\x2', 
		'\x2', '\x54C', '\x54D', '\a', '\x1C', '\x2', '\x2', '\x54D', '\x54E', 
		'\a', 'W', '\x2', '\x2', '\x54E', '\x54F', '\a', '\xF', '\x2', '\x2', 
		'\x54F', '\x551', '\a', 'X', '\x2', '\x2', '\x550', '\x547', '\x3', '\x2', 
		'\x2', '\x2', '\x550', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x551', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x552', '\x554', '\x5', '\x144', '\xA3', 
		'\x2', '\x553', '\x555', '\x5', '\xD0', 'i', '\x2', '\x554', '\x553', 
		'\x3', '\x2', '\x2', '\x2', '\x554', '\x555', '\x3', '\x2', '\x2', '\x2', 
		'\x555', '\x557', '\x3', '\x2', '\x2', '\x2', '\x556', '\x558', '\x5', 
		'\f', '\a', '\x2', '\x557', '\x556', '\x3', '\x2', '\x2', '\x2', '\x557', 
		'\x558', '\x3', '\x2', '\x2', '\x2', '\x558', '\x559', '\x3', '\x2', '\x2', 
		'\x2', '\x559', '\x55A', '\a', '\x87', '\x2', '\x2', '\x55A', '\x56B', 
		'\x3', '\x2', '\x2', '\x2', '\x55B', '\x55C', '\x5', '\x144', '\xA3', 
		'\x2', '\x55C', '\x55D', '\x5', '\x17A', '\xBE', '\x2', '\x55D', '\x56B', 
		'\x3', '\x2', '\x2', '\x2', '\x55E', '\x55F', '\x5', '\x144', '\xA3', 
		'\x2', '\x55F', '\x561', '\x5', '\f', '\a', '\x2', '\x560', '\x562', '\a', 
		'\x46', '\x2', '\x2', '\x561', '\x560', '\x3', '\x2', '\x2', '\x2', '\x561', 
		'\x562', '\x3', '\x2', '\x2', '\x2', '\x562', '\x563', '\x3', '\x2', '\x2', 
		'\x2', '\x563', '\x564', '\x5', '\x17A', '\xBE', '\x2', '\x564', '\x56B', 
		'\x3', '\x2', '\x2', '\x2', '\x565', '\x567', '\a', '#', '\x2', '\x2', 
		'\x566', '\x568', '\x5', '\f', '\a', '\x2', '\x567', '\x566', '\x3', '\x2', 
		'\x2', '\x2', '\x567', '\x568', '\x3', '\x2', '\x2', '\x2', '\x568', '\x569', 
		'\x3', '\x2', '\x2', '\x2', '\x569', '\x56B', '\a', '\x87', '\x2', '\x2', 
		'\x56A', '\x552', '\x3', '\x2', '\x2', '\x2', '\x56A', '\x55B', '\x3', 
		'\x2', '\x2', '\x2', '\x56A', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x56A', 
		'\x565', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x56C', '\x56D', '\a', '\x87', '\x2', '\x2', '\x56D', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x56E', '\x56F', '\x5', '\xA4', 'S', '\x2', 
		'\x56F', '\x571', '\a', '[', '\x2', '\x2', '\x570', '\x572', '\x5', '\xAC', 
		'W', '\x2', '\x571', '\x570', '\x3', '\x2', '\x2', '\x2', '\x571', '\x572', 
		'\x3', '\x2', '\x2', '\x2', '\x572', '\x573', '\x3', '\x2', '\x2', '\x2', 
		'\x573', '\x574', '\a', '\\', '\x2', '\x2', '\x574', '\x57C', '\x3', '\x2', 
		'\x2', '\x2', '\x575', '\x576', '\x5', '\xA4', 'S', '\x2', '\x576', '\x577', 
		'\a', '[', '\x2', '\x2', '\x577', '\x578', '\x5', '\xAC', 'W', '\x2', 
		'\x578', '\x579', '\a', '|', '\x2', '\x2', '\x579', '\x57A', '\a', '\\', 
		'\x2', '\x2', '\x57A', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57B', '\x56E', 
		'\x3', '\x2', '\x2', '\x2', '\x57B', '\x575', '\x3', '\x2', '\x2', '\x2', 
		'\x57C', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x57D', '\x57F', '\x5', 
		'\xA8', 'U', '\x2', '\x57E', '\x580', '\x5', '\xD0', 'i', '\x2', '\x57F', 
		'\x57E', '\x3', '\x2', '\x2', '\x2', '\x57F', '\x580', '\x3', '\x2', '\x2', 
		'\x2', '\x580', '\x582', '\x3', '\x2', '\x2', '\x2', '\x581', '\x583', 
		'\a', '\x87', '\x2', '\x2', '\x582', '\x581', '\x3', '\x2', '\x2', '\x2', 
		'\x582', '\x583', '\x3', '\x2', '\x2', '\x2', '\x583', '\x585', '\x3', 
		'\x2', '\x2', '\x2', '\x584', '\x586', '\x5', '\xAA', 'V', '\x2', '\x585', 
		'\x584', '\x3', '\x2', '\x2', '\x2', '\x585', '\x586', '\x3', '\x2', '\x2', 
		'\x2', '\x586', '\x591', '\x3', '\x2', '\x2', '\x2', '\x587', '\x589', 
		'\x5', '\xA8', 'U', '\x2', '\x588', '\x58A', '\x5', '\xD0', 'i', '\x2', 
		'\x589', '\x588', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', '\x3', 
		'\x2', '\x2', '\x2', '\x58A', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x58B', 
		'\x58C', '\x5', '\f', '\a', '\x2', '\x58C', '\x58E', '\a', '\x87', '\x2', 
		'\x2', '\x58D', '\x58F', '\x5', '\xAA', 'V', '\x2', '\x58E', '\x58D', 
		'\x3', '\x2', '\x2', '\x2', '\x58E', '\x58F', '\x3', '\x2', '\x2', '\x2', 
		'\x58F', '\x591', '\x3', '\x2', '\x2', '\x2', '\x590', '\x57D', '\x3', 
		'\x2', '\x2', '\x2', '\x590', '\x587', '\x3', '\x2', '\x2', '\x2', '\x591', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x592', '\x594', '\x5', '\xA8', 'U', 
		'\x2', '\x593', '\x595', '\x5', '\xD0', 'i', '\x2', '\x594', '\x593', 
		'\x3', '\x2', '\x2', '\x2', '\x594', '\x595', '\x3', '\x2', '\x2', '\x2', 
		'\x595', '\x596', '\x3', '\x2', '\x2', '\x2', '\x596', '\x598', '\a', 
		'\x87', '\x2', '\x2', '\x597', '\x599', '\x5', '\xAA', 'V', '\x2', '\x598', 
		'\x597', '\x3', '\x2', '\x2', '\x2', '\x598', '\x599', '\x3', '\x2', '\x2', 
		'\x2', '\x599', '\x59A', '\x3', '\x2', '\x2', '\x2', '\x59A', '\x59B', 
		'\a', '\x82', '\x2', '\x2', '\x59B', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x59C', '\x5A2', '\a', '#', '\x2', '\x2', '\x59D', '\x59E', '\a', '#', 
		'\x2', '\x2', '\x59E', '\x5A2', '\a', '\x17', '\x2', '\x2', '\x59F', '\x5A0', 
		'\a', '#', '\x2', '\x2', '\x5A0', '\x5A2', '\a', '\x44', '\x2', '\x2', 
		'\x5A1', '\x59C', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x59D', '\x3', 
		'\x2', '\x2', '\x2', '\x5A1', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x5A2', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A4', '\a', '\x80', '\x2', 
		'\x2', '\x5A4', '\x5A5', '\x5', '\x94', 'K', '\x2', '\x5A5', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x5A6', '\x5A7', '\b', 'W', '\x1', '\x2', '\x5A7', 
		'\x5A8', '\x5', '\xAE', 'X', '\x2', '\x5A8', '\x5AE', '\x3', '\x2', '\x2', 
		'\x2', '\x5A9', '\x5AA', '\f', '\x3', '\x2', '\x2', '\x5AA', '\x5AB', 
		'\a', '|', '\x2', '\x2', '\x5AB', '\x5AD', '\x5', '\xAE', 'X', '\x2', 
		'\x5AC', '\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5AD', '\x5B0', '\x3', 
		'\x2', '\x2', '\x2', '\x5AE', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AE', 
		'\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\x5B0', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B7', 
		'\x5', '\xB0', 'Y', '\x2', '\x5B2', '\x5B3', '\x5', '\xB0', 'Y', '\x2', 
		'\x5B3', '\x5B4', '\a', 'g', '\x2', '\x2', '\x5B4', '\x5B5', '\x5', 'Z', 
		'.', '\x2', '\x5B5', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B1', 
		'\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B2', '\x3', '\x2', '\x2', '\x2', 
		'\x5B7', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5B9', '\a', '\x87', 
		'\x2', '\x2', '\x5B9', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5BD', 
		'\x5', '\xB4', '[', '\x2', '\x5BB', '\x5BD', '\x5', '\xC2', '\x62', '\x2', 
		'\x5BC', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BB', '\x3', 
		'\x2', '\x2', '\x2', '\x5BD', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x5BE', 
		'\x5BF', '\a', '\x87', '\x2', '\x2', '\x5BF', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x5C0', '\x5C3', '\x5', '\xB8', ']', '\x2', '\x5C1', '\x5C3', 
		'\x5', '\xBE', '`', '\x2', '\x5C2', '\x5C0', '\x3', '\x2', '\x2', '\x2', 
		'\x5C2', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\x5C4', '\x5C7', '\x5', '\xBA', '^', '\x2', '\x5C5', 
		'\x5C7', '\x5', '\xBC', '_', '\x2', '\x5C6', '\x5C4', '\x3', '\x2', '\x2', 
		'\x2', '\x5C6', '\x5C5', '\x3', '\x2', '\x2', '\x2', '\x5C7', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5CA', '\a', '.', '\x2', '\x2', 
		'\x5C9', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5C9', '\x5CA', '\x3', 
		'\x2', '\x2', '\x2', '\x5CA', '\x5CB', '\x3', '\x2', '\x2', '\x2', '\x5CB', 
		'\x5CC', '\a', '\x32', '\x2', '\x2', '\x5CC', '\x5CD', '\a', '\x87', '\x2', 
		'\x2', '\x5CD', '\x5CE', '\a', '[', '\x2', '\x2', '\x5CE', '\x5CF', '\x5', 
		'\xC0', '\x61', '\x2', '\x5CF', '\x5D0', '\a', '\\', '\x2', '\x2', '\x5D0', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x5D1', '\x5D3', '\a', '.', '\x2', 
		'\x2', '\x5D2', '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5D2', '\x5D3', 
		'\x3', '\x2', '\x2', '\x2', '\x5D3', '\x5D4', '\x3', '\x2', '\x2', '\x2', 
		'\x5D4', '\x5D5', '\a', '\x32', '\x2', '\x2', '\x5D5', '\x5D6', '\x5', 
		'\xB4', '[', '\x2', '\x5D6', '\x5D7', '\a', '[', '\x2', '\x2', '\x5D7', 
		'\x5D8', '\x5', '\xC0', '\x61', '\x2', '\x5D8', '\x5D9', '\a', '\\', '\x2', 
		'\x2', '\x5D9', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5DC', 
		'\a', '.', '\x2', '\x2', '\x5DB', '\x5DA', '\x3', '\x2', '\x2', '\x2', 
		'\x5DB', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DD', '\x3', 
		'\x2', '\x2', '\x2', '\x5DD', '\x5DE', '\a', '\x32', '\x2', '\x2', '\x5DE', 
		'\x5DF', '\a', '[', '\x2', '\x2', '\x5DF', '\x5E0', '\x5', '\xC0', '\x61', 
		'\x2', '\x5E0', '\x5E1', '\a', '\\', '\x2', '\x2', '\x5E1', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x5E2', '\x5E4', '\x5', 'v', '<', '\x2', '\x5E3', 
		'\x5E2', '\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E4', '\x3', '\x2', '\x2', 
		'\x2', '\x5E4', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x5E5', '\x5E6', 
		'\a', '\x87', '\x2', '\x2', '\x5E6', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x5E7', '\x5E8', '\a', '\x32', '\x2', '\x2', '\x5E8', '\x5E9', '\a', 
		'\x87', '\x2', '\x2', '\x5E9', '\x5EA', '\a', 'g', '\x2', '\x2', '\x5EA', 
		'\x5EB', '\x5', '\xC6', '\x64', '\x2', '\x5EB', '\x5EC', '\a', '\x82', 
		'\x2', '\x2', '\x5EC', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5EF', 
		'\x5', '\f', '\a', '\x2', '\x5EE', '\x5ED', '\x3', '\x2', '\x2', '\x2', 
		'\x5EE', '\x5EF', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5F0', '\x3', 
		'\x2', '\x2', '\x2', '\x5F0', '\x5F1', '\x5', '\xB2', 'Z', '\x2', '\x5F1', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F4', '\a', 'Q', '\x2', 
		'\x2', '\x5F3', '\x5F5', '\a', 'N', '\x2', '\x2', '\x5F4', '\x5F3', '\x3', 
		'\x2', '\x2', '\x2', '\x5F4', '\x5F5', '\x3', '\x2', '\x2', '\x2', '\x5F5', 
		'\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F7', '\x5', '\f', '\a', 
		'\x2', '\x5F7', '\x5F8', '\x5', '\b', '\x5', '\x2', '\x5F8', '\x5F9', 
		'\a', '\x82', '\x2', '\x2', '\x5F9', '\x600', '\x3', '\x2', '\x2', '\x2', 
		'\x5FA', '\x5FB', '\a', 'Q', '\x2', '\x2', '\x5FB', '\x5FC', '\a', '\x81', 
		'\x2', '\x2', '\x5FC', '\x5FD', '\x5', '\b', '\x5', '\x2', '\x5FD', '\x5FE', 
		'\a', '\x82', '\x2', '\x2', '\x5FE', '\x600', '\x3', '\x2', '\x2', '\x2', 
		'\x5FF', '\x5F2', '\x3', '\x2', '\x2', '\x2', '\x5FF', '\x5FA', '\x3', 
		'\x2', '\x2', '\x2', '\x600', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x601', 
		'\x603', '\x5', '\xD0', 'i', '\x2', '\x602', '\x601', '\x3', '\x2', '\x2', 
		'\x2', '\x602', '\x603', '\x3', '\x2', '\x2', '\x2', '\x603', '\x604', 
		'\x3', '\x2', '\x2', '\x2', '\x604', '\x605', '\a', 'Q', '\x2', '\x2', 
		'\x605', '\x607', '\a', '\x32', '\x2', '\x2', '\x606', '\x608', '\x5', 
		'\f', '\a', '\x2', '\x607', '\x606', '\x3', '\x2', '\x2', '\x2', '\x607', 
		'\x608', '\x3', '\x2', '\x2', '\x2', '\x608', '\x609', '\x3', '\x2', '\x2', 
		'\x2', '\x609', '\x60A', '\x5', '\xB2', 'Z', '\x2', '\x60A', '\x60B', 
		'\a', '\x82', '\x2', '\x2', '\x60B', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x60C', '\x60D', '\a', '\xE', '\x2', '\x2', '\x60D', '\x60E', '\a', 'W', 
		'\x2', '\x2', '\x60E', '\x60F', '\a', '\x90', '\x2', '\x2', '\x60F', '\x610', 
		'\a', 'X', '\x2', '\x2', '\x610', '\x611', '\a', '\x82', '\x2', '\x2', 
		'\x611', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x612', '\x613', '\a', '&', 
		'\x2', '\x2', '\x613', '\x614', '\a', '\x90', '\x2', '\x2', '\x614', '\x616', 
		'\a', '[', '\x2', '\x2', '\x615', '\x617', '\x5', 'v', '<', '\x2', '\x616', 
		'\x615', '\x3', '\x2', '\x2', '\x2', '\x616', '\x617', '\x3', '\x2', '\x2', 
		'\x2', '\x617', '\x618', '\x3', '\x2', '\x2', '\x2', '\x618', '\x61D', 
		'\a', '\\', '\x2', '\x2', '\x619', '\x61A', '\a', '&', '\x2', '\x2', '\x61A', 
		'\x61B', '\a', '\x90', '\x2', '\x2', '\x61B', '\x61D', '\x5', 'x', '=', 
		'\x2', '\x61C', '\x612', '\x3', '\x2', '\x2', '\x2', '\x61C', '\x619', 
		'\x3', '\x2', '\x2', '\x2', '\x61D', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\x61E', '\x61F', '\b', 'i', '\x1', '\x2', '\x61F', '\x620', '\x5', '\xD2', 
		'j', '\x2', '\x620', '\x625', '\x3', '\x2', '\x2', '\x2', '\x621', '\x622', 
		'\f', '\x3', '\x2', '\x2', '\x622', '\x624', '\x5', '\xD2', 'j', '\x2', 
		'\x623', '\x621', '\x3', '\x2', '\x2', '\x2', '\x624', '\x627', '\x3', 
		'\x2', '\x2', '\x2', '\x625', '\x623', '\x3', '\x2', '\x2', '\x2', '\x625', 
		'\x626', '\x3', '\x2', '\x2', '\x2', '\x626', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\x627', '\x625', '\x3', '\x2', '\x2', '\x2', '\x628', '\x629', 
		'\a', 'Y', '\x2', '\x2', '\x629', '\x62A', '\a', 'Y', '\x2', '\x2', '\x62A', 
		'\x62B', '\x5', '\xD6', 'l', '\x2', '\x62B', '\x62C', '\a', 'Z', '\x2', 
		'\x2', '\x62C', '\x62D', '\a', 'Z', '\x2', '\x2', '\x62D', '\x630', '\x3', 
		'\x2', '\x2', '\x2', '\x62E', '\x630', '\x5', '\xD4', 'k', '\x2', '\x62F', 
		'\x628', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x62E', '\x3', '\x2', '\x2', 
		'\x2', '\x630', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x631', '\x632', 
		'\a', '\f', '\x2', '\x2', '\x632', '\x633', '\a', 'W', '\x2', '\x2', '\x633', 
		'\x635', '\x5', '\xFE', '\x80', '\x2', '\x634', '\x636', '\a', '\x85', 
		'\x2', '\x2', '\x635', '\x634', '\x3', '\x2', '\x2', '\x2', '\x635', '\x636', 
		'\x3', '\x2', '\x2', '\x2', '\x636', '\x637', '\x3', '\x2', '\x2', '\x2', 
		'\x637', '\x638', '\a', 'X', '\x2', '\x2', '\x638', '\x642', '\x3', '\x2', 
		'\x2', '\x2', '\x639', '\x63A', '\a', '\f', '\x2', '\x2', '\x63A', '\x63B', 
		'\a', 'W', '\x2', '\x2', '\x63B', '\x63D', '\x5', 'Z', '.', '\x2', '\x63C', 
		'\x63E', '\a', '\x85', '\x2', '\x2', '\x63D', '\x63C', '\x3', '\x2', '\x2', 
		'\x2', '\x63D', '\x63E', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x63F', 
		'\x3', '\x2', '\x2', '\x2', '\x63F', '\x640', '\a', 'X', '\x2', '\x2', 
		'\x640', '\x642', '\x3', '\x2', '\x2', '\x2', '\x641', '\x631', '\x3', 
		'\x2', '\x2', '\x2', '\x641', '\x639', '\x3', '\x2', '\x2', '\x2', '\x642', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\x643', '\x645', '\b', 'l', '\x1', 
		'\x2', '\x644', '\x646', '\x5', '\xD8', 'm', '\x2', '\x645', '\x644', 
		'\x3', '\x2', '\x2', '\x2', '\x645', '\x646', '\x3', '\x2', '\x2', '\x2', 
		'\x646', '\x64B', '\x3', '\x2', '\x2', '\x2', '\x647', '\x648', '\x5', 
		'\xD8', 'm', '\x2', '\x648', '\x649', '\a', '\x85', '\x2', '\x2', '\x649', 
		'\x64B', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x643', '\x3', '\x2', '\x2', 
		'\x2', '\x64A', '\x647', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x658', 
		'\x3', '\x2', '\x2', '\x2', '\x64C', '\x64D', '\f', '\x5', '\x2', '\x2', 
		'\x64D', '\x64F', '\a', '|', '\x2', '\x2', '\x64E', '\x650', '\x5', '\xD8', 
		'm', '\x2', '\x64F', '\x64E', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x650', 
		'\x3', '\x2', '\x2', '\x2', '\x650', '\x657', '\x3', '\x2', '\x2', '\x2', 
		'\x651', '\x652', '\f', '\x3', '\x2', '\x2', '\x652', '\x653', '\a', '|', 
		'\x2', '\x2', '\x653', '\x654', '\x5', '\xD8', 'm', '\x2', '\x654', '\x655', 
		'\a', '\x85', '\x2', '\x2', '\x655', '\x657', '\x3', '\x2', '\x2', '\x2', 
		'\x656', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x656', '\x651', '\x3', 
		'\x2', '\x2', '\x2', '\x657', '\x65A', '\x3', '\x2', '\x2', '\x2', '\x658', 
		'\x656', '\x3', '\x2', '\x2', '\x2', '\x658', '\x659', '\x3', '\x2', '\x2', 
		'\x2', '\x659', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x658', 
		'\x3', '\x2', '\x2', '\x2', '\x65B', '\x65D', '\x5', '\xDA', 'n', '\x2', 
		'\x65C', '\x65E', '\x5', '\xE0', 'q', '\x2', '\x65D', '\x65C', '\x3', 
		'\x2', '\x2', '\x2', '\x65D', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x65E', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x662', '\a', '\x87', '\x2', 
		'\x2', '\x660', '\x662', '\x5', '\xDC', 'o', '\x2', '\x661', '\x65F', 
		'\x3', '\x2', '\x2', '\x2', '\x661', '\x660', '\x3', '\x2', '\x2', '\x2', 
		'\x662', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x663', '\x664', '\x5', 
		'\xDE', 'p', '\x2', '\x664', '\x665', '\a', '\x81', '\x2', '\x2', '\x665', 
		'\x666', '\a', '\x87', '\x2', '\x2', '\x666', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\x667', '\x668', '\a', '\x87', '\x2', '\x2', '\x668', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\x669', '\x66A', '\a', 'W', '\x2', '\x2', 
		'\x66A', '\x66B', '\x5', '\xE2', 'r', '\x2', '\x66B', '\x66C', '\a', 'X', 
		'\x2', '\x2', '\x66C', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x66D', '\x66F', 
		'\b', 'r', '\x1', '\x2', '\x66E', '\x670', '\x5', '\xE4', 's', '\x2', 
		'\x66F', '\x66E', '\x3', '\x2', '\x2', '\x2', '\x66F', '\x670', '\x3', 
		'\x2', '\x2', '\x2', '\x670', '\x675', '\x3', '\x2', '\x2', '\x2', '\x671', 
		'\x672', '\f', '\x3', '\x2', '\x2', '\x672', '\x674', '\x5', '\xE4', 's', 
		'\x2', '\x673', '\x671', '\x3', '\x2', '\x2', '\x2', '\x674', '\x677', 
		'\x3', '\x2', '\x2', '\x2', '\x675', '\x673', '\x3', '\x2', '\x2', '\x2', 
		'\x675', '\x676', '\x3', '\x2', '\x2', '\x2', '\x676', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x677', '\x675', '\x3', '\x2', '\x2', '\x2', '\x678', 
		'\x679', '\a', 'W', '\x2', '\x2', '\x679', '\x67A', '\x5', '\xE2', 'r', 
		'\x2', '\x67A', '\x67B', '\a', 'X', '\x2', '\x2', '\x67B', '\x685', '\x3', 
		'\x2', '\x2', '\x2', '\x67C', '\x67D', '\a', 'Y', '\x2', '\x2', '\x67D', 
		'\x67E', '\x5', '\xE2', 'r', '\x2', '\x67E', '\x67F', '\a', 'Z', '\x2', 
		'\x2', '\x67F', '\x685', '\x3', '\x2', '\x2', '\x2', '\x680', '\x681', 
		'\a', '[', '\x2', '\x2', '\x681', '\x682', '\x5', '\xE2', 'r', '\x2', 
		'\x682', '\x683', '\a', '\\', '\x2', '\x2', '\x683', '\x685', '\x3', '\x2', 
		'\x2', '\x2', '\x684', '\x678', '\x3', '\x2', '\x2', '\x2', '\x684', '\x67C', 
		'\x3', '\x2', '\x2', '\x2', '\x684', '\x680', '\x3', '\x2', '\x2', '\x2', 
		'\x685', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x686', '\x687', '\b', 't', 
		'\x1', '\x2', '\x687', '\x688', '\x5', '\xE8', 'u', '\x2', '\x688', '\x68E', 
		'\x3', '\x2', '\x2', '\x2', '\x689', '\x68A', '\f', '\x3', '\x2', '\x2', 
		'\x68A', '\x68B', '\a', '|', '\x2', '\x2', '\x68B', '\x68D', '\x5', '\xE8', 
		'u', '\x2', '\x68C', '\x689', '\x3', '\x2', '\x2', '\x2', '\x68D', '\x690', 
		'\x3', '\x2', '\x2', '\x2', '\x68E', '\x68C', '\x3', '\x2', '\x2', '\x2', 
		'\x68E', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x68F', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\x690', '\x68E', '\x3', '\x2', '\x2', '\x2', '\x691', 
		'\x693', '\x5', '\xEA', 'v', '\x2', '\x692', '\x694', '\x5', '\x12E', 
		'\x98', '\x2', '\x693', '\x692', '\x3', '\x2', '\x2', '\x2', '\x693', 
		'\x694', '\x3', '\x2', '\x2', '\x2', '\x694', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\x695', '\x69B', '\x5', '\xEC', 'w', '\x2', '\x696', '\x697', 
		'\x5', '\xEE', 'x', '\x2', '\x697', '\x698', '\x5', '\xF0', 'y', '\x2', 
		'\x698', '\x699', '\x5', '\xF2', 'z', '\x2', '\x699', '\x69B', '\x3', 
		'\x2', '\x2', '\x2', '\x69A', '\x695', '\x3', '\x2', '\x2', '\x2', '\x69A', 
		'\x696', '\x3', '\x2', '\x2', '\x2', '\x69B', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x69C', '\x6A1', '\x5', '\xEE', 'x', '\x2', '\x69D', '\x69E', 
		'\x5', '\xF4', '{', '\x2', '\x69E', '\x69F', '\x5', '\xEC', 'w', '\x2', 
		'\x69F', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A0', '\x69C', '\x3', 
		'\x2', '\x2', '\x2', '\x6A0', '\x69D', '\x3', '\x2', '\x2', '\x2', '\x6A1', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A3', '\b', 'x', '\x1', 
		'\x2', '\x6A3', '\x6A5', '\x5', '\xFC', '\x7F', '\x2', '\x6A4', '\x6A6', 
		'\x5', '\xD0', 'i', '\x2', '\x6A5', '\x6A4', '\x3', '\x2', '\x2', '\x2', 
		'\x6A5', '\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6AC', '\x3', 
		'\x2', '\x2', '\x2', '\x6A7', '\x6A8', '\a', 'W', '\x2', '\x2', '\x6A8', 
		'\x6A9', '\x5', '\xEC', 'w', '\x2', '\x6A9', '\x6AA', '\a', 'X', '\x2', 
		'\x2', '\x6AA', '\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6A2', 
		'\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6A7', '\x3', '\x2', '\x2', '\x2', 
		'\x6AC', '\x6BA', '\x3', '\x2', '\x2', '\x2', '\x6AD', '\x6AE', '\f', 
		'\x5', '\x2', '\x2', '\x6AE', '\x6B9', '\x5', '\xF0', 'y', '\x2', '\x6AF', 
		'\x6B0', '\f', '\x4', '\x2', '\x2', '\x6B0', '\x6B2', '\a', 'Y', '\x2', 
		'\x2', '\x6B1', '\x6B3', '\x5', 'Z', '.', '\x2', '\x6B2', '\x6B1', '\x3', 
		'\x2', '\x2', '\x2', '\x6B2', '\x6B3', '\x3', '\x2', '\x2', '\x2', '\x6B3', 
		'\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B4', '\x6B6', '\a', 'Z', '\x2', 
		'\x2', '\x6B5', '\x6B7', '\x5', '\xD0', 'i', '\x2', '\x6B6', '\x6B5', 
		'\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B7', '\x3', '\x2', '\x2', '\x2', 
		'\x6B7', '\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6AD', '\x3', 
		'\x2', '\x2', '\x2', '\x6B8', '\x6AF', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6BA', '\x6B8', '\x3', '\x2', '\x2', 
		'\x2', '\x6BA', '\x6BB', '\x3', '\x2', '\x2', '\x2', '\x6BB', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BA', '\x3', '\x2', '\x2', '\x2', 
		'\x6BD', '\x6BE', '\a', 'W', '\x2', '\x2', '\x6BE', '\x6BF', '\x5', '\x10A', 
		'\x86', '\x2', '\x6BF', '\x6C1', '\a', 'X', '\x2', '\x2', '\x6C0', '\x6C2', 
		'\x5', '\xF6', '|', '\x2', '\x6C1', '\x6C0', '\x3', '\x2', '\x2', '\x2', 
		'\x6C1', '\x6C2', '\x3', '\x2', '\x2', '\x2', '\x6C2', '\x6C4', '\x3', 
		'\x2', '\x2', '\x2', '\x6C3', '\x6C5', '\x5', '\xFA', '~', '\x2', '\x6C4', 
		'\x6C3', '\x3', '\x2', '\x2', '\x2', '\x6C4', '\x6C5', '\x3', '\x2', '\x2', 
		'\x2', '\x6C5', '\x6C7', '\x3', '\x2', '\x2', '\x2', '\x6C6', '\x6C8', 
		'\x5', '\x196', '\xCC', '\x2', '\x6C7', '\x6C6', '\x3', '\x2', '\x2', 
		'\x2', '\x6C7', '\x6C8', '\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6CA', 
		'\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6CB', '\x5', '\xD0', 'i', '\x2', 
		'\x6CA', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\x6CB', '\x3', 
		'\x2', '\x2', '\x2', '\x6CB', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x6CC', 
		'\x6CD', '\a', '~', '\x2', '\x2', '\x6CD', '\x6CF', '\x5', '\x96', 'L', 
		'\x2', '\x6CE', '\x6D0', '\x5', '\x100', '\x81', '\x2', '\x6CF', '\x6CE', 
		'\x3', '\x2', '\x2', '\x2', '\x6CF', '\x6D0', '\x3', '\x2', '\x2', '\x2', 
		'\x6D0', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D3', '\a', '_', 
		'\x2', '\x2', '\x6D2', '\x6D4', '\x5', '\xD0', 'i', '\x2', '\x6D3', '\x6D2', 
		'\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\x3', '\x2', '\x2', '\x2', 
		'\x6D4', '\x6D6', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D7', '\x5', 
		'\xF6', '|', '\x2', '\x6D6', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6D6', 
		'\x6D7', '\x3', '\x2', '\x2', '\x2', '\x6D7', '\x6E9', '\x3', '\x2', '\x2', 
		'\x2', '\x6D8', '\x6DA', '\a', '\x63', '\x2', '\x2', '\x6D9', '\x6DB', 
		'\x5', '\xD0', 'i', '\x2', '\x6DA', '\x6D9', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6E9', '\x3', 
		'\x2', '\x2', '\x2', '\x6DC', '\x6DE', '\a', 'x', '\x2', '\x2', '\x6DD', 
		'\x6DF', '\x5', '\xD0', 'i', '\x2', '\x6DE', '\x6DD', '\x3', '\x2', '\x2', 
		'\x2', '\x6DE', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E9', 
		'\x3', '\x2', '\x2', '\x2', '\x6E0', '\x6E1', '\x5', '\f', '\a', '\x2', 
		'\x6E1', '\x6E3', '\a', '_', '\x2', '\x2', '\x6E2', '\x6E4', '\x5', '\xD0', 
		'i', '\x2', '\x6E3', '\x6E2', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E4', 
		'\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E6', '\x3', '\x2', '\x2', '\x2', 
		'\x6E5', '\x6E7', '\x5', '\xF6', '|', '\x2', '\x6E6', '\x6E5', '\x3', 
		'\x2', '\x2', '\x2', '\x6E6', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E7', 
		'\x6E9', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6D1', '\x3', '\x2', '\x2', 
		'\x2', '\x6E8', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6DC', 
		'\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6E0', '\x3', '\x2', '\x2', '\x2', 
		'\x6E9', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EC', '\x5', 
		'\xF8', '}', '\x2', '\x6EB', '\x6ED', '\x5', '\xF6', '|', '\x2', '\x6EC', 
		'\x6EB', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6ED', '\x3', '\x2', '\x2', 
		'\x2', '\x6ED', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x6EE', '\x6EF', 
		'\t', '\x6', '\x2', '\x2', '\x6EF', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\x6F0', '\x6F1', '\t', '\a', '\x2', '\x2', '\x6F1', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\x6F2', '\x6F4', '\a', '\x85', '\x2', '\x2', '\x6F3', '\x6F2', 
		'\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6F4', '\x3', '\x2', '\x2', '\x2', 
		'\x6F4', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6F6', '\x5', 
		'\x6', '\x4', '\x2', '\x6F6', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x6F7', 
		'\x6F9', '\x5', '\x94', 'K', '\x2', '\x6F8', '\x6FA', '\x5', '\x100', 
		'\x81', '\x2', '\x6F9', '\x6F8', '\x3', '\x2', '\x2', '\x2', '\x6F9', 
		'\x6FA', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\x6FB', '\x704', '\x5', '\x102', '\x82', '\x2', '\x6FC', '\x6FE', 
		'\x5', '\x104', '\x83', '\x2', '\x6FD', '\x6FC', '\x3', '\x2', '\x2', 
		'\x2', '\x6FD', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x6FE', '\x6FF', 
		'\x3', '\x2', '\x2', '\x2', '\x6FF', '\x700', '\x5', '\xF0', 'y', '\x2', 
		'\x700', '\x701', '\x5', '\xF2', 'z', '\x2', '\x701', '\x704', '\x3', 
		'\x2', '\x2', '\x2', '\x702', '\x704', '\x5', '\x106', '\x84', '\x2', 
		'\x703', '\x6FB', '\x3', '\x2', '\x2', '\x2', '\x703', '\x6FD', '\x3', 
		'\x2', '\x2', '\x2', '\x703', '\x702', '\x3', '\x2', '\x2', '\x2', '\x704', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x705', '\x70B', '\x5', '\x104', 
		'\x83', '\x2', '\x706', '\x708', '\x5', '\xF4', '{', '\x2', '\x707', '\x709', 
		'\x5', '\x102', '\x82', '\x2', '\x708', '\x707', '\x3', '\x2', '\x2', 
		'\x2', '\x708', '\x709', '\x3', '\x2', '\x2', '\x2', '\x709', '\x70B', 
		'\x3', '\x2', '\x2', '\x2', '\x70A', '\x705', '\x3', '\x2', '\x2', '\x2', 
		'\x70A', '\x706', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x70C', '\x70D', '\b', '\x83', '\x1', '\x2', '\x70D', 
		'\x71B', '\x5', '\xF0', 'y', '\x2', '\x70E', '\x710', '\a', 'Y', '\x2', 
		'\x2', '\x70F', '\x711', '\x5', 'Z', '.', '\x2', '\x710', '\x70F', '\x3', 
		'\x2', '\x2', '\x2', '\x710', '\x711', '\x3', '\x2', '\x2', '\x2', '\x711', 
		'\x712', '\x3', '\x2', '\x2', '\x2', '\x712', '\x714', '\a', 'Z', '\x2', 
		'\x2', '\x713', '\x715', '\x5', '\xD0', 'i', '\x2', '\x714', '\x713', 
		'\x3', '\x2', '\x2', '\x2', '\x714', '\x715', '\x3', '\x2', '\x2', '\x2', 
		'\x715', '\x71B', '\x3', '\x2', '\x2', '\x2', '\x716', '\x717', '\a', 
		'W', '\x2', '\x2', '\x717', '\x718', '\x5', '\x102', '\x82', '\x2', '\x718', 
		'\x719', '\a', 'X', '\x2', '\x2', '\x719', '\x71B', '\x3', '\x2', '\x2', 
		'\x2', '\x71A', '\x70C', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x70E', 
		'\x3', '\x2', '\x2', '\x2', '\x71A', '\x716', '\x3', '\x2', '\x2', '\x2', 
		'\x71B', '\x729', '\x3', '\x2', '\x2', '\x2', '\x71C', '\x71D', '\f', 
		'\a', '\x2', '\x2', '\x71D', '\x728', '\x5', '\xF0', 'y', '\x2', '\x71E', 
		'\x71F', '\f', '\x5', '\x2', '\x2', '\x71F', '\x721', '\a', 'Y', '\x2', 
		'\x2', '\x720', '\x722', '\x5', 'Z', '.', '\x2', '\x721', '\x720', '\x3', 
		'\x2', '\x2', '\x2', '\x721', '\x722', '\x3', '\x2', '\x2', '\x2', '\x722', 
		'\x723', '\x3', '\x2', '\x2', '\x2', '\x723', '\x725', '\a', 'Z', '\x2', 
		'\x2', '\x724', '\x726', '\x5', '\xD0', 'i', '\x2', '\x725', '\x724', 
		'\x3', '\x2', '\x2', '\x2', '\x725', '\x726', '\x3', '\x2', '\x2', '\x2', 
		'\x726', '\x728', '\x3', '\x2', '\x2', '\x2', '\x727', '\x71C', '\x3', 
		'\x2', '\x2', '\x2', '\x727', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x728', 
		'\x72B', '\x3', '\x2', '\x2', '\x2', '\x729', '\x727', '\x3', '\x2', '\x2', 
		'\x2', '\x729', '\x72A', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x72B', '\x729', '\x3', '\x2', '\x2', '\x2', 
		'\x72C', '\x731', '\x5', '\x108', '\x85', '\x2', '\x72D', '\x72E', '\x5', 
		'\xF4', '{', '\x2', '\x72E', '\x72F', '\x5', '\x106', '\x84', '\x2', '\x72F', 
		'\x731', '\x3', '\x2', '\x2', '\x2', '\x730', '\x72C', '\x3', '\x2', '\x2', 
		'\x2', '\x730', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x731', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x732', '\x733', '\b', '\x85', '\x1', '\x2', 
		'\x733', '\x734', '\a', '\x85', '\x2', '\x2', '\x734', '\x742', '\x3', 
		'\x2', '\x2', '\x2', '\x735', '\x736', '\f', '\x5', '\x2', '\x2', '\x736', 
		'\x741', '\x5', '\xF0', 'y', '\x2', '\x737', '\x738', '\f', '\x4', '\x2', 
		'\x2', '\x738', '\x73A', '\a', 'Y', '\x2', '\x2', '\x739', '\x73B', '\x5', 
		'Z', '.', '\x2', '\x73A', '\x739', '\x3', '\x2', '\x2', '\x2', '\x73A', 
		'\x73B', '\x3', '\x2', '\x2', '\x2', '\x73B', '\x73C', '\x3', '\x2', '\x2', 
		'\x2', '\x73C', '\x73E', '\a', 'Z', '\x2', '\x2', '\x73D', '\x73F', '\x5', 
		'\xD0', 'i', '\x2', '\x73E', '\x73D', '\x3', '\x2', '\x2', '\x2', '\x73E', 
		'\x73F', '\x3', '\x2', '\x2', '\x2', '\x73F', '\x741', '\x3', '\x2', '\x2', 
		'\x2', '\x740', '\x735', '\x3', '\x2', '\x2', '\x2', '\x740', '\x737', 
		'\x3', '\x2', '\x2', '\x2', '\x741', '\x744', '\x3', '\x2', '\x2', '\x2', 
		'\x742', '\x740', '\x3', '\x2', '\x2', '\x2', '\x742', '\x743', '\x3', 
		'\x2', '\x2', '\x2', '\x743', '\x109', '\x3', '\x2', '\x2', '\x2', '\x744', 
		'\x742', '\x3', '\x2', '\x2', '\x2', '\x745', '\x747', '\x5', '\x10C', 
		'\x87', '\x2', '\x746', '\x745', '\x3', '\x2', '\x2', '\x2', '\x746', 
		'\x747', '\x3', '\x2', '\x2', '\x2', '\x747', '\x749', '\x3', '\x2', '\x2', 
		'\x2', '\x748', '\x74A', '\a', '\x85', '\x2', '\x2', '\x749', '\x748', 
		'\x3', '\x2', '\x2', '\x2', '\x749', '\x74A', '\x3', '\x2', '\x2', '\x2', 
		'\x74A', '\x750', '\x3', '\x2', '\x2', '\x2', '\x74B', '\x74C', '\x5', 
		'\x10C', '\x87', '\x2', '\x74C', '\x74D', '\a', '|', '\x2', '\x2', '\x74D', 
		'\x74E', '\a', '\x85', '\x2', '\x2', '\x74E', '\x750', '\x3', '\x2', '\x2', 
		'\x2', '\x74F', '\x746', '\x3', '\x2', '\x2', '\x2', '\x74F', '\x74B', 
		'\x3', '\x2', '\x2', '\x2', '\x750', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x751', '\x752', '\b', '\x87', '\x1', '\x2', '\x752', '\x753', '\x5', 
		'\x10E', '\x88', '\x2', '\x753', '\x759', '\x3', '\x2', '\x2', '\x2', 
		'\x754', '\x755', '\f', '\x3', '\x2', '\x2', '\x755', '\x756', '\a', '|', 
		'\x2', '\x2', '\x756', '\x758', '\x5', '\x10E', '\x88', '\x2', '\x757', 
		'\x754', '\x3', '\x2', '\x2', '\x2', '\x758', '\x75B', '\x3', '\x2', '\x2', 
		'\x2', '\x759', '\x757', '\x3', '\x2', '\x2', '\x2', '\x759', '\x75A', 
		'\x3', '\x2', '\x2', '\x2', '\x75A', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x75B', '\x759', '\x3', '\x2', '\x2', '\x2', '\x75C', '\x75E', '\x5', 
		'\xD0', 'i', '\x2', '\x75D', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x75D', 
		'\x75E', '\x3', '\x2', '\x2', '\x2', '\x75E', '\x75F', '\x3', '\x2', '\x2', 
		'\x2', '\x75F', '\x760', '\x5', '\x88', '\x45', '\x2', '\x760', '\x761', 
		'\x5', '\xEA', 'v', '\x2', '\x761', '\x77C', '\x3', '\x2', '\x2', '\x2', 
		'\x762', '\x764', '\x5', '\xD0', 'i', '\x2', '\x763', '\x762', '\x3', 
		'\x2', '\x2', '\x2', '\x763', '\x764', '\x3', '\x2', '\x2', '\x2', '\x764', 
		'\x765', '\x3', '\x2', '\x2', '\x2', '\x765', '\x766', '\x5', '\x88', 
		'\x45', '\x2', '\x766', '\x767', '\x5', '\xEA', 'v', '\x2', '\x767', '\x768', 
		'\a', 'g', '\x2', '\x2', '\x768', '\x769', '\x5', '\x132', '\x9A', '\x2', 
		'\x769', '\x77C', '\x3', '\x2', '\x2', '\x2', '\x76A', '\x76C', '\x5', 
		'\xD0', 'i', '\x2', '\x76B', '\x76A', '\x3', '\x2', '\x2', '\x2', '\x76B', 
		'\x76C', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76D', '\x3', '\x2', '\x2', 
		'\x2', '\x76D', '\x76F', '\x5', '\x88', '\x45', '\x2', '\x76E', '\x770', 
		'\x5', '\x100', '\x81', '\x2', '\x76F', '\x76E', '\x3', '\x2', '\x2', 
		'\x2', '\x76F', '\x770', '\x3', '\x2', '\x2', '\x2', '\x770', '\x77C', 
		'\x3', '\x2', '\x2', '\x2', '\x771', '\x773', '\x5', '\xD0', 'i', '\x2', 
		'\x772', '\x771', '\x3', '\x2', '\x2', '\x2', '\x772', '\x773', '\x3', 
		'\x2', '\x2', '\x2', '\x773', '\x774', '\x3', '\x2', '\x2', '\x2', '\x774', 
		'\x776', '\x5', '\x88', '\x45', '\x2', '\x775', '\x777', '\x5', '\x100', 
		'\x81', '\x2', '\x776', '\x775', '\x3', '\x2', '\x2', '\x2', '\x776', 
		'\x777', '\x3', '\x2', '\x2', '\x2', '\x777', '\x778', '\x3', '\x2', '\x2', 
		'\x2', '\x778', '\x779', '\a', 'g', '\x2', '\x2', '\x779', '\x77A', '\x5', 
		'\x132', '\x9A', '\x2', '\x77A', '\x77C', '\x3', '\x2', '\x2', '\x2', 
		'\x77B', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x77B', '\x763', '\x3', 
		'\x2', '\x2', '\x2', '\x77B', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x77B', 
		'\x772', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x77D', '\x77F', '\x5', '\xD0', 'i', '\x2', '\x77E', '\x77D', 
		'\x3', '\x2', '\x2', '\x2', '\x77E', '\x77F', '\x3', '\x2', '\x2', '\x2', 
		'\x77F', '\x781', '\x3', '\x2', '\x2', '\x2', '\x780', '\x782', '\x5', 
		'\x88', '\x45', '\x2', '\x781', '\x780', '\x3', '\x2', '\x2', '\x2', '\x781', 
		'\x782', '\x3', '\x2', '\x2', '\x2', '\x782', '\x783', '\x3', '\x2', '\x2', 
		'\x2', '\x783', '\x785', '\x5', '\xEA', 'v', '\x2', '\x784', '\x786', 
		'\x5', '\x14E', '\xA8', '\x2', '\x785', '\x784', '\x3', '\x2', '\x2', 
		'\x2', '\x785', '\x786', '\x3', '\x2', '\x2', '\x2', '\x786', '\x787', 
		'\x3', '\x2', '\x2', '\x2', '\x787', '\x788', '\x5', '\x12C', '\x97', 
		'\x2', '\x788', '\x111', '\x3', '\x2', '\x2', '\x2', '\x789', '\x78E', 
		'\x5', '\x116', '\x8C', '\x2', '\x78A', '\x78E', '\x5', '\x118', '\x8D', 
		'\x2', '\x78B', '\x78E', '\x5', '\x11A', '\x8E', '\x2', '\x78C', '\x78E', 
		'\a', '\x86', '\x2', '\x2', '\x78D', '\x789', '\x3', '\x2', '\x2', '\x2', 
		'\x78D', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x78D', '\x78B', '\x3', 
		'\x2', '\x2', '\x2', '\x78D', '\x78C', '\x3', '\x2', '\x2', '\x2', '\x78E', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x78F', '\x794', '\x5', '\x11C', 
		'\x8F', '\x2', '\x790', '\x794', '\x5', '\x11E', '\x90', '\x2', '\x791', 
		'\x794', '\x5', '\x120', '\x91', '\x2', '\x792', '\x794', '\a', '\x3', 
		'\x2', '\x2', '\x793', '\x78F', '\x3', '\x2', '\x2', '\x2', '\x793', '\x790', 
		'\x3', '\x2', '\x2', '\x2', '\x793', '\x791', '\x3', '\x2', '\x2', '\x2', 
		'\x793', '\x792', '\x3', '\x2', '\x2', '\x2', '\x794', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x795', '\x796', '\a', '\x4', '\x2', '\x2', '\x796', 
		'\x797', '\x5', '\x122', '\x92', '\x2', '\x797', '\x117', '\x3', '\x2', 
		'\x2', '\x2', '\x798', '\x799', '\a', '\x5', '\x2', '\x2', '\x799', '\x79A', 
		'\x5', '\x122', '\x92', '\x2', '\x79A', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x79B', '\x79C', '\a', '\x6', '\x2', '\x2', '\x79C', '\x79D', 
		'\x5', '\x122', '\x92', '\x2', '\x79D', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x79E', '\x79F', '\a', '\a', '\x2', '\x2', '\x79F', '\x7A0', '\x5', 
		'\x122', '\x92', '\x2', '\x7A0', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x7A1', '\x7A2', '\a', '\b', '\x2', '\x2', '\x7A2', '\x7A3', '\x5', '\x122', 
		'\x92', '\x2', '\x7A3', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x7A4', 
		'\x7A5', '\a', '\t', '\x2', '\x2', '\x7A5', '\x7A6', '\a', 'W', '\x2', 
		'\x2', '\x7A6', '\x7A7', '\x5', '\x1A4', '\xD3', '\x2', '\x7A7', '\x7A8', 
		'\a', '|', '\x2', '\x2', '\x7A8', '\x7A9', '\x5', '\x1A4', '\xD3', '\x2', 
		'\x7A9', '\x7AA', '\a', 'X', '\x2', '\x2', '\x7AA', '\x121', '\x3', '\x2', 
		'\x2', '\x2', '\x7AB', '\x7AD', '\a', 'W', '\x2', '\x2', '\x7AC', '\x7AE', 
		'\x5', '\x124', '\x93', '\x2', '\x7AD', '\x7AC', '\x3', '\x2', '\x2', 
		'\x2', '\x7AD', '\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AF', 
		'\x3', '\x2', '\x2', '\x2', '\x7AF', '\x7B0', '\a', 'X', '\x2', '\x2', 
		'\x7B0', '\x123', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7B7', '\x5', 
		'\x126', '\x94', '\x2', '\x7B2', '\x7B3', '\x5', '\x126', '\x94', '\x2', 
		'\x7B3', '\x7B4', '\a', '|', '\x2', '\x2', '\x7B4', '\x7B5', '\x5', '\x124', 
		'\x93', '\x2', '\x7B5', '\x7B7', '\x3', '\x2', '\x2', '\x2', '\x7B6', 
		'\x7B1', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B2', '\x3', '\x2', '\x2', 
		'\x2', '\x7B7', '\x125', '\x3', '\x2', '\x2', '\x2', '\x7B8', '\x7C4', 
		'\x5', '\x128', '\x95', '\x2', '\x7B9', '\x7BA', '\x5', '\x128', '\x95', 
		'\x2', '\x7BA', '\x7BB', '\a', 'g', '\x2', '\x2', '\x7BB', '\x7BC', '\x5', 
		'\x12A', '\x96', '\x2', '\x7BC', '\x7C4', '\x3', '\x2', '\x2', '\x2', 
		'\x7BD', '\x7BE', '\x5', '\x128', '\x95', '\x2', '\x7BE', '\x7BF', '\a', 
		'g', '\x2', '\x2', '\x7BF', '\x7C0', '\a', 'W', '\x2', '\x2', '\x7C0', 
		'\x7C1', '\x5', '\x124', '\x93', '\x2', '\x7C1', '\x7C2', '\a', 'X', '\x2', 
		'\x2', '\x7C2', '\x7C4', '\x3', '\x2', '\x2', '\x2', '\x7C3', '\x7B8', 
		'\x3', '\x2', '\x2', '\x2', '\x7C3', '\x7B9', '\x3', '\x2', '\x2', '\x2', 
		'\x7C3', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7C4', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x7C5', '\x7C6', '\a', '\x87', '\x2', '\x2', '\x7C6', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7CA', '\a', '\x87', '\x2', 
		'\x2', '\x7C8', '\x7CA', '\x5', '\x1A4', '\xD3', '\x2', '\x7C9', '\x7C7', 
		'\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7C8', '\x3', '\x2', '\x2', '\x2', 
		'\x7CA', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x7CB', '\x7CD', '\x5', 
		'\x166', '\xB4', '\x2', '\x7CC', '\x7CB', '\x3', '\x2', '\x2', '\x2', 
		'\x7CC', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CD', '\x7CE', '\x3', 
		'\x2', '\x2', '\x2', '\x7CE', '\x7D7', '\x5', '\x62', '\x32', '\x2', '\x7CF', 
		'\x7D7', '\x5', '\x18C', '\xC7', '\x2', '\x7D0', '\x7D1', '\a', 'g', '\x2', 
		'\x2', '\x7D1', '\x7D2', '\a', '\x1D', '\x2', '\x2', '\x7D2', '\x7D7', 
		'\a', '\x82', '\x2', '\x2', '\x7D3', '\x7D4', '\a', 'g', '\x2', '\x2', 
		'\x7D4', '\x7D5', '\a', '\x1E', '\x2', '\x2', '\x7D5', '\x7D7', '\a', 
		'\x82', '\x2', '\x2', '\x7D6', '\x7CC', '\x3', '\x2', '\x2', '\x2', '\x7D6', 
		'\x7CF', '\x3', '\x2', '\x2', '\x2', '\x7D6', '\x7D0', '\x3', '\x2', '\x2', 
		'\x2', '\x7D6', '\x7D3', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7DE', '\x5', '\x130', '\x99', 
		'\x2', '\x7D9', '\x7DA', '\a', 'W', '\x2', '\x2', '\x7DA', '\x7DB', '\x5', 
		'\"', '\x12', '\x2', '\x7DB', '\x7DC', '\a', 'X', '\x2', '\x2', '\x7DC', 
		'\x7DE', '\x3', '\x2', '\x2', '\x2', '\x7DD', '\x7D8', '\x3', '\x2', '\x2', 
		'\x2', '\x7DD', '\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7DE', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x7DF', '\x7E0', '\a', 'g', '\x2', '\x2', 
		'\x7E0', '\x7E3', '\x5', '\x132', '\x9A', '\x2', '\x7E1', '\x7E3', '\x5', 
		'\x136', '\x9C', '\x2', '\x7E2', '\x7DF', '\x3', '\x2', '\x2', '\x2', 
		'\x7E2', '\x7E1', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x7E4', '\x7E7', '\x5', 'T', '+', '\x2', '\x7E5', 
		'\x7E7', '\x5', '\x136', '\x9C', '\x2', '\x7E6', '\x7E4', '\x3', '\x2', 
		'\x2', '\x2', '\x7E6', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x7E8', '\x7E9', '\b', '\x9B', '\x1', '\x2', 
		'\x7E9', '\x7EB', '\x5', '\x132', '\x9A', '\x2', '\x7EA', '\x7EC', '\a', 
		'\x85', '\x2', '\x2', '\x7EB', '\x7EA', '\x3', '\x2', '\x2', '\x2', '\x7EB', 
		'\x7EC', '\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7F5', '\x3', '\x2', '\x2', 
		'\x2', '\x7ED', '\x7EE', '\f', '\x3', '\x2', '\x2', '\x7EE', '\x7EF', 
		'\a', '|', '\x2', '\x2', '\x7EF', '\x7F1', '\x5', '\x132', '\x9A', '\x2', 
		'\x7F0', '\x7F2', '\a', '\x85', '\x2', '\x2', '\x7F1', '\x7F0', '\x3', 
		'\x2', '\x2', '\x2', '\x7F1', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F2', 
		'\x7F4', '\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7ED', '\x3', '\x2', '\x2', 
		'\x2', '\x7F4', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F3', 
		'\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F6', '\x3', '\x2', '\x2', '\x2', 
		'\x7F6', '\x135', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F5', '\x3', 
		'\x2', '\x2', '\x2', '\x7F8', '\x7F9', '\a', '[', '\x2', '\x2', '\x7F9', 
		'\x7FB', '\x5', '\x134', '\x9B', '\x2', '\x7FA', '\x7FC', '\a', '|', '\x2', 
		'\x2', '\x7FB', '\x7FA', '\x3', '\x2', '\x2', '\x2', '\x7FB', '\x7FC', 
		'\x3', '\x2', '\x2', '\x2', '\x7FC', '\x7FD', '\x3', '\x2', '\x2', '\x2', 
		'\x7FD', '\x7FE', '\a', '\\', '\x2', '\x2', '\x7FE', '\x802', '\x3', '\x2', 
		'\x2', '\x2', '\x7FF', '\x800', '\a', '[', '\x2', '\x2', '\x800', '\x802', 
		'\a', '\\', '\x2', '\x2', '\x801', '\x7F8', '\x3', '\x2', '\x2', '\x2', 
		'\x801', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x802', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x803', '\x806', '\a', '\x87', '\x2', '\x2', '\x804', 
		'\x806', '\x5', '\x17A', '\xBE', '\x2', '\x805', '\x803', '\x3', '\x2', 
		'\x2', '\x2', '\x805', '\x804', '\x3', '\x2', '\x2', '\x2', '\x806', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x807', '\x808', '\x5', '\x13C', '\x9F', 
		'\x2', '\x808', '\x80A', '\a', '[', '\x2', '\x2', '\x809', '\x80B', '\x5', 
		'\x146', '\xA4', '\x2', '\x80A', '\x809', '\x3', '\x2', '\x2', '\x2', 
		'\x80A', '\x80B', '\x3', '\x2', '\x2', '\x2', '\x80B', '\x80C', '\x3', 
		'\x2', '\x2', '\x2', '\x80C', '\x80D', '\a', '\\', '\x2', '\x2', '\x80D', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x80E', '\x810', '\x5', '\x144', 
		'\xA3', '\x2', '\x80F', '\x811', '\x5', '\x140', '\xA1', '\x2', '\x810', 
		'\x80F', '\x3', '\x2', '\x2', '\x2', '\x810', '\x811', '\x3', '\x2', '\x2', 
		'\x2', '\x811', '\x813', '\x3', '\x2', '\x2', '\x2', '\x812', '\x814', 
		'\x5', '\xD0', 'i', '\x2', '\x813', '\x812', '\x3', '\x2', '\x2', '\x2', 
		'\x813', '\x814', '\x3', '\x2', '\x2', '\x2', '\x814', '\x815', '\x3', 
		'\x2', '\x2', '\x2', '\x815', '\x817', '\x5', '\x13E', '\xA0', '\x2', 
		'\x816', '\x818', '\x5', '\x142', '\xA2', '\x2', '\x817', '\x816', '\x3', 
		'\x2', '\x2', '\x2', '\x817', '\x818', '\x3', '\x2', '\x2', '\x2', '\x818', 
		'\x81A', '\x3', '\x2', '\x2', '\x2', '\x819', '\x81B', '\x5', '\x154', 
		'\xAB', '\x2', '\x81A', '\x819', '\x3', '\x2', '\x2', '\x2', '\x81A', 
		'\x81B', '\x3', '\x2', '\x2', '\x2', '\x81B', '\x827', '\x3', '\x2', '\x2', 
		'\x2', '\x81C', '\x81E', '\x5', '\x144', '\xA3', '\x2', '\x81D', '\x81F', 
		'\x5', '\x140', '\xA1', '\x2', '\x81E', '\x81D', '\x3', '\x2', '\x2', 
		'\x2', '\x81E', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x81F', '\x821', 
		'\x3', '\x2', '\x2', '\x2', '\x820', '\x822', '\x5', '\xD0', 'i', '\x2', 
		'\x821', '\x820', '\x3', '\x2', '\x2', '\x2', '\x821', '\x822', '\x3', 
		'\x2', '\x2', '\x2', '\x822', '\x824', '\x3', '\x2', '\x2', '\x2', '\x823', 
		'\x825', '\x5', '\x154', '\xAB', '\x2', '\x824', '\x823', '\x3', '\x2', 
		'\x2', '\x2', '\x824', '\x825', '\x3', '\x2', '\x2', '\x2', '\x825', '\x827', 
		'\x3', '\x2', '\x2', '\x2', '\x826', '\x80E', '\x3', '\x2', '\x2', '\x2', 
		'\x826', '\x81C', '\x3', '\x2', '\x2', '\x2', '\x827', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x828', '\x82A', '\x5', '\f', '\a', '\x2', '\x829', 
		'\x828', '\x3', '\x2', '\x2', '\x2', '\x829', '\x82A', '\x3', '\x2', '\x2', 
		'\x2', '\x82A', '\x82B', '\x3', '\x2', '\x2', '\x2', '\x82B', '\x82C', 
		'\x5', '\x138', '\x9D', '\x2', '\x82C', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x82D', '\x82E', '\a', '\x86', '\x2', '\x2', '\x82E', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x82F', '\x830', '\a', '(', '\x2', '\x2', 
		'\x830', '\x143', '\x3', '\x2', '\x2', '\x2', '\x831', '\x832', '\t', 
		'\b', '\x2', '\x2', '\x832', '\x145', '\x3', '\x2', '\x2', '\x2', '\x833', 
		'\x835', '\x5', '\x148', '\xA5', '\x2', '\x834', '\x836', '\x5', '\x146', 
		'\xA4', '\x2', '\x835', '\x834', '\x3', '\x2', '\x2', '\x2', '\x835', 
		'\x836', '\x3', '\x2', '\x2', '\x2', '\x836', '\x83D', '\x3', '\x2', '\x2', 
		'\x2', '\x837', '\x838', '\x5', '\x15E', '\xB0', '\x2', '\x838', '\x83A', 
		'\a', '\x80', '\x2', '\x2', '\x839', '\x83B', '\x5', '\x146', '\xA4', 
		'\x2', '\x83A', '\x839', '\x3', '\x2', '\x2', '\x2', '\x83A', '\x83B', 
		'\x3', '\x2', '\x2', '\x2', '\x83B', '\x83D', '\x3', '\x2', '\x2', '\x2', 
		'\x83C', '\x833', '\x3', '\x2', '\x2', '\x2', '\x83C', '\x837', '\x3', 
		'\x2', '\x2', '\x2', '\x83D', '\x147', '\x3', '\x2', '\x2', '\x2', '\x83E', 
		'\x840', '\x5', '\xD0', 'i', '\x2', '\x83F', '\x83E', '\x3', '\x2', '\x2', 
		'\x2', '\x83F', '\x840', '\x3', '\x2', '\x2', '\x2', '\x840', '\x842', 
		'\x3', '\x2', '\x2', '\x2', '\x841', '\x843', '\x5', '\x88', '\x45', '\x2', 
		'\x842', '\x841', '\x3', '\x2', '\x2', '\x2', '\x842', '\x843', '\x3', 
		'\x2', '\x2', '\x2', '\x843', '\x845', '\x3', '\x2', '\x2', '\x2', '\x844', 
		'\x846', '\x5', '\x14A', '\xA6', '\x2', '\x845', '\x844', '\x3', '\x2', 
		'\x2', '\x2', '\x845', '\x846', '\x3', '\x2', '\x2', '\x2', '\x846', '\x847', 
		'\x3', '\x2', '\x2', '\x2', '\x847', '\x850', '\a', '\x82', '\x2', '\x2', 
		'\x848', '\x850', '\x5', '\x110', '\x89', '\x2', '\x849', '\x850', '\x5', 
		'\xC8', '\x65', '\x2', '\x84A', '\x850', '\x5', '\x80', '\x41', '\x2', 
		'\x84B', '\x850', '\x5', '\x172', '\xBA', '\x2', '\x84C', '\x850', '\x5', 
		'|', '?', '\x2', '\x84D', '\x850', '\x5', '\x82', '\x42', '\x2', '\x84E', 
		'\x850', '\x5', '\x114', '\x8B', '\x2', '\x84F', '\x83F', '\x3', '\x2', 
		'\x2', '\x2', '\x84F', '\x848', '\x3', '\x2', '\x2', '\x2', '\x84F', '\x849', 
		'\x3', '\x2', '\x2', '\x2', '\x84F', '\x84A', '\x3', '\x2', '\x2', '\x2', 
		'\x84F', '\x84B', '\x3', '\x2', '\x2', '\x2', '\x84F', '\x84C', '\x3', 
		'\x2', '\x2', '\x2', '\x84F', '\x84D', '\x3', '\x2', '\x2', '\x2', '\x84F', 
		'\x84E', '\x3', '\x2', '\x2', '\x2', '\x850', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x851', '\x852', '\b', '\xA6', '\x1', '\x2', '\x852', '\x853', 
		'\x5', '\x14C', '\xA7', '\x2', '\x853', '\x859', '\x3', '\x2', '\x2', 
		'\x2', '\x854', '\x855', '\f', '\x3', '\x2', '\x2', '\x855', '\x856', 
		'\a', '|', '\x2', '\x2', '\x856', '\x858', '\x5', '\x14C', '\xA7', '\x2', 
		'\x857', '\x854', '\x3', '\x2', '\x2', '\x2', '\x858', '\x85B', '\x3', 
		'\x2', '\x2', '\x2', '\x859', '\x857', '\x3', '\x2', '\x2', '\x2', '\x859', 
		'\x85A', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x85B', '\x859', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x85E', 
		'\x5', '\xEA', 'v', '\x2', '\x85D', '\x85F', '\x5', '\x14E', '\xA8', '\x2', 
		'\x85E', '\x85D', '\x3', '\x2', '\x2', '\x2', '\x85E', '\x85F', '\x3', 
		'\x2', '\x2', '\x2', '\x85F', '\x861', '\x3', '\x2', '\x2', '\x2', '\x860', 
		'\x862', '\x5', '\x152', '\xAA', '\x2', '\x861', '\x860', '\x3', '\x2', 
		'\x2', '\x2', '\x861', '\x862', '\x3', '\x2', '\x2', '\x2', '\x862', '\x870', 
		'\x3', '\x2', '\x2', '\x2', '\x863', '\x865', '\x5', '\xEA', 'v', '\x2', 
		'\x864', '\x866', '\x5', '\x130', '\x99', '\x2', '\x865', '\x864', '\x3', 
		'\x2', '\x2', '\x2', '\x865', '\x866', '\x3', '\x2', '\x2', '\x2', '\x866', 
		'\x870', '\x3', '\x2', '\x2', '\x2', '\x867', '\x869', '\a', '\x87', '\x2', 
		'\x2', '\x868', '\x867', '\x3', '\x2', '\x2', '\x2', '\x868', '\x869', 
		'\x3', '\x2', '\x2', '\x2', '\x869', '\x86B', '\x3', '\x2', '\x2', '\x2', 
		'\x86A', '\x86C', '\x5', '\xD0', 'i', '\x2', '\x86B', '\x86A', '\x3', 
		'\x2', '\x2', '\x2', '\x86B', '\x86C', '\x3', '\x2', '\x2', '\x2', '\x86C', 
		'\x86D', '\x3', '\x2', '\x2', '\x2', '\x86D', '\x86E', '\a', '\x80', '\x2', 
		'\x2', '\x86E', '\x870', '\x5', 'Z', '.', '\x2', '\x86F', '\x85C', '\x3', 
		'\x2', '\x2', '\x2', '\x86F', '\x863', '\x3', '\x2', '\x2', '\x2', '\x86F', 
		'\x868', '\x3', '\x2', '\x2', '\x2', '\x870', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x871', '\x872', '\b', '\xA8', '\x1', '\x2', '\x872', '\x873', 
		'\x5', '\x150', '\xA9', '\x2', '\x873', '\x878', '\x3', '\x2', '\x2', 
		'\x2', '\x874', '\x875', '\f', '\x3', '\x2', '\x2', '\x875', '\x877', 
		'\x5', '\x150', '\xA9', '\x2', '\x876', '\x874', '\x3', '\x2', '\x2', 
		'\x2', '\x877', '\x87A', '\x3', '\x2', '\x2', '\x2', '\x878', '\x876', 
		'\x3', '\x2', '\x2', '\x2', '\x878', '\x879', '\x3', '\x2', '\x2', '\x2', 
		'\x879', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x87A', '\x878', '\x3', 
		'\x2', '\x2', '\x2', '\x87B', '\x87C', '\t', '\t', '\x2', '\x2', '\x87C', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x87D', '\x87E', '\a', 'g', '\x2', 
		'\x2', '\x87E', '\x87F', '\a', '\x8A', '\x2', '\x2', '\x87F', '\x880', 
		'\b', '\xAA', '\x1', '\x2', '\x880', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x881', '\x882', '\a', '\x80', '\x2', '\x2', '\x882', '\x883', '\x5', 
		'\x156', '\xAC', '\x2', '\x883', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x884', '\x885', '\b', '\xAC', '\x1', '\x2', '\x885', '\x887', '\x5', 
		'\x158', '\xAD', '\x2', '\x886', '\x888', '\a', '\x85', '\x2', '\x2', 
		'\x887', '\x886', '\x3', '\x2', '\x2', '\x2', '\x887', '\x888', '\x3', 
		'\x2', '\x2', '\x2', '\x888', '\x891', '\x3', '\x2', '\x2', '\x2', '\x889', 
		'\x88A', '\f', '\x3', '\x2', '\x2', '\x88A', '\x88B', '\a', '|', '\x2', 
		'\x2', '\x88B', '\x88D', '\x5', '\x158', '\xAD', '\x2', '\x88C', '\x88E', 
		'\a', '\x85', '\x2', '\x2', '\x88D', '\x88C', '\x3', '\x2', '\x2', '\x2', 
		'\x88D', '\x88E', '\x3', '\x2', '\x2', '\x2', '\x88E', '\x890', '\x3', 
		'\x2', '\x2', '\x2', '\x88F', '\x889', '\x3', '\x2', '\x2', '\x2', '\x890', 
		'\x893', '\x3', '\x2', '\x2', '\x2', '\x891', '\x88F', '\x3', '\x2', '\x2', 
		'\x2', '\x891', '\x892', '\x3', '\x2', '\x2', '\x2', '\x892', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x893', '\x891', '\x3', '\x2', '\x2', '\x2', 
		'\x894', '\x896', '\x5', '\xD0', 'i', '\x2', '\x895', '\x894', '\x3', 
		'\x2', '\x2', '\x2', '\x895', '\x896', '\x3', '\x2', '\x2', '\x2', '\x896', 
		'\x897', '\x3', '\x2', '\x2', '\x2', '\x897', '\x8AA', '\x5', '\x15C', 
		'\xAF', '\x2', '\x898', '\x89A', '\x5', '\xD0', 'i', '\x2', '\x899', '\x898', 
		'\x3', '\x2', '\x2', '\x2', '\x899', '\x89A', '\x3', '\x2', '\x2', '\x2', 
		'\x89A', '\x89B', '\x3', '\x2', '\x2', '\x2', '\x89B', '\x89D', '\a', 
		'R', '\x2', '\x2', '\x89C', '\x89E', '\x5', '\x15E', '\xB0', '\x2', '\x89D', 
		'\x89C', '\x3', '\x2', '\x2', '\x2', '\x89D', '\x89E', '\x3', '\x2', '\x2', 
		'\x2', '\x89E', '\x89F', '\x3', '\x2', '\x2', '\x2', '\x89F', '\x8AA', 
		'\x5', '\x15C', '\xAF', '\x2', '\x8A0', '\x8A2', '\x5', '\xD0', 'i', '\x2', 
		'\x8A1', '\x8A0', '\x3', '\x2', '\x2', '\x2', '\x8A1', '\x8A2', '\x3', 
		'\x2', '\x2', '\x2', '\x8A2', '\x8A3', '\x3', '\x2', '\x2', '\x2', '\x8A3', 
		'\x8A5', '\x5', '\x15E', '\xB0', '\x2', '\x8A4', '\x8A6', '\a', 'R', '\x2', 
		'\x2', '\x8A5', '\x8A4', '\x3', '\x2', '\x2', '\x2', '\x8A5', '\x8A6', 
		'\x3', '\x2', '\x2', '\x2', '\x8A6', '\x8A7', '\x3', '\x2', '\x2', '\x2', 
		'\x8A7', '\x8A8', '\x5', '\x15C', '\xAF', '\x2', '\x8A8', '\x8AA', '\x3', 
		'\x2', '\x2', '\x2', '\x8A9', '\x895', '\x3', '\x2', '\x2', '\x2', '\x8A9', 
		'\x899', '\x3', '\x2', '\x2', '\x2', '\x8A9', '\x8A1', '\x3', '\x2', '\x2', 
		'\x2', '\x8AA', '\x159', '\x3', '\x2', '\x2', '\x2', '\x8AB', '\x8AD', 
		'\x5', '\f', '\a', '\x2', '\x8AC', '\x8AB', '\x3', '\x2', '\x2', '\x2', 
		'\x8AC', '\x8AD', '\x3', '\x2', '\x2', '\x2', '\x8AD', '\x8AE', '\x3', 
		'\x2', '\x2', '\x2', '\x8AE', '\x8B1', '\x5', '\x138', '\x9D', '\x2', 
		'\x8AF', '\x8B1', '\x5', '\x9C', 'O', '\x2', '\x8B0', '\x8AC', '\x3', 
		'\x2', '\x2', '\x2', '\x8B0', '\x8AF', '\x3', '\x2', '\x2', '\x2', '\x8B1', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8B3', '\x5', '\x15A', 
		'\xAE', '\x2', '\x8B3', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x8B4', 
		'\x8B5', '\t', '\n', '\x2', '\x2', '\x8B5', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x8B6', '\x8B7', '\a', '\x36', '\x2', '\x2', '\x8B7', '\x8B8', 
		'\x5', '\x162', '\xB2', '\x2', '\x8B8', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x8B9', '\x8BB', '\x5', '\x94', 'K', '\x2', '\x8BA', '\x8BC', 
		'\x5', '\x164', '\xB3', '\x2', '\x8BB', '\x8BA', '\x3', '\x2', '\x2', 
		'\x2', '\x8BB', '\x8BC', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x8BD', '\x8BF', '\x5', '\xF4', '{', '\x2', 
		'\x8BE', '\x8C0', '\x5', '\x164', '\xB3', '\x2', '\x8BF', '\x8BE', '\x3', 
		'\x2', '\x2', '\x2', '\x8BF', '\x8C0', '\x3', '\x2', '\x2', '\x2', '\x8C0', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x8C1', '\x8C2', '\a', '\x80', '\x2', 
		'\x2', '\x8C2', '\x8C3', '\x5', '\x168', '\xB5', '\x2', '\x8C3', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x8C4', '\x8C6', '\x5', '\x16A', '\xB6', 
		'\x2', '\x8C5', '\x8C7', '\a', '\x85', '\x2', '\x2', '\x8C6', '\x8C5', 
		'\x3', '\x2', '\x2', '\x2', '\x8C6', '\x8C7', '\x3', '\x2', '\x2', '\x2', 
		'\x8C7', '\x8D0', '\x3', '\x2', '\x2', '\x2', '\x8C8', '\x8CA', '\x5', 
		'\x16A', '\xB6', '\x2', '\x8C9', '\x8CB', '\a', '\x85', '\x2', '\x2', 
		'\x8CA', '\x8C9', '\x3', '\x2', '\x2', '\x2', '\x8CA', '\x8CB', '\x3', 
		'\x2', '\x2', '\x2', '\x8CB', '\x8CC', '\x3', '\x2', '\x2', '\x2', '\x8CC', 
		'\x8CD', '\a', '|', '\x2', '\x2', '\x8CD', '\x8CE', '\x5', '\x168', '\xB5', 
		'\x2', '\x8CE', '\x8D0', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8C4', 
		'\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8C8', '\x3', '\x2', '\x2', '\x2', 
		'\x8D0', '\x169', '\x3', '\x2', '\x2', '\x2', '\x8D1', '\x8D2', '\x5', 
		'\x16C', '\xB7', '\x2', '\x8D2', '\x8D4', '\a', 'W', '\x2', '\x2', '\x8D3', 
		'\x8D5', '\x5', '\"', '\x12', '\x2', '\x8D4', '\x8D3', '\x3', '\x2', '\x2', 
		'\x2', '\x8D4', '\x8D5', '\x3', '\x2', '\x2', '\x2', '\x8D5', '\x8D6', 
		'\x3', '\x2', '\x2', '\x2', '\x8D6', '\x8D7', '\a', 'X', '\x2', '\x2', 
		'\x8D7', '\x8DC', '\x3', '\x2', '\x2', '\x2', '\x8D8', '\x8D9', '\x5', 
		'\x16C', '\xB7', '\x2', '\x8D9', '\x8DA', '\x5', '\x136', '\x9C', '\x2', 
		'\x8DA', '\x8DC', '\x3', '\x2', '\x2', '\x2', '\x8DB', '\x8D1', '\x3', 
		'\x2', '\x2', '\x2', '\x8DB', '\x8D8', '\x3', '\x2', '\x2', '\x2', '\x8DC', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8E0', '\x5', '\x15A', 
		'\xAE', '\x2', '\x8DE', '\x8E0', '\a', '\x87', '\x2', '\x2', '\x8DF', 
		'\x8DD', '\x3', '\x2', '\x2', '\x2', '\x8DF', '\x8DE', '\x3', '\x2', '\x2', 
		'\x2', '\x8E0', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x8E1', '\x8E2', 
		'\a', '\x36', '\x2', '\x2', '\x8E2', '\x8E3', '\x5', '\x1A2', '\xD2', 
		'\x2', '\x8E3', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x8E4', '\x8E5', 
		'\a', '\x36', '\x2', '\x2', '\x8E5', '\x8E6', '\a', '\x90', '\x2', '\x2', 
		'\x8E6', '\x8EA', '\a', '\x87', '\x2', '\x2', '\x8E7', '\x8E8', '\a', 
		'\x36', '\x2', '\x2', '\x8E8', '\x8EA', '\a', '\x93', '\x2', '\x2', '\x8E9', 
		'\x8E4', '\x3', '\x2', '\x2', '\x2', '\x8E9', '\x8E7', '\x3', '\x2', '\x2', 
		'\x2', '\x8EA', '\x171', '\x3', '\x2', '\x2', '\x2', '\x8EB', '\x8EC', 
		'\a', '\x46', '\x2', '\x2', '\x8EC', '\x8ED', '\a', 'h', '\x2', '\x2', 
		'\x8ED', '\x8EE', '\x5', '\x174', '\xBB', '\x2', '\x8EE', '\x8EF', '\a', 
		'i', '\x2', '\x2', '\x8EF', '\x8F0', '\x5', 'x', '=', '\x2', '\x8F0', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F2', '\b', '\xBB', '\x1', 
		'\x2', '\x8F2', '\x8F3', '\x5', '\x176', '\xBC', '\x2', '\x8F3', '\x8F9', 
		'\x3', '\x2', '\x2', '\x2', '\x8F4', '\x8F5', '\f', '\x3', '\x2', '\x2', 
		'\x8F5', '\x8F6', '\a', '|', '\x2', '\x2', '\x8F6', '\x8F8', '\x5', '\x176', 
		'\xBC', '\x2', '\x8F7', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x8F8', 
		'\x8FB', '\x3', '\x2', '\x2', '\x2', '\x8F9', '\x8F7', '\x3', '\x2', '\x2', 
		'\x2', '\x8F9', '\x8FA', '\x3', '\x2', '\x2', '\x2', '\x8FA', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x8FB', '\x8F9', '\x3', '\x2', '\x2', '\x2', 
		'\x8FC', '\x8FF', '\x5', '\x178', '\xBD', '\x2', '\x8FD', '\x8FF', '\x5', 
		'\x10E', '\x88', '\x2', '\x8FE', '\x8FC', '\x3', '\x2', '\x2', '\x2', 
		'\x8FE', '\x8FD', '\x3', '\x2', '\x2', '\x2', '\x8FF', '\x177', '\x3', 
		'\x2', '\x2', '\x2', '\x900', '\x902', '\a', '\x17', '\x2', '\x2', '\x901', 
		'\x903', '\a', '\x85', '\x2', '\x2', '\x902', '\x901', '\x3', '\x2', '\x2', 
		'\x2', '\x902', '\x903', '\x3', '\x2', '\x2', '\x2', '\x903', '\x905', 
		'\x3', '\x2', '\x2', '\x2', '\x904', '\x906', '\a', '\x87', '\x2', '\x2', 
		'\x905', '\x904', '\x3', '\x2', '\x2', '\x2', '\x905', '\x906', '\x3', 
		'\x2', '\x2', '\x2', '\x906', '\x931', '\x3', '\x2', '\x2', '\x2', '\x907', 
		'\x909', '\a', '\x17', '\x2', '\x2', '\x908', '\x90A', '\a', '\x87', '\x2', 
		'\x2', '\x909', '\x908', '\x3', '\x2', '\x2', '\x2', '\x909', '\x90A', 
		'\x3', '\x2', '\x2', '\x2', '\x90A', '\x90B', '\x3', '\x2', '\x2', '\x2', 
		'\x90B', '\x90C', '\a', 'g', '\x2', '\x2', '\x90C', '\x931', '\x5', '\xFE', 
		'\x80', '\x2', '\x90D', '\x90F', '\a', 'N', '\x2', '\x2', '\x90E', '\x910', 
		'\a', '\x85', '\x2', '\x2', '\x90F', '\x90E', '\x3', '\x2', '\x2', '\x2', 
		'\x90F', '\x910', '\x3', '\x2', '\x2', '\x2', '\x910', '\x912', '\x3', 
		'\x2', '\x2', '\x2', '\x911', '\x913', '\a', '\x87', '\x2', '\x2', '\x912', 
		'\x911', '\x3', '\x2', '\x2', '\x2', '\x912', '\x913', '\x3', '\x2', '\x2', 
		'\x2', '\x913', '\x931', '\x3', '\x2', '\x2', '\x2', '\x914', '\x916', 
		'\a', 'N', '\x2', '\x2', '\x915', '\x917', '\a', '\x87', '\x2', '\x2', 
		'\x916', '\x915', '\x3', '\x2', '\x2', '\x2', '\x916', '\x917', '\x3', 
		'\x2', '\x2', '\x2', '\x917', '\x918', '\x3', '\x2', '\x2', '\x2', '\x918', 
		'\x919', '\a', 'g', '\x2', '\x2', '\x919', '\x931', '\x5', '\xFE', '\x80', 
		'\x2', '\x91A', '\x91B', '\a', '\x46', '\x2', '\x2', '\x91B', '\x91C', 
		'\a', 'h', '\x2', '\x2', '\x91C', '\x91D', '\x5', '\x174', '\xBB', '\x2', 
		'\x91D', '\x91E', '\a', 'i', '\x2', '\x2', '\x91E', '\x920', '\a', '\x17', 
		'\x2', '\x2', '\x91F', '\x921', '\a', '\x85', '\x2', '\x2', '\x920', '\x91F', 
		'\x3', '\x2', '\x2', '\x2', '\x920', '\x921', '\x3', '\x2', '\x2', '\x2', 
		'\x921', '\x923', '\x3', '\x2', '\x2', '\x2', '\x922', '\x924', '\a', 
		'\x87', '\x2', '\x2', '\x923', '\x922', '\x3', '\x2', '\x2', '\x2', '\x923', 
		'\x924', '\x3', '\x2', '\x2', '\x2', '\x924', '\x931', '\x3', '\x2', '\x2', 
		'\x2', '\x925', '\x926', '\a', '\x46', '\x2', '\x2', '\x926', '\x927', 
		'\a', 'h', '\x2', '\x2', '\x927', '\x928', '\x5', '\x174', '\xBB', '\x2', 
		'\x928', '\x929', '\a', 'i', '\x2', '\x2', '\x929', '\x92B', '\a', '\x17', 
		'\x2', '\x2', '\x92A', '\x92C', '\a', '\x87', '\x2', '\x2', '\x92B', '\x92A', 
		'\x3', '\x2', '\x2', '\x2', '\x92B', '\x92C', '\x3', '\x2', '\x2', '\x2', 
		'\x92C', '\x92D', '\x3', '\x2', '\x2', '\x2', '\x92D', '\x92E', '\a', 
		'g', '\x2', '\x2', '\x92E', '\x92F', '\x5', '\x6', '\x4', '\x2', '\x92F', 
		'\x931', '\x3', '\x2', '\x2', '\x2', '\x930', '\x900', '\x3', '\x2', '\x2', 
		'\x2', '\x930', '\x907', '\x3', '\x2', '\x2', '\x2', '\x930', '\x90D', 
		'\x3', '\x2', '\x2', '\x2', '\x930', '\x914', '\x3', '\x2', '\x2', '\x2', 
		'\x930', '\x91A', '\x3', '\x2', '\x2', '\x2', '\x930', '\x925', '\x3', 
		'\x2', '\x2', '\x2', '\x931', '\x179', '\x3', '\x2', '\x2', '\x2', '\x932', 
		'\x933', '\x5', '\x17E', '\xC0', '\x2', '\x933', '\x935', '\a', 'h', '\x2', 
		'\x2', '\x934', '\x936', '\x5', '\x180', '\xC1', '\x2', '\x935', '\x934', 
		'\x3', '\x2', '\x2', '\x2', '\x935', '\x936', '\x3', '\x2', '\x2', '\x2', 
		'\x936', '\x937', '\x3', '\x2', '\x2', '\x2', '\x937', '\x938', '\a', 
		'i', '\x2', '\x2', '\x938', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x939', 
		'\x949', '\x5', '\x17A', '\xBE', '\x2', '\x93A', '\x93B', '\x5', '\x16E', 
		'\xB8', '\x2', '\x93B', '\x93D', '\a', 'h', '\x2', '\x2', '\x93C', '\x93E', 
		'\x5', '\x180', '\xC1', '\x2', '\x93D', '\x93C', '\x3', '\x2', '\x2', 
		'\x2', '\x93D', '\x93E', '\x3', '\x2', '\x2', '\x2', '\x93E', '\x93F', 
		'\x3', '\x2', '\x2', '\x2', '\x93F', '\x940', '\a', 'i', '\x2', '\x2', 
		'\x940', '\x949', '\x3', '\x2', '\x2', '\x2', '\x941', '\x942', '\x5', 
		'\x170', '\xB9', '\x2', '\x942', '\x944', '\a', 'h', '\x2', '\x2', '\x943', 
		'\x945', '\x5', '\x180', '\xC1', '\x2', '\x944', '\x943', '\x3', '\x2', 
		'\x2', '\x2', '\x944', '\x945', '\x3', '\x2', '\x2', '\x2', '\x945', '\x946', 
		'\x3', '\x2', '\x2', '\x2', '\x946', '\x947', '\a', 'i', '\x2', '\x2', 
		'\x947', '\x949', '\x3', '\x2', '\x2', '\x2', '\x948', '\x939', '\x3', 
		'\x2', '\x2', '\x2', '\x948', '\x93A', '\x3', '\x2', '\x2', '\x2', '\x948', 
		'\x941', '\x3', '\x2', '\x2', '\x2', '\x949', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x94A', '\x94B', '\a', '\x87', '\x2', '\x2', '\x94B', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x94C', '\x94D', '\b', '\xC1', '\x1', '\x2', 
		'\x94D', '\x94F', '\x5', '\x182', '\xC2', '\x2', '\x94E', '\x950', '\a', 
		'\x85', '\x2', '\x2', '\x94F', '\x94E', '\x3', '\x2', '\x2', '\x2', '\x94F', 
		'\x950', '\x3', '\x2', '\x2', '\x2', '\x950', '\x959', '\x3', '\x2', '\x2', 
		'\x2', '\x951', '\x952', '\f', '\x3', '\x2', '\x2', '\x952', '\x953', 
		'\a', '|', '\x2', '\x2', '\x953', '\x955', '\x5', '\x182', '\xC2', '\x2', 
		'\x954', '\x956', '\a', '\x85', '\x2', '\x2', '\x955', '\x954', '\x3', 
		'\x2', '\x2', '\x2', '\x955', '\x956', '\x3', '\x2', '\x2', '\x2', '\x956', 
		'\x958', '\x3', '\x2', '\x2', '\x2', '\x957', '\x951', '\x3', '\x2', '\x2', 
		'\x2', '\x958', '\x95B', '\x3', '\x2', '\x2', '\x2', '\x959', '\x957', 
		'\x3', '\x2', '\x2', '\x2', '\x959', '\x95A', '\x3', '\x2', '\x2', '\x2', 
		'\x95A', '\x181', '\x3', '\x2', '\x2', '\x2', '\x95B', '\x959', '\x3', 
		'\x2', '\x2', '\x2', '\x95C', '\x960', '\x5', '\xFE', '\x80', '\x2', '\x95D', 
		'\x960', '\x5', 'Z', '.', '\x2', '\x95E', '\x960', '\x5', '\x6', '\x4', 
		'\x2', '\x95F', '\x95C', '\x3', '\x2', '\x2', '\x2', '\x95F', '\x95D', 
		'\x3', '\x2', '\x2', '\x2', '\x95F', '\x95E', '\x3', '\x2', '\x2', '\x2', 
		'\x960', '\x183', '\x3', '\x2', '\x2', '\x2', '\x961', '\x962', '\a', 
		'N', '\x2', '\x2', '\x962', '\x963', '\x5', '\f', '\a', '\x2', '\x963', 
		'\x964', '\a', '\x87', '\x2', '\x2', '\x964', '\x96D', '\x3', '\x2', '\x2', 
		'\x2', '\x965', '\x966', '\a', 'N', '\x2', '\x2', '\x966', '\x968', '\x5', 
		'\f', '\a', '\x2', '\x967', '\x969', '\a', '\x46', '\x2', '\x2', '\x968', 
		'\x967', '\x3', '\x2', '\x2', '\x2', '\x968', '\x969', '\x3', '\x2', '\x2', 
		'\x2', '\x969', '\x96A', '\x3', '\x2', '\x2', '\x2', '\x96A', '\x96B', 
		'\x5', '\x17A', '\xBE', '\x2', '\x96B', '\x96D', '\x3', '\x2', '\x2', 
		'\x2', '\x96C', '\x961', '\x3', '\x2', '\x2', '\x2', '\x96C', '\x965', 
		'\x3', '\x2', '\x2', '\x2', '\x96D', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x96E', '\x970', '\a', '&', '\x2', '\x2', '\x96F', '\x96E', '\x3', '\x2', 
		'\x2', '\x2', '\x96F', '\x970', '\x3', '\x2', '\x2', '\x2', '\x970', '\x971', 
		'\x3', '\x2', '\x2', '\x2', '\x971', '\x972', '\a', '\x46', '\x2', '\x2', 
		'\x972', '\x973', '\x5', 'x', '=', '\x2', '\x973', '\x187', '\x3', '\x2', 
		'\x2', '\x2', '\x974', '\x975', '\a', '\x46', '\x2', '\x2', '\x975', '\x976', 
		'\a', 'h', '\x2', '\x2', '\x976', '\x977', '\a', 'i', '\x2', '\x2', '\x977', 
		'\x978', '\x5', 'x', '=', '\x2', '\x978', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x979', '\x97A', '\a', 'K', '\x2', '\x2', '\x97A', '\x97B', '\x5', 
		'\x62', '\x32', '\x2', '\x97B', '\x97C', '\x5', '\x18E', '\xC8', '\x2', 
		'\x97C', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x97D', '\x97F', '\a', 
		'K', '\x2', '\x2', '\x97E', '\x980', '\x5', '\x166', '\xB4', '\x2', '\x97F', 
		'\x97E', '\x3', '\x2', '\x2', '\x2', '\x97F', '\x980', '\x3', '\x2', '\x2', 
		'\x2', '\x980', '\x981', '\x3', '\x2', '\x2', '\x2', '\x981', '\x982', 
		'\x5', '\x62', '\x32', '\x2', '\x982', '\x983', '\x5', '\x18E', '\xC8', 
		'\x2', '\x983', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x984', '\x986', 
		'\x5', '\x190', '\xC9', '\x2', '\x985', '\x987', '\x5', '\x18E', '\xC8', 
		'\x2', '\x986', '\x985', '\x3', '\x2', '\x2', '\x2', '\x986', '\x987', 
		'\x3', '\x2', '\x2', '\x2', '\x987', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x988', '\x989', '\a', '\x13', '\x2', '\x2', '\x989', '\x98A', '\a', 
		'W', '\x2', '\x2', '\x98A', '\x98B', '\x5', '\x192', '\xCA', '\x2', '\x98B', 
		'\x98C', '\a', 'X', '\x2', '\x2', '\x98C', '\x98D', '\x5', '\x62', '\x32', 
		'\x2', '\x98D', '\x191', '\x3', '\x2', '\x2', '\x2', '\x98E', '\x990', 
		'\x5', '\xD0', 'i', '\x2', '\x98F', '\x98E', '\x3', '\x2', '\x2', '\x2', 
		'\x98F', '\x990', '\x3', '\x2', '\x2', '\x2', '\x990', '\x991', '\x3', 
		'\x2', '\x2', '\x2', '\x991', '\x992', '\x5', '\x94', 'K', '\x2', '\x992', 
		'\x993', '\x5', '\xEA', 'v', '\x2', '\x993', '\x99D', '\x3', '\x2', '\x2', 
		'\x2', '\x994', '\x996', '\x5', '\xD0', 'i', '\x2', '\x995', '\x994', 
		'\x3', '\x2', '\x2', '\x2', '\x995', '\x996', '\x3', '\x2', '\x2', '\x2', 
		'\x996', '\x997', '\x3', '\x2', '\x2', '\x2', '\x997', '\x999', '\x5', 
		'\x94', 'K', '\x2', '\x998', '\x99A', '\x5', '\x100', '\x81', '\x2', '\x999', 
		'\x998', '\x3', '\x2', '\x2', '\x2', '\x999', '\x99A', '\x3', '\x2', '\x2', 
		'\x2', '\x99A', '\x99D', '\x3', '\x2', '\x2', '\x2', '\x99B', '\x99D', 
		'\a', '\x85', '\x2', '\x2', '\x99C', '\x98F', '\x3', '\x2', '\x2', '\x2', 
		'\x99C', '\x995', '\x3', '\x2', '\x2', '\x2', '\x99C', '\x99B', '\x3', 
		'\x2', '\x2', '\x2', '\x99D', '\x193', '\x3', '\x2', '\x2', '\x2', '\x99E', 
		'\x9A0', '\a', 'I', '\x2', '\x2', '\x99F', '\x9A1', '\x5', 'T', '+', '\x2', 
		'\x9A0', '\x99F', '\x3', '\x2', '\x2', '\x2', '\x9A0', '\x9A1', '\x3', 
		'\x2', '\x2', '\x2', '\x9A1', '\x195', '\x3', '\x2', '\x2', '\x2', '\x9A2', 
		'\x9A5', '\x5', '\x198', '\xCD', '\x2', '\x9A3', '\x9A5', '\x5', '\x19C', 
		'\xCF', '\x2', '\x9A4', '\x9A2', '\x3', '\x2', '\x2', '\x2', '\x9A4', 
		'\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9A5', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x9A6', '\x9A7', '\a', 'I', '\x2', '\x2', '\x9A7', '\x9A9', '\a', 
		'W', '\x2', '\x2', '\x9A8', '\x9AA', '\x5', '\x19A', '\xCE', '\x2', '\x9A9', 
		'\x9A8', '\x3', '\x2', '\x2', '\x2', '\x9A9', '\x9AA', '\x3', '\x2', '\x2', 
		'\x2', '\x9AA', '\x9AB', '\x3', '\x2', '\x2', '\x2', '\x9AB', '\x9AC', 
		'\a', 'X', '\x2', '\x2', '\x9AC', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x9AD', '\x9AE', '\b', '\xCE', '\x1', '\x2', '\x9AE', '\x9B0', '\x5', 
		'\xFE', '\x80', '\x2', '\x9AF', '\x9B1', '\a', '\x85', '\x2', '\x2', '\x9B0', 
		'\x9AF', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x9B1', '\x3', '\x2', '\x2', 
		'\x2', '\x9B1', '\x9BA', '\x3', '\x2', '\x2', '\x2', '\x9B2', '\x9B3', 
		'\f', '\x3', '\x2', '\x2', '\x9B3', '\x9B4', '\a', '|', '\x2', '\x2', 
		'\x9B4', '\x9B6', '\x5', '\xFE', '\x80', '\x2', '\x9B5', '\x9B7', '\a', 
		'\x85', '\x2', '\x2', '\x9B6', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9B6', 
		'\x9B7', '\x3', '\x2', '\x2', '\x2', '\x9B7', '\x9B9', '\x3', '\x2', '\x2', 
		'\x2', '\x9B8', '\x9B2', '\x3', '\x2', '\x2', '\x2', '\x9B9', '\x9BC', 
		'\x3', '\x2', '\x2', '\x2', '\x9BA', '\x9B8', '\x3', '\x2', '\x2', '\x2', 
		'\x9BA', '\x9BB', '\x3', '\x2', '\x2', '\x2', '\x9BB', '\x19B', '\x3', 
		'\x2', '\x2', '\x2', '\x9BC', '\x9BA', '\x3', '\x2', '\x2', '\x2', '\x9BD', 
		'\x9BE', '\a', '\x34', '\x2', '\x2', '\x9BE', '\x9BF', '\a', 'W', '\x2', 
		'\x2', '\x9BF', '\x9C0', '\x5', 'Z', '.', '\x2', '\x9C0', '\x9C1', '\a', 
		'X', '\x2', '\x2', '\x9C1', '\x9C4', '\x3', '\x2', '\x2', '\x2', '\x9C2', 
		'\x9C4', '\a', '\x34', '\x2', '\x2', '\x9C3', '\x9BD', '\x3', '\x2', '\x2', 
		'\x2', '\x9C3', '\x9C2', '\x3', '\x2', '\x2', '\x2', '\x9C4', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x9C5', '\x9C6', '\a', 'i', '\x2', '\x2', 
		'\x9C6', '\x9C7', '\a', 'i', '\x2', '\x2', '\x9C7', '\x19F', '\x3', '\x2', 
		'\x2', '\x2', '\x9C8', '\x9C9', '\a', 'i', '\x2', '\x2', '\x9C9', '\x9CA', 
		'\a', 'i', '\x2', '\x2', '\x9CA', '\x9CB', '\a', 'g', '\x2', '\x2', '\x9CB', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x9CC', '\x9FD', '\a', '\x33', '\x2', 
		'\x2', '\x9CD', '\x9FD', '\a', '\x1E', '\x2', '\x2', '\x9CE', '\x9CF', 
		'\a', '\x33', '\x2', '\x2', '\x9CF', '\x9D0', '\a', 'Y', '\x2', '\x2', 
		'\x9D0', '\x9FD', '\a', 'Z', '\x2', '\x2', '\x9D1', '\x9D2', '\a', '\x1E', 
		'\x2', '\x2', '\x9D2', '\x9D3', '\a', 'Y', '\x2', '\x2', '\x9D3', '\x9FD', 
		'\a', 'Z', '\x2', '\x2', '\x9D4', '\x9FD', '\a', ']', '\x2', '\x2', '\x9D5', 
		'\x9FD', '\a', '^', '\x2', '\x2', '\x9D6', '\x9FD', '\a', '_', '\x2', 
		'\x2', '\x9D7', '\x9FD', '\a', '`', '\x2', '\x2', '\x9D8', '\x9FD', '\a', 
		'\x61', '\x2', '\x2', '\x9D9', '\x9FD', '\a', '\x62', '\x2', '\x2', '\x9DA', 
		'\x9FD', '\a', '\x63', '\x2', '\x2', '\x9DB', '\x9FD', '\a', '\x64', '\x2', 
		'\x2', '\x9DC', '\x9FD', '\a', '\x65', '\x2', '\x2', '\x9DD', '\x9FD', 
		'\a', '\x66', '\x2', '\x2', '\x9DE', '\x9FD', '\a', 'g', '\x2', '\x2', 
		'\x9DF', '\x9FD', '\a', 'h', '\x2', '\x2', '\x9E0', '\x9FD', '\a', 'i', 
		'\x2', '\x2', '\x9E1', '\x9FD', '\a', 'j', '\x2', '\x2', '\x9E2', '\x9FD', 
		'\a', 'k', '\x2', '\x2', '\x9E3', '\x9FD', '\a', 'l', '\x2', '\x2', '\x9E4', 
		'\x9FD', '\a', 'm', '\x2', '\x2', '\x9E5', '\x9FD', '\a', 'n', '\x2', 
		'\x2', '\x9E6', '\x9FD', '\a', 'o', '\x2', '\x2', '\x9E7', '\x9FD', '\a', 
		'p', '\x2', '\x2', '\x9E8', '\x9FD', '\a', 'q', '\x2', '\x2', '\x9E9', 
		'\x9FD', '\a', 'r', '\x2', '\x2', '\x9EA', '\x9FD', '\x5', '\x19E', '\xD0', 
		'\x2', '\x9EB', '\x9FD', '\x5', '\x1A0', '\xD1', '\x2', '\x9EC', '\x9FD', 
		'\a', 's', '\x2', '\x2', '\x9ED', '\x9FD', '\a', 't', '\x2', '\x2', '\x9EE', 
		'\x9FD', '\a', 'u', '\x2', '\x2', '\x9EF', '\x9FD', '\a', 'v', '\x2', 
		'\x2', '\x9F0', '\x9FD', '\a', 'w', '\x2', '\x2', '\x9F1', '\x9FD', '\a', 
		'x', '\x2', '\x2', '\x9F2', '\x9FD', '\a', 'y', '\x2', '\x2', '\x9F3', 
		'\x9FD', '\a', 'z', '\x2', '\x2', '\x9F4', '\x9FD', '\a', '{', '\x2', 
		'\x2', '\x9F5', '\x9FD', '\a', '|', '\x2', '\x2', '\x9F6', '\x9FD', '\a', 
		'}', '\x2', '\x2', '\x9F7', '\x9FD', '\a', '~', '\x2', '\x2', '\x9F8', 
		'\x9F9', '\a', 'W', '\x2', '\x2', '\x9F9', '\x9FD', '\a', 'X', '\x2', 
		'\x2', '\x9FA', '\x9FB', '\a', 'Y', '\x2', '\x2', '\x9FB', '\x9FD', '\a', 
		'Z', '\x2', '\x2', '\x9FC', '\x9CC', '\x3', '\x2', '\x2', '\x2', '\x9FC', 
		'\x9CD', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9CE', '\x3', '\x2', '\x2', 
		'\x2', '\x9FC', '\x9D1', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9D4', 
		'\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9D5', '\x3', '\x2', '\x2', '\x2', 
		'\x9FC', '\x9D6', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9D7', '\x3', 
		'\x2', '\x2', '\x2', '\x9FC', '\x9D8', '\x3', '\x2', '\x2', '\x2', '\x9FC', 
		'\x9D9', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9DA', '\x3', '\x2', '\x2', 
		'\x2', '\x9FC', '\x9DB', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9DC', 
		'\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9DD', '\x3', '\x2', '\x2', '\x2', 
		'\x9FC', '\x9DE', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9DF', '\x3', 
		'\x2', '\x2', '\x2', '\x9FC', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9FC', 
		'\x9E1', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9E2', '\x3', '\x2', '\x2', 
		'\x2', '\x9FC', '\x9E3', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9E4', 
		'\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9E5', '\x3', '\x2', '\x2', '\x2', 
		'\x9FC', '\x9E6', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9E7', '\x3', 
		'\x2', '\x2', '\x2', '\x9FC', '\x9E8', '\x3', '\x2', '\x2', '\x2', '\x9FC', 
		'\x9E9', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9EA', '\x3', '\x2', '\x2', 
		'\x2', '\x9FC', '\x9EB', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9EC', 
		'\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9ED', '\x3', '\x2', '\x2', '\x2', 
		'\x9FC', '\x9EE', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9EF', '\x3', 
		'\x2', '\x2', '\x2', '\x9FC', '\x9F0', '\x3', '\x2', '\x2', '\x2', '\x9FC', 
		'\x9F1', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9F2', '\x3', '\x2', '\x2', 
		'\x2', '\x9FC', '\x9F3', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9F4', 
		'\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9F5', '\x3', '\x2', '\x2', '\x2', 
		'\x9FC', '\x9F6', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9F7', '\x3', 
		'\x2', '\x2', '\x2', '\x9FC', '\x9F8', '\x3', '\x2', '\x2', '\x2', '\x9FC', 
		'\x9FA', '\x3', '\x2', '\x2', '\x2', '\x9FD', '\x1A3', '\x3', '\x2', '\x2', 
		'\x2', '\x9FE', '\xA06', '\a', '\x88', '\x2', '\x2', '\x9FF', '\xA06', 
		'\a', '\x8E', '\x2', '\x2', '\xA00', '\xA06', '\a', '\x8F', '\x2', '\x2', 
		'\xA01', '\xA06', '\a', '\x90', '\x2', '\x2', '\xA02', '\xA06', '\x5', 
		'\x1A6', '\xD4', '\x2', '\xA03', '\xA06', '\x5', '\x1A8', '\xD5', '\x2', 
		'\xA04', '\xA06', '\x5', '\x1AA', '\xD6', '\x2', '\xA05', '\x9FE', '\x3', 
		'\x2', '\x2', '\x2', '\xA05', '\x9FF', '\x3', '\x2', '\x2', '\x2', '\xA05', 
		'\xA00', '\x3', '\x2', '\x2', '\x2', '\xA05', '\xA01', '\x3', '\x2', '\x2', 
		'\x2', '\xA05', '\xA02', '\x3', '\x2', '\x2', '\x2', '\xA05', '\xA03', 
		'\x3', '\x2', '\x2', '\x2', '\xA05', '\xA04', '\x3', '\x2', '\x2', '\x2', 
		'\xA06', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\xA07', '\xA08', '\t', 
		'\v', '\x2', '\x2', '\xA08', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\xA09', 
		'\xA0A', '\a', '\x35', '\x2', '\x2', '\xA0A', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\xA0B', '\xA0C', '\t', '\f', '\x2', '\x2', '\xA0C', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x1AD', '\x1B9', '\x1BD', '\x1C8', '\x1CC', 
		'\x1DB', '\x1E2', '\x1E7', '\x1E9', '\x1EE', '\x1F4', '\x1FE', '\x205', 
		'\x20B', '\x20F', '\x214', '\x21A', '\x221', '\x227', '\x22A', '\x22D', 
		'\x230', '\x237', '\x23E', '\x272', '\x281', '\x287', '\x28D', '\x29A', 
		'\x29C', '\x2A2', '\x2B1', '\x2B7', '\x2D5', '\x2DA', '\x2DE', '\x2E2', 
		'\x2E5', '\x2E9', '\x2EF', '\x2F1', '\x2F9', '\x2FD', '\x300', '\x307', 
		'\x30E', '\x312', '\x317', '\x31B', '\x31E', '\x323', '\x329', '\x336', 
		'\x341', '\x343', '\x352', '\x354', '\x360', '\x362', '\x36F', '\x371', 
		'\x383', '\x385', '\x391', '\x393', '\x39E', '\x3A9', '\x3B4', '\x3BF', 
		'\x3CA', '\x3D4', '\x3DC', '\x3E9', '\x3F3', '\x3FA', '\x3FE', '\x402', 
		'\x406', '\x40A', '\x40F', '\x412', '\x415', '\x41B', '\x423', '\x428', 
		'\x42B', '\x431', '\x43C', '\x453', '\x457', '\x45F', '\x465', '\x479', 
		'\x47D', '\x48A', '\x48E', '\x491', '\x498', '\x4A0', '\x4AA', '\x4B5', 
		'\x4C2', '\x4CC', '\x4D1', '\x4D8', '\x4DB', '\x4E0', '\x4E5', '\x4FA', 
		'\x4FE', '\x503', '\x50E', '\x514', '\x518', '\x51D', '\x521', '\x526', 
		'\x529', '\x53F', '\x545', '\x550', '\x554', '\x557', '\x561', '\x567', 
		'\x56A', '\x571', '\x57B', '\x57F', '\x582', '\x585', '\x589', '\x58E', 
		'\x590', '\x594', '\x598', '\x5A1', '\x5AE', '\x5B6', '\x5BC', '\x5C2', 
		'\x5C6', '\x5C9', '\x5D2', '\x5DB', '\x5E3', '\x5EE', '\x5F4', '\x5FF', 
		'\x602', '\x607', '\x616', '\x61C', '\x625', '\x62F', '\x635', '\x63D', 
		'\x641', '\x645', '\x64A', '\x64F', '\x656', '\x658', '\x65D', '\x661', 
		'\x66F', '\x675', '\x684', '\x68E', '\x693', '\x69A', '\x6A0', '\x6A5', 
		'\x6AB', '\x6B2', '\x6B6', '\x6B8', '\x6BA', '\x6C1', '\x6C4', '\x6C7', 
		'\x6CA', '\x6CF', '\x6D3', '\x6D6', '\x6DA', '\x6DE', '\x6E3', '\x6E6', 
		'\x6E8', '\x6EC', '\x6F3', '\x6F9', '\x6FD', '\x703', '\x708', '\x70A', 
		'\x710', '\x714', '\x71A', '\x721', '\x725', '\x727', '\x729', '\x730', 
		'\x73A', '\x73E', '\x740', '\x742', '\x746', '\x749', '\x74F', '\x759', 
		'\x75D', '\x763', '\x76B', '\x76F', '\x772', '\x776', '\x77B', '\x77E', 
		'\x781', '\x785', '\x78D', '\x793', '\x7AD', '\x7B6', '\x7C3', '\x7C9', 
		'\x7CC', '\x7D6', '\x7DD', '\x7E2', '\x7E6', '\x7EB', '\x7F1', '\x7F5', 
		'\x7FB', '\x801', '\x805', '\x80A', '\x810', '\x813', '\x817', '\x81A', 
		'\x81E', '\x821', '\x824', '\x826', '\x829', '\x835', '\x83A', '\x83C', 
		'\x83F', '\x842', '\x845', '\x84F', '\x859', '\x85E', '\x861', '\x865', 
		'\x868', '\x86B', '\x86F', '\x878', '\x887', '\x88D', '\x891', '\x895', 
		'\x899', '\x89D', '\x8A1', '\x8A5', '\x8A9', '\x8AC', '\x8B0', '\x8BB', 
		'\x8BF', '\x8C6', '\x8CA', '\x8CF', '\x8D4', '\x8DB', '\x8DF', '\x8E9', 
		'\x8F9', '\x8FE', '\x902', '\x905', '\x909', '\x90F', '\x912', '\x916', 
		'\x920', '\x923', '\x92B', '\x930', '\x935', '\x93D', '\x944', '\x948', 
		'\x94F', '\x955', '\x959', '\x95F', '\x968', '\x96C', '\x96F', '\x97F', 
		'\x986', '\x98F', '\x995', '\x999', '\x99C', '\x9A0', '\x9A4', '\x9A9', 
		'\x9B0', '\x9B6', '\x9BA', '\x9C3', '\x9FC', '\xA05',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
