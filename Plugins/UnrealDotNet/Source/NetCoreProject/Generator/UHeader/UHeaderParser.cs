//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UHeader.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class UHeaderParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, PtrQuant=9, 
		RefQuant=10, Private=11, Protected=12, Public=13, Inline=14, Virtual=15, 
		Class=16, Struct=17, Const=18, Static=19, Extern=20, Template=21, BracketsOpen=22, 
		BracketsClose=23, SingleLineDerective=24, MultiLineDerective=25, Identifier=26, 
		Literal=27, Skiped=28, Whitespace=29, Newline=30, BlockComment=31, LineComment=32;
	public const int
		RULE_translationUnit = 0, RULE_classPreDeclaration = 1, RULE_classDeclaration = 2, 
		RULE_classOrStruct = 3, RULE_classParentList = 4, RULE_className = 5, 
		RULE_classBody = 6, RULE_uDefine = 7, RULE_uDefineName = 8, RULE_uMeta = 9, 
		RULE_uMetaParametrList = 10, RULE_uMetaParametr = 11, RULE_uMetaParamKey = 12, 
		RULE_uMetaParamValue = 13, RULE_method = 14, RULE_methodParamsList = 15, 
		RULE_methodParametr = 16, RULE_methodParametrName = 17, RULE_methodParametrDefaultValue = 18, 
		RULE_methodBody = 19, RULE_methodBodyContent = 20, RULE_methodName = 21, 
		RULE_property = 22, RULE_propertyName = 23, RULE_propertyDefaultValue = 24, 
		RULE_type = 25, RULE_isPtrQuant = 26, RULE_isRefQuant = 27, RULE_typeName = 28, 
		RULE_typeTemplateName = 29, RULE_isVirtual = 30, RULE_isConst = 31, RULE_isStatic = 32, 
		RULE_templateDefine = 33, RULE_templateParamList = 34, RULE_templateParam = 35, 
		RULE_templateParamType = 36, RULE_templateParamLiter = 37, RULE_accessSpecifierContainer = 38, 
		RULE_accessSpecifier = 39, RULE_preprocessDerective = 40;
	public static readonly string[] ruleNames = {
		"translationUnit", "classPreDeclaration", "classDeclaration", "classOrStruct", 
		"classParentList", "className", "classBody", "uDefine", "uDefineName", 
		"uMeta", "uMetaParametrList", "uMetaParametr", "uMetaParamKey", "uMetaParamValue", 
		"method", "methodParamsList", "methodParametr", "methodParametrName", 
		"methodParametrDefaultValue", "methodBody", "methodBodyContent", "methodName", 
		"property", "propertyName", "propertyDefaultValue", "type", "isPtrQuant", 
		"isRefQuant", "typeName", "typeTemplateName", "isVirtual", "isConst", 
		"isStatic", "templateDefine", "templateParamList", "templateParam", "templateParamType", 
		"templateParamLiter", "accessSpecifierContainer", "accessSpecifier", "preprocessDerective"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'('", "')'", "','", "'='", "'<'", "'>'", "'*'", "'&'", 
		"'private'", "'protected'", "'public'", "'inline'", "'virtual'", "'class'", 
		"'struct'", "'const'", "'static'", "'extern'", "'template'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "PtrQuant", "RefQuant", 
		"Private", "Protected", "Public", "Inline", "Virtual", "Class", "Struct", 
		"Const", "Static", "Extern", "Template", "BracketsOpen", "BracketsClose", 
		"SingleLineDerective", "MultiLineDerective", "Identifier", "Literal", 
		"Skiped", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UHeader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UHeaderParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UHeaderParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UHeaderParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TranslationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(UHeaderParser.Eof, 0); }
		public ClassPreDeclarationContext[] classPreDeclaration() {
			return GetRuleContexts<ClassPreDeclarationContext>();
		}
		public ClassPreDeclarationContext classPreDeclaration(int i) {
			return GetRuleContext<ClassPreDeclarationContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Template) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier))) != 0)) {
				{
				State = 86;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 82; classPreDeclaration();
					}
					break;
				case 2:
					{
					State = 83; classDeclaration();
					}
					break;
				case 3:
					{
					State = 84; uDefine();
					}
					break;
				case 4:
					{
					State = 85; preprocessDerective();
					}
					break;
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPreDeclarationContext : ParserRuleContext {
		public ClassOrStructContext classOrStruct() {
			return GetRuleContext<ClassOrStructContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassPreDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPreDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPreDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPreDeclarationContext classPreDeclaration() {
		ClassPreDeclarationContext _localctx = new ClassPreDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_classPreDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; classOrStruct();
			State = 94; className();
			State = 95; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ClassOrStructContext classOrStruct() {
			return GetRuleContext<ClassOrStructContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 97; templateDefine();
				}
			}

			State = 100; classOrStruct();
			State = 101; className();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 102; classParentList();
				}
			}

			State = 105; Match(BracketsOpen);
			State = 106; classBody();
			State = 107; Match(BracketsClose);
			State = 108; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ClassOrStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStruct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructContext classOrStruct() {
		ClassOrStructContext _localctx = new ClassOrStructContext(Context, State);
		EnterRule(_localctx, 6, RULE_classOrStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParentListContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ClassParentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParentListContext classParentList() {
		ClassParentListContext _localctx = new ClassParentListContext(Context, State);
		EnterRule(_localctx, 8, RULE_classParentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(T__1);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
				{
				State = 113; accessSpecifier();
				}
			}

			State = 116; className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public AccessSpecifierContainerContext[] accessSpecifierContainer() {
			return GetRuleContexts<AccessSpecifierContainerContext>();
		}
		public AccessSpecifierContainerContext accessSpecifierContainer(int i) {
			return GetRuleContext<AccessSpecifierContainerContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Const) | (1L << Static) | (1L << Template) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier))) != 0)) {
				{
				State = 125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 120; accessSpecifierContainer();
					}
					break;
				case 2:
					{
					State = 121; method();
					}
					break;
				case 3:
					{
					State = 122; property();
					}
					break;
				case 4:
					{
					State = 123; uDefine();
					}
					break;
				case 5:
					{
					State = 124; preprocessDerective();
					}
					break;
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineContext : ParserRuleContext {
		public UDefineNameContext uDefineName() {
			return GetRuleContext<UDefineNameContext>(0);
		}
		public UMetaContext uMeta() {
			return GetRuleContext<UMetaContext>(0);
		}
		public UDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineContext uDefine() {
		UDefineContext _localctx = new UDefineContext(Context, State);
		EnterRule(_localctx, 14, RULE_uDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; uDefineName();
			State = 131; Match(T__2);
			State = 132; uMeta();
			State = 133; Match(T__3);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 134; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public UDefineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefineName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineNameContext uDefineName() {
		UDefineNameContext _localctx = new UDefineNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_uDefineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaContext : ParserRuleContext {
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMeta; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaContext uMeta() {
		UMetaContext _localctx = new UMetaContext(Context, State);
		EnterRule(_localctx, 18, RULE_uMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Const) | (1L << Identifier) | (1L << Literal))) != 0)) {
				{
				State = 139; uMetaParametrList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrListContext : ParserRuleContext {
		public UMetaParametrContext uMetaParametr() {
			return GetRuleContext<UMetaParametrContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametrList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrListContext uMetaParametrList() {
		UMetaParametrListContext _localctx = new UMetaParametrListContext(Context, State);
		EnterRule(_localctx, 20, RULE_uMetaParametrList);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142; uMetaParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143; uMetaParametr();
				State = 144; Match(T__4);
				State = 145; uMetaParametrList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrContext : ParserRuleContext {
		public UMetaParamKeyContext uMetaParamKey() {
			return GetRuleContext<UMetaParamKeyContext>(0);
		}
		public UMetaParamValueContext uMetaParamValue() {
			return GetRuleContext<UMetaParamValueContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrContext uMetaParametr() {
		UMetaParametrContext _localctx = new UMetaParametrContext(Context, State);
		EnterRule(_localctx, 22, RULE_uMetaParametr);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; uMetaParamKey();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150; uMetaParamKey();
				State = 151; Match(T__5);
				State = 152; uMetaParamValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154; uMetaParamKey();
				State = 155; Match(T__5);
				State = 156; Match(T__2);
				State = 157; uMetaParametrList();
				State = 158; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamKeyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public UMetaParamKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamKey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamKeyContext uMetaParamKey() {
		UMetaParamKeyContext _localctx = new UMetaParamKeyContext(Context, State);
		EnterRule(_localctx, 24, RULE_uMetaParamKey);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
			case RefQuant:
			case Class:
			case Struct:
			case Const:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; type();
				}
				break;
			case Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163; Match(Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamValueContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public UMetaParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamValueContext uMetaParamValue() {
		UMetaParamValueContext _localctx = new UMetaParamValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_uMetaParamValue);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
			case RefQuant:
			case Class:
			case Struct:
			case Const:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166; type();
				}
				break;
			case Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; Match(Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public IsStaticContext isStatic() {
			return GetRuleContext<IsStaticContext>(0);
		}
		public IsVirtualContext isVirtual() {
			return GetRuleContext<IsVirtualContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 28, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 170; templateDefine();
				}
			}

			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static) {
				{
				State = 173; isStatic();
				}
			}

			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Virtual) {
				{
				State = 176; isVirtual();
				}
			}

			State = 179; type();
			State = 180; methodName();
			State = 181; Match(T__2);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 182; methodParamsList();
				}
			}

			State = 185; Match(T__3);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 186; isConst();
				}
			}

			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BracketsOpen:
				{
				State = 189; methodBody();
				}
				break;
			case T__0:
				{
				State = 190; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParamsListContext : ParserRuleContext {
		public MethodParametrContext methodParametr() {
			return GetRuleContext<MethodParametrContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public MethodParamsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParamsList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParamsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParamsListContext methodParamsList() {
		MethodParamsListContext _localctx = new MethodParamsListContext(Context, State);
		EnterRule(_localctx, 30, RULE_methodParamsList);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; methodParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; methodParametr();
				State = 195; Match(T__4);
				State = 196; methodParamsList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public MethodParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrContext methodParametr() {
		MethodParametrContext _localctx = new MethodParametrContext(Context, State);
		EnterRule(_localctx, 32, RULE_methodParametr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; type();
			State = 201; methodParametrName();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 202; Match(T__5);
				State = 203; methodParametrDefaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public MethodParametrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrNameContext methodParametrName() {
		MethodParametrNameContext _localctx = new MethodParametrNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_methodParametrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrDefaultValueContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public MethodParametrDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrDefaultValueContext methodParametrDefaultValue() {
		MethodParametrDefaultValueContext _localctx = new MethodParametrDefaultValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_methodParametrDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContentContext methodBodyContent() {
			return GetRuleContext<MethodBodyContentContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(BracketsOpen);
			State = 211; methodBodyContent();
			State = 212; Match(BracketsClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContentContext : ParserRuleContext {
		public ITerminalNode[] BracketsOpen() { return GetTokens(UHeaderParser.BracketsOpen); }
		public ITerminalNode BracketsOpen(int i) {
			return GetToken(UHeaderParser.BracketsOpen, i);
		}
		public ITerminalNode[] BracketsClose() { return GetTokens(UHeaderParser.BracketsClose); }
		public ITerminalNode BracketsClose(int i) {
			return GetToken(UHeaderParser.BracketsClose, i);
		}
		public MethodBodyContentContext[] methodBodyContent() {
			return GetRuleContexts<MethodBodyContentContext>();
		}
		public MethodBodyContentContext methodBodyContent(int i) {
			return GetRuleContext<MethodBodyContentContext>(i);
		}
		public MethodBodyContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBodyContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBodyContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContentContext methodBodyContent() {
		MethodBodyContentContext _localctx = new MethodBodyContentContext(Context, State);
		EnterRule(_localctx, 40, RULE_methodBodyContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Template) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << Literal) | (1L << Skiped) | (1L << Whitespace) | (1L << Newline) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 214;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==BracketsOpen || _la==BracketsClose) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BracketsOpen) {
				{
				State = 220; Match(BracketsOpen);
				State = 221; methodBodyContent();
				State = 222; Match(BracketsClose);
				State = 223; methodBodyContent();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public IsStaticContext isStatic() {
			return GetRuleContext<IsStaticContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 44, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static) {
				{
				State = 229; isStatic();
				}
			}

			State = 232; type();
			State = 233; propertyName();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__5) {
				{
				State = 234;
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==T__5) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 235; propertyDefaultValue();
				}
			}

			State = 238; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefaultValueContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public PropertyDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefaultValueContext propertyDefaultValue() {
		PropertyDefaultValueContext _localctx = new PropertyDefaultValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_propertyDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public ClassOrStructContext classOrStruct() {
			return GetRuleContext<ClassOrStructContext>(0);
		}
		public IsPtrQuantContext[] isPtrQuant() {
			return GetRuleContexts<IsPtrQuantContext>();
		}
		public IsPtrQuantContext isPtrQuant(int i) {
			return GetRuleContext<IsPtrQuantContext>(i);
		}
		public IsRefQuantContext[] isRefQuant() {
			return GetRuleContexts<IsRefQuantContext>();
		}
		public IsRefQuantContext isRefQuant(int i) {
			return GetRuleContext<IsRefQuantContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 244; isConst();
				}
			}

			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Class || _la==Struct) {
				{
				State = 247; classOrStruct();
				}
			}

			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 250; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 251; isRefQuant();
				}
				break;
			case Identifier:
				break;
			default:
				break;
			}
			State = 254; typeName();
			State = 257;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 255; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 256; isRefQuant();
				}
				break;
			case T__3:
			case T__4:
			case T__5:
			case Identifier:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsPtrQuantContext : ParserRuleContext {
		public ITerminalNode PtrQuant() { return GetToken(UHeaderParser.PtrQuant, 0); }
		public IsPtrQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isPtrQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsPtrQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsPtrQuantContext isPtrQuant() {
		IsPtrQuantContext _localctx = new IsPtrQuantContext(Context, State);
		EnterRule(_localctx, 52, RULE_isPtrQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(PtrQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsRefQuantContext : ParserRuleContext {
		public ITerminalNode RefQuant() { return GetToken(UHeaderParser.RefQuant, 0); }
		public IsRefQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isRefQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRefQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsRefQuantContext isRefQuant() {
		IsRefQuantContext _localctx = new IsRefQuantContext(Context, State);
		EnterRule(_localctx, 54, RULE_isRefQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(RefQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TypeTemplateNameContext typeTemplateName() {
			return GetRuleContext<TypeTemplateNameContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeName);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264; typeTemplateName();
				{
				State = 265; Match(T__6);
				State = 266; typeName();
				State = 267; Match(T__7);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTemplateNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TypeTemplateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTemplateName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTemplateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTemplateNameContext typeTemplateName() {
		TypeTemplateNameContext _localctx = new TypeTemplateNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeTemplateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsVirtualContext : ParserRuleContext {
		public ITerminalNode Virtual() { return GetToken(UHeaderParser.Virtual, 0); }
		public IsVirtualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isVirtual; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsVirtual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsVirtualContext isVirtual() {
		IsVirtualContext _localctx = new IsVirtualContext(Context, State);
		EnterRule(_localctx, 60, RULE_isVirtual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsConstContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(UHeaderParser.Const, 0); }
		public IsConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsConstContext isConst() {
		IsConstContext _localctx = new IsConstContext(Context, State);
		EnterRule(_localctx, 62, RULE_isConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsStaticContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(UHeaderParser.Static, 0); }
		public IsStaticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isStatic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsStatic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsStaticContext isStatic() {
		IsStaticContext _localctx = new IsStaticContext(Context, State);
		EnterRule(_localctx, 64, RULE_isStatic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(Static);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefineContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(UHeaderParser.Template, 0); }
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefineContext templateDefine() {
		TemplateDefineContext _localctx = new TemplateDefineContext(Context, State);
		EnterRule(_localctx, 66, RULE_templateDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(Template);
			State = 280; Match(T__6);
			State = 281; templateParamList();
			State = 282; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamListContext : ParserRuleContext {
		public TemplateParamContext templateParam() {
			return GetRuleContext<TemplateParamContext>(0);
		}
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamListContext templateParamList() {
		TemplateParamListContext _localctx = new TemplateParamListContext(Context, State);
		EnterRule(_localctx, 68, RULE_templateParamList);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; templateParam();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; templateParam();
				State = 286; Match(T__4);
				State = 287; templateParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamContext : ParserRuleContext {
		public TemplateParamTypeContext templateParamType() {
			return GetRuleContext<TemplateParamTypeContext>(0);
		}
		public TemplateParamLiterContext templateParamLiter() {
			return GetRuleContext<TemplateParamLiterContext>(0);
		}
		public TemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamContext templateParam() {
		TemplateParamContext _localctx = new TemplateParamContext(Context, State);
		EnterRule(_localctx, 70, RULE_templateParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; templateParamType();
			State = 292; templateParamLiter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TemplateParamTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamTypeContext templateParamType() {
		TemplateParamTypeContext _localctx = new TemplateParamTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_templateParamType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamLiterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TemplateParamLiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamLiter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamLiter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamLiterContext templateParamLiter() {
		TemplateParamLiterContext _localctx = new TemplateParamLiterContext(Context, State);
		EnterRule(_localctx, 74, RULE_templateParamLiter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContainerContext : ParserRuleContext {
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public AccessSpecifierContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifierContainer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifierContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContainerContext accessSpecifierContainer() {
		AccessSpecifierContainerContext _localctx = new AccessSpecifierContainerContext(Context, State);
		EnterRule(_localctx, 76, RULE_accessSpecifierContainer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; accessSpecifier();
			State = 299; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(UHeaderParser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(UHeaderParser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(UHeaderParser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext accessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessDerectiveContext : ParserRuleContext {
		public ITerminalNode SingleLineDerective() { return GetToken(UHeaderParser.SingleLineDerective, 0); }
		public ITerminalNode MultiLineDerective() { return GetToken(UHeaderParser.MultiLineDerective, 0); }
		public PreprocessDerectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessDerective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessDerective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessDerectiveContext preprocessDerective() {
		PreprocessDerectiveContext _localctx = new PreprocessDerectiveContext(Context, State);
		EnterRule(_localctx, 80, RULE_preprocessDerective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_la = TokenStream.LA(1);
			if ( !(_la==SingleLineDerective || _la==MultiLineDerective) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\x134', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', 'Y', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\\', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x5', '\x4', '\x65', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'j', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'u', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', '\x80', '\n', '\b', '\f', '\b', '\xE', '\b', '\x83', '\v', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x8A', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x5', '\v', '\x8F', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\x96', '\n', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xA3', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xA7', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xAB', '\n', '\xF', 
		'\x3', '\x10', '\x5', '\x10', '\xAE', '\n', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xB1', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB4', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xBA', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xBE', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC2', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\xC9', '\n', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xCF', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\a', '\x16', 
		'\xDA', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xDD', '\v', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\xE4', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x5', '\x18', '\xE9', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xEF', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x5', '\x1B', '\xF8', '\n', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\xFB', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\xFF', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x104', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x110', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x124', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x2', '\x2', '+', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', '\x2', 
		'\b', '\x3', '\x2', '\x12', '\x13', '\x3', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '\x18', '\x19', '\x4', '\x2', '\x4', '\x4', '\b', '\b', '\x3', 
		'\x2', '\r', '\xF', '\x3', '\x2', '\x1A', '\x1B', '\x2', '\x131', '\x2', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x4', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x64', '\x3', '\x2', '\x2', '\x2', '\b', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'r', '\x3', '\x2', '\x2', '\x2', '\f', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x81', '\x3', '\x2', '\x2', '\x2', '\x10', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x16', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xAD', '\x3', '\x2', '\x2', '\x2', ' ', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xCA', '\x3', '\x2', '\x2', '\x2', '$', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xD2', '\x3', '\x2', '\x2', '\x2', '(', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xDB', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '.', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x32', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x38', '\x107', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x10F', '\x3', '\x2', '\x2', '\x2', '<', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x113', '\x3', '\x2', '\x2', '\x2', '@', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x119', '\x3', '\x2', '\x2', '\x2', '\x46', '\x123', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x125', '\x3', '\x2', '\x2', '\x2', 'J', '\x128', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x12C', '\x3', '\x2', '\x2', '\x2', 'P', '\x12F', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x131', '\x3', '\x2', '\x2', '\x2', 'T', 'Y', '\x5', 
		'\x4', '\x3', '\x2', 'U', 'Y', '\x5', '\x6', '\x4', '\x2', 'V', 'Y', '\x5', 
		'\x10', '\t', '\x2', 'W', 'Y', '\x5', 'R', '*', '\x2', 'X', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', 
		'\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x2', '\x2', '\x3', 
		'^', '\x3', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x5', '\b', '\x5', 
		'\x2', '`', '\x61', '\x5', '\f', '\a', '\x2', '\x61', '\x62', '\a', '\x3', 
		'\x2', '\x2', '\x62', '\x5', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', 
		'\x5', '\x44', '#', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\x5', '\b', '\x5', '\x2', 'g', 'i', '\x5', 
		'\f', '\a', '\x2', 'h', 'j', '\x5', '\n', '\x6', '\x2', 'i', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\a', '\x18', '\x2', '\x2', 'l', 'm', '\x5', 
		'\xE', '\b', '\x2', 'm', 'n', '\a', '\x19', '\x2', '\x2', 'n', 'o', '\a', 
		'\x3', '\x2', '\x2', 'o', '\a', '\x3', '\x2', '\x2', '\x2', 'p', 'q', 
		'\t', '\x2', '\x2', '\x2', 'q', '\t', '\x3', '\x2', '\x2', '\x2', 'r', 
		't', '\a', '\x4', '\x2', '\x2', 's', 'u', '\x5', 'P', ')', '\x2', 't', 
		's', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', '\f', '\a', '\x2', 
		'w', '\v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\x1C', '\x2', 
		'\x2', 'y', '\r', '\x3', '\x2', '\x2', '\x2', 'z', '\x80', '\x5', 'N', 
		'(', '\x2', '{', '\x80', '\x5', '\x1E', '\x10', '\x2', '|', '\x80', '\x5', 
		'.', '\x18', '\x2', '}', '\x80', '\x5', '\x10', '\t', '\x2', '~', '\x80', 
		'\x5', 'R', '*', '\x2', '\x7F', 'z', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\x5', '\x12', '\n', '\x2', '\x85', '\x86', '\a', 
		'\x5', '\x2', '\x2', '\x86', '\x87', '\x5', '\x14', '\v', '\x2', '\x87', 
		'\x89', '\a', '\x6', '\x2', '\x2', '\x88', '\x8A', '\a', '\x3', '\x2', 
		'\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8C', '\a', '\x1C', '\x2', '\x2', '\x8C', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8F', '\x5', '\x16', '\f', '\x2', '\x8E', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x90', '\x96', '\x5', '\x18', '\r', 
		'\x2', '\x91', '\x92', '\x5', '\x18', '\r', '\x2', '\x92', '\x93', '\a', 
		'\a', '\x2', '\x2', '\x93', '\x94', '\x5', '\x16', '\f', '\x2', '\x94', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x95', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x91', '\x3', '\x2', '\x2', '\x2', '\x96', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\xA3', '\x5', '\x1A', '\xE', '\x2', '\x98', 
		'\x99', '\x5', '\x1A', '\xE', '\x2', '\x99', '\x9A', '\a', '\b', '\x2', 
		'\x2', '\x9A', '\x9B', '\x5', '\x1C', '\xF', '\x2', '\x9B', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\x5', '\x1A', '\xE', '\x2', '\x9D', 
		'\x9E', '\a', '\b', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x5', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '\x16', '\f', '\x2', '\xA0', '\xA1', '\a', 
		'\x6', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA7', '\x5', '\x34', '\x1B', '\x2', '\xA5', 
		'\xA7', '\a', '\x1D', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xAB', '\x5', '\x34', '\x1B', '\x2', '\xA9', 
		'\xAB', '\a', '\x1D', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAE', '\x5', '\x44', '#', '\x2', '\xAD', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x5', 
		'\x42', '\"', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB4', '\x5', '>', ' ', '\x2', '\xB3', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x5', '\x34', '\x1B', 
		'\x2', '\xB6', '\xB7', '\x5', ',', '\x17', '\x2', '\xB7', '\xB9', '\a', 
		'\x5', '\x2', '\x2', '\xB8', '\xBA', '\x5', ' ', '\x11', '\x2', '\xB9', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBD', '\a', 
		'\x6', '\x2', '\x2', '\xBC', '\xBE', '\x5', '@', '!', '\x2', '\xBD', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC2', '\x5', '(', 
		'\x15', '\x2', '\xC0', '\xC2', '\a', '\x3', '\x2', '\x2', '\xC1', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC9', '\x5', '\"', 
		'\x12', '\x2', '\xC4', '\xC5', '\x5', '\"', '\x12', '\x2', '\xC5', '\xC6', 
		'\a', '\a', '\x2', '\x2', '\xC6', '\xC7', '\x5', ' ', '\x11', '\x2', '\xC7', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC9', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\x34', '\x1B', '\x2', '\xCB', 
		'\xCE', '\x5', '$', '\x13', '\x2', '\xCC', '\xCD', '\a', '\b', '\x2', 
		'\x2', '\xCD', '\xCF', '\x5', '&', '\x14', '\x2', '\xCE', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x1C', '\x2', 
		'\x2', '\xD1', '%', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\t', 
		'\x3', '\x2', '\x2', '\xD3', '\'', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\x18', '\x2', '\x2', '\xD5', '\xD6', '\x5', '*', '\x16', 
		'\x2', '\xD6', '\xD7', '\a', '\x19', '\x2', '\x2', '\xD7', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDA', '\n', '\x4', '\x2', '\x2', '\xD9', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x18', '\x2', 
		'\x2', '\xDF', '\xE0', '\x5', '*', '\x16', '\x2', '\xE0', '\xE1', '\a', 
		'\x19', '\x2', '\x2', '\xE1', '\xE2', '\x5', '*', '\x16', '\x2', '\xE2', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', '\x1C', '\x2', '\x2', '\xE6', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\x42', '\"', 
		'\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEB', '\x5', '\x34', '\x1B', '\x2', '\xEB', '\xEE', '\x5', '\x30', '\x19', 
		'\x2', '\xEC', '\xED', '\t', '\x5', '\x2', '\x2', '\xED', '\xEF', '\x5', 
		'\x32', '\x1A', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\a', '\x3', '\x2', '\x2', '\xF1', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x1C', '\x2', '\x2', '\xF3', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\t', '\x3', '\x2', 
		'\x2', '\xF5', '\x33', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\x5', 
		'@', '!', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFB', '\x5', '\b', '\x5', '\x2', '\xFA', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', '\x5', '\x36', '\x1C', '\x2', 
		'\xFD', '\xFF', '\x5', '\x38', '\x1D', '\x2', '\xFE', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x103', '\x5', ':', '\x1E', '\x2', '\x101', '\x104', '\x5', 
		'\x36', '\x1C', '\x2', '\x102', '\x104', '\x5', '\x38', '\x1D', '\x2', 
		'\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\a', '\v', '\x2', 
		'\x2', '\x106', '\x37', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\a', '\f', '\x2', '\x2', '\x108', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x110', '\a', '\x1C', '\x2', '\x2', '\x10A', '\x10B', '\x5', 
		'<', '\x1F', '\x2', '\x10B', '\x10C', '\a', '\t', '\x2', '\x2', '\x10C', 
		'\x10D', '\x5', ':', '\x1E', '\x2', '\x10D', '\x10E', '\a', '\n', '\x2', 
		'\x2', '\x10E', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x110', ';', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', '\x1C', 
		'\x2', '\x2', '\x112', '=', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\a', '\x11', '\x2', '\x2', '\x114', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\a', '\x14', '\x2', '\x2', '\x116', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\a', '\x15', '\x2', '\x2', '\x118', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\a', '\x17', '\x2', 
		'\x2', '\x11A', '\x11B', '\a', '\t', '\x2', '\x2', '\x11B', '\x11C', '\x5', 
		'\x46', '$', '\x2', '\x11C', '\x11D', '\a', '\n', '\x2', '\x2', '\x11D', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x124', '\x5', 'H', '%', 
		'\x2', '\x11F', '\x120', '\x5', 'H', '%', '\x2', '\x120', '\x121', '\a', 
		'\a', '\x2', '\x2', '\x121', '\x122', '\x5', '\x46', '$', '\x2', '\x122', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x123', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x124', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\x5', 'J', '&', '\x2', '\x126', 
		'\x127', '\x5', 'L', '\'', '\x2', '\x127', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x129', '\a', '\x1C', '\x2', '\x2', '\x129', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x12A', '\x12B', '\a', '\x1C', '\x2', '\x2', '\x12B', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x5', 'P', ')', '\x2', 
		'\x12D', '\x12E', '\a', '\x4', '\x2', '\x2', '\x12E', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x12F', '\x130', '\t', '\x6', '\x2', '\x2', '\x130', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\t', '\a', '\x2', '\x2', 
		'\x132', 'S', '\x3', '\x2', '\x2', '\x2', '!', 'X', 'Z', '\x64', 'i', 
		't', '\x7F', '\x81', '\x89', '\x8E', '\x95', '\xA2', '\xA6', '\xAA', '\xAD', 
		'\xB0', '\xB3', '\xB9', '\xBD', '\xC1', '\xC8', '\xCE', '\xDB', '\xE3', 
		'\xE8', '\xEE', '\xF7', '\xFA', '\xFE', '\x103', '\x10F', '\x123',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
