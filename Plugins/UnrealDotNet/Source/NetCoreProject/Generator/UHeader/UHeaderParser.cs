//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UHeader.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class UHeaderParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, PtrQuant=8, RefQuant=9, 
		Private=10, Protected=11, Public=12, Inline=13, Explicit=14, Virtual=15, 
		Class=16, Struct=17, Enum=18, Const=19, Final=20, Static=21, Extern=22, 
		Override=23, Template=24, Friend=25, Operator=26, Typedef=27, BracketsOpen=28, 
		BracketsClose=29, GCC_ALIGN=30, Namespace=31, DotDot=32, SingleLineDerective=33, 
		MultiLineDerective=34, Identifier=35, Literal=36, SpecalSymbol=37, Whitespace=38, 
		Newline=39, BlockComment=40, LineComment=41;
	public const int
		RULE_translationUnit = 0, RULE_namespaceUnit = 1, RULE_namespaceName = 2, 
		RULE_typePreDeclaration = 3, RULE_classDeclaration = 4, RULE_classOrStructOrEnum = 5, 
		RULE_classOrStruct = 6, RULE_classParentList = 7, RULE_className = 8, 
		RULE_classAlignDefine = 9, RULE_classAlignValue = 10, RULE_classBody = 11, 
		RULE_enumDeclaration = 12, RULE_enumParent = 13, RULE_enumName = 14, RULE_enumElementList = 15, 
		RULE_enumElement = 16, RULE_enumElementName = 17, RULE_typeDefine = 18, 
		RULE_uDefine = 19, RULE_uDefineName = 20, RULE_uMeta = 21, RULE_uMetaParametrList = 22, 
		RULE_uMetaParametr = 23, RULE_uMetaParamKey = 24, RULE_uMetaParamValue = 25, 
		RULE_constructor = 26, RULE_constructorInitializerList = 27, RULE_constructorInitializer = 28, 
		RULE_method = 29, RULE_methodParamsList = 30, RULE_methodParametr = 31, 
		RULE_methodParametrName = 32, RULE_methodParametrDefaultValue = 33, RULE_value = 34, 
		RULE_methodBody = 35, RULE_methodBodyContent = 36, RULE_methodName = 37, 
		RULE_methodOperator = 38, RULE_property = 39, RULE_propertyName = 40, 
		RULE_propertyDefaultValue = 41, RULE_type = 42, RULE_isPtrQuant = 43, 
		RULE_isRefQuant = 44, RULE_typeName = 45, RULE_typeTemplateName = 46, 
		RULE_isVirtual = 47, RULE_isConst = 48, RULE_isStatic = 49, RULE_isFriend = 50, 
		RULE_templateDefine = 51, RULE_templateParamList = 52, RULE_templateParam = 53, 
		RULE_templateParamType = 54, RULE_templateParamLiter = 55, RULE_accessSpecifierContainer = 56, 
		RULE_accessSpecifier = 57, RULE_preprocessDerective = 58;
	public static readonly string[] ruleNames = {
		"translationUnit", "namespaceUnit", "namespaceName", "typePreDeclaration", 
		"classDeclaration", "classOrStructOrEnum", "classOrStruct", "classParentList", 
		"className", "classAlignDefine", "classAlignValue", "classBody", "enumDeclaration", 
		"enumParent", "enumName", "enumElementList", "enumElement", "enumElementName", 
		"typeDefine", "uDefine", "uDefineName", "uMeta", "uMetaParametrList", 
		"uMetaParametr", "uMetaParamKey", "uMetaParamValue", "constructor", "constructorInitializerList", 
		"constructorInitializer", "method", "methodParamsList", "methodParametr", 
		"methodParametrName", "methodParametrDefaultValue", "value", "methodBody", 
		"methodBodyContent", "methodName", "methodOperator", "property", "propertyName", 
		"propertyDefaultValue", "type", "isPtrQuant", "isRefQuant", "typeName", 
		"typeTemplateName", "isVirtual", "isConst", "isStatic", "isFriend", "templateDefine", 
		"templateParamList", "templateParam", "templateParamType", "templateParamLiter", 
		"accessSpecifierContainer", "accessSpecifier", "preprocessDerective"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'<'", "'>'", "'('", "')'", "'='", "'*'", "'&'", "'private'", 
		"'protected'", "'public'", null, "'explicit'", "'virtual'", "'class'", 
		"'struct'", "'enum'", "'const'", "'final'", "'static'", "'extern'", "'override'", 
		"'template'", "'friend'", "'operator'", "'typedef'", "'{'", "'}'", "'GCC_ALIGN'", 
		"'namespace'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "PtrQuant", "RefQuant", 
		"Private", "Protected", "Public", "Inline", "Explicit", "Virtual", "Class", 
		"Struct", "Enum", "Const", "Final", "Static", "Extern", "Override", "Template", 
		"Friend", "Operator", "Typedef", "BracketsOpen", "BracketsClose", "GCC_ALIGN", 
		"Namespace", "DotDot", "SingleLineDerective", "MultiLineDerective", "Identifier", 
		"Literal", "SpecalSymbol", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UHeader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UHeaderParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UHeaderParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UHeaderParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TranslationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(UHeaderParser.Eof, 0); }
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public NamespaceUnitContext[] namespaceUnit() {
			return GetRuleContexts<NamespaceUnitContext>();
		}
		public NamespaceUnitContext namespaceUnit(int i) {
			return GetRuleContext<NamespaceUnitContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Namespace) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier))) != 0)) {
				{
				State = 128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 118; typePreDeclaration();
					}
					break;
				case 2:
					{
					State = 119; method();
					}
					break;
				case 3:
					{
					State = 120; constructor();
					}
					break;
				case 4:
					{
					State = 121; classDeclaration();
					}
					break;
				case 5:
					{
					State = 122; enumDeclaration();
					}
					break;
				case 6:
					{
					State = 123; property();
					}
					break;
				case 7:
					{
					State = 124; typeDefine();
					}
					break;
				case 8:
					{
					State = 125; uDefine();
					}
					break;
				case 9:
					{
					State = 126; namespaceUnit();
					}
					break;
				case 10:
					{
					State = 127; preprocessDerective();
					}
					break;
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceUnitContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(UHeaderParser.Namespace, 0); }
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public NamespaceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceUnitContext namespaceUnit() {
		NamespaceUnitContext _localctx = new NamespaceUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(Namespace);
			State = 136; namespaceName();
			State = 137; Match(BracketsOpen);
			State = 138; translationUnit();
			State = 139; Match(BracketsClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePreDeclarationContext : ParserRuleContext {
		public ClassOrStructOrEnumContext classOrStructOrEnum() {
			return GetRuleContext<ClassOrStructOrEnumContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public IsFriendContext isFriend() {
			return GetRuleContext<IsFriendContext>(0);
		}
		public TypePreDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePreDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePreDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePreDeclarationContext typePreDeclaration() {
		TypePreDeclarationContext _localctx = new TypePreDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typePreDeclaration);
		int _la;
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Struct:
			case Enum:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143; classOrStructOrEnum();
				State = 144; className();
				State = 145; Match(T__0);
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; isFriend();
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) {
					{
					State = 148; classOrStructOrEnum();
					}
				}

				State = 151; className();
				State = 152; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ClassOrStructContext classOrStruct() {
			return GetRuleContext<ClassOrStructContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassAlignDefineContext classAlignDefine() {
			return GetRuleContext<ClassAlignDefineContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 156; templateDefine();
				}
			}

			State = 159; classOrStruct();
			State = 160; className();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DotDot) {
				{
				State = 161; Match(DotDot);
				State = 162; classParentList();
				}
			}

			State = 165; Match(BracketsOpen);
			State = 166; classBody();
			State = 167; Match(BracketsClose);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GCC_ALIGN) {
				{
				State = 168; classAlignDefine();
				}
			}

			State = 171; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructOrEnumContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public ClassOrStructOrEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStructOrEnum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStructOrEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructOrEnumContext classOrStructOrEnum() {
		ClassOrStructOrEnumContext _localctx = new ClassOrStructOrEnumContext(Context, State);
		EnterRule(_localctx, 10, RULE_classOrStructOrEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ClassOrStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStruct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructContext classOrStruct() {
		ClassOrStructContext _localctx = new ClassOrStructContext(Context, State);
		EnterRule(_localctx, 12, RULE_classOrStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParentListContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassParentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParentListContext classParentList() {
		ClassParentListContext _localctx = new ClassParentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_classParentList);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 177; accessSpecifier();
					}
				}

				State = 180; className();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 181; accessSpecifier();
					}
				}

				State = 184; className();
				State = 185; Match(T__1);
				State = 186; classParentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_className);
		int _la;
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191; Match(Identifier);
				State = 192; Match(T__2);
				State = 193; className();
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 194; Match(T__1);
					State = 195; className();
					}
				}

				State = 198; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAlignDefineContext : ParserRuleContext {
		public ITerminalNode GCC_ALIGN() { return GetToken(UHeaderParser.GCC_ALIGN, 0); }
		public ClassAlignValueContext classAlignValue() {
			return GetRuleContext<ClassAlignValueContext>(0);
		}
		public ClassAlignDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAlignDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAlignDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAlignDefineContext classAlignDefine() {
		ClassAlignDefineContext _localctx = new ClassAlignDefineContext(Context, State);
		EnterRule(_localctx, 18, RULE_classAlignDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(GCC_ALIGN);
			State = 203; Match(T__4);
			State = 204; classAlignValue();
			State = 205; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAlignValueContext : ParserRuleContext {
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public ClassAlignValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAlignValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAlignValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAlignValueContext classAlignValue() {
		ClassAlignValueContext _localctx = new ClassAlignValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_classAlignValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 207; Match(Literal);
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Literal );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public AccessSpecifierContainerContext[] accessSpecifierContainer() {
			return GetRuleContexts<AccessSpecifierContainerContext>();
		}
		public AccessSpecifierContainerContext accessSpecifierContainer(int i) {
			return GetRuleContext<AccessSpecifierContainerContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier))) != 0)) {
				{
				State = 222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 212; accessSpecifierContainer();
					}
					break;
				case 2:
					{
					State = 213; method();
					}
					break;
				case 3:
					{
					State = 214; constructor();
					}
					break;
				case 4:
					{
					State = 215; property();
					}
					break;
				case 5:
					{
					State = 216; uDefine();
					}
					break;
				case 6:
					{
					State = 217; typeDefine();
					}
					break;
				case 7:
					{
					State = 218; classDeclaration();
					}
					break;
				case 8:
					{
					State = 219; enumDeclaration();
					}
					break;
				case 9:
					{
					State = 220; typePreDeclaration();
					}
					break;
				case 10:
					{
					State = 221; preprocessDerective();
					}
					break;
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		public EnumElementListContext enumElementList() {
			return GetRuleContext<EnumElementListContext>(0);
		}
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public EnumParentContext enumParent() {
			return GetRuleContext<EnumParentContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumDeclaration);
		int _la;
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; Match(Enum);
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Class) {
					{
					State = 228; Match(Class);
					}
				}

				State = 231; enumName();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 232; enumParent();
					}
				}

				State = 235; Match(BracketsOpen);
				State = 236; enumElementList();
				State = 237; Match(BracketsClose);
				State = 238; Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; Match(Enum);
				State = 241; Match(BracketsOpen);
				State = 242; enumElementList();
				State = 243; Match(BracketsClose);
				State = 244; Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumParentContext : ParserRuleContext {
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public EnumParentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumParent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumParent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumParentContext enumParent() {
		EnumParentContext _localctx = new EnumParentContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumParent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(DotDot);
			State = 249; className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementListContext : ParserRuleContext {
		public EnumElementContext enumElement() {
			return GetRuleContext<EnumElementContext>(0);
		}
		public EnumElementListContext enumElementList() {
			return GetRuleContext<EnumElementListContext>(0);
		}
		public EnumElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementListContext enumElementList() {
		EnumElementListContext _localctx = new EnumElementListContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumElementList);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253; enumElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; enumElement();
				State = 255; Match(T__1);
				State = 256; enumElementList();
				State = 258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 257; Match(T__1);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public EnumElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement() {
		EnumElementContext _localctx = new EnumElementContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; enumElementName();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==DotDot) {
				{
				State = 263;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==DotDot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 264; propertyDefaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public EnumElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementNameContext enumElementName() {
		EnumElementNameContext _localctx = new EnumElementNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode Typedef() { return GetToken(UHeaderParser.Typedef, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(Typedef);
			State = 270; type();
			State = 271; typeName();
			State = 272; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineContext : ParserRuleContext {
		public UDefineNameContext uDefineName() {
			return GetRuleContext<UDefineNameContext>(0);
		}
		public UMetaContext uMeta() {
			return GetRuleContext<UMetaContext>(0);
		}
		public UDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineContext uDefine() {
		UDefineContext _localctx = new UDefineContext(Context, State);
		EnterRule(_localctx, 38, RULE_uDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; uDefineName();
			State = 275; Match(T__4);
			State = 276; uMeta();
			State = 277; Match(T__5);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 278; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public UDefineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefineName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineNameContext uDefineName() {
		UDefineNameContext _localctx = new UDefineNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_uDefineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaContext : ParserRuleContext {
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMeta; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaContext uMeta() {
		UMetaContext _localctx = new UMetaContext(Context, State);
		EnterRule(_localctx, 42, RULE_uMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier) | (1L << Literal))) != 0)) {
				{
				State = 283; uMetaParametrList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrListContext : ParserRuleContext {
		public UMetaParametrContext uMetaParametr() {
			return GetRuleContext<UMetaParametrContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametrList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrListContext uMetaParametrList() {
		UMetaParametrListContext _localctx = new UMetaParametrListContext(Context, State);
		EnterRule(_localctx, 44, RULE_uMetaParametrList);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286; uMetaParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; uMetaParametr();
				State = 288; Match(T__1);
				State = 289; uMetaParametrList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrContext : ParserRuleContext {
		public UMetaParamKeyContext uMetaParamKey() {
			return GetRuleContext<UMetaParamKeyContext>(0);
		}
		public UMetaParamValueContext uMetaParamValue() {
			return GetRuleContext<UMetaParamValueContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrContext uMetaParametr() {
		UMetaParametrContext _localctx = new UMetaParametrContext(Context, State);
		EnterRule(_localctx, 46, RULE_uMetaParametr);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293; uMetaParamKey();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294; uMetaParamKey();
				State = 295; Match(T__6);
				State = 296; uMetaParamValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 298; uMetaParamKey();
				State = 299; Match(T__6);
				State = 300; Match(T__4);
				State = 301; uMetaParametrList();
				State = 302; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamKeyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UMetaParamKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamKey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamKeyContext uMetaParamKey() {
		UMetaParamKeyContext _localctx = new UMetaParamKeyContext(Context, State);
		EnterRule(_localctx, 48, RULE_uMetaParamKey);
		try {
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamValueContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UMetaParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamValueContext uMetaParamValue() {
		UMetaParamValueContext _localctx = new UMetaParamValueContext(Context, State);
		EnterRule(_localctx, 50, RULE_uMetaParamValue);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode Explicit() { return GetToken(UHeaderParser.Explicit, 0); }
		public ITerminalNode Inline() { return GetToken(UHeaderParser.Inline, 0); }
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public ConstructorInitializerListContext constructorInitializerList() {
			return GetRuleContext<ConstructorInitializerListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 52, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Explicit) {
				{
				State = 314; Match(Explicit);
				}
			}

			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 317; Match(Inline);
				}
			}

			State = 320; methodName();
			State = 321; Match(T__4);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 322; methodParamsList();
				}
			}

			State = 325; Match(T__5);
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 326; isConst();
				}
				break;
			}
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DotDot) {
				{
				State = 329; Match(DotDot);
				State = 330; constructorInitializerList();
				}
			}

			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BracketsOpen) {
				{
				State = 333; methodBody();
				}
			}

			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 336; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerListContext : ParserRuleContext {
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorInitializerListContext constructorInitializerList() {
			return GetRuleContext<ConstructorInitializerListContext>(0);
		}
		public ConstructorInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializerList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerListContext constructorInitializerList() {
		ConstructorInitializerListContext _localctx = new ConstructorInitializerListContext(Context, State);
		EnterRule(_localctx, 54, RULE_constructorInitializerList);
		try {
			State = 344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339; constructorInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340; constructorInitializer();
				State = 341; Match(T__1);
				State = 342; constructorInitializerList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 56, RULE_constructorInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; methodParametrName();
			State = 347; Match(T__4);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier || _la==Literal) {
				{
				State = 348; methodParametrDefaultValue();
				}
			}

			State = 351; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public ITerminalNode Override() { return GetToken(UHeaderParser.Override, 0); }
		public ITerminalNode Final() { return GetToken(UHeaderParser.Final, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IsFriendContext isFriend() {
			return GetRuleContext<IsFriendContext>(0);
		}
		public ITerminalNode Inline() { return GetToken(UHeaderParser.Inline, 0); }
		public ITerminalNode Extern() { return GetToken(UHeaderParser.Extern, 0); }
		public IsStaticContext isStatic() {
			return GetRuleContext<IsStaticContext>(0);
		}
		public IsVirtualContext isVirtual() {
			return GetRuleContext<IsVirtualContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 58, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 353; templateDefine();
				}
			}

			State = 386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				{
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Friend) {
					{
					State = 356; isFriend();
					}
				}

				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Inline) {
					{
					State = 359; Match(Inline);
					}
				}

				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extern) {
					{
					State = 362; Match(Extern);
					}
				}

				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 365; isStatic();
					}
				}

				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 368; isVirtual();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Friend) {
					{
					State = 371; isFriend();
					}
				}

				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 374; isStatic();
					}
				}

				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Inline) {
					{
					State = 377; Match(Inline);
					}
				}

				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extern) {
					{
					State = 380; Match(Extern);
					}
				}

				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 383; isVirtual();
					}
				}

				}
				}
				break;
			}
			State = 388; type();
			State = 389; methodName();
			State = 390; Match(T__4);
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 391; methodParamsList();
				}
			}

			State = 394; Match(T__5);
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 395; isConst();
				}
				break;
			}
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Override) {
				{
				State = 398; Match(Override);
				}
			}

			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final) {
				{
				State = 401; Match(Final);
				}
			}

			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BracketsOpen) {
				{
				State = 404; methodBody();
				}
			}

			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 407; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParamsListContext : ParserRuleContext {
		public MethodParametrContext methodParametr() {
			return GetRuleContext<MethodParametrContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public MethodParamsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParamsList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParamsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParamsListContext methodParamsList() {
		MethodParamsListContext _localctx = new MethodParamsListContext(Context, State);
		EnterRule(_localctx, 60, RULE_methodParamsList);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 410; methodParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 411; methodParametr();
				State = 412; Match(T__1);
				State = 413; methodParamsList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public MethodParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrContext methodParametr() {
		MethodParametrContext _localctx = new MethodParametrContext(Context, State);
		EnterRule(_localctx, 62, RULE_methodParametr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; type();
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 418; methodParametrName();
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 419; Match(T__6);
					State = 420; methodParametrDefaultValue();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public MethodParametrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrNameContext methodParametrName() {
		MethodParametrNameContext _localctx = new MethodParametrNameContext(Context, State);
		EnterRule(_localctx, 64, RULE_methodParametrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrDefaultValueContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public MethodParametrDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrDefaultValueContext methodParametrDefaultValue() {
		MethodParametrDefaultValueContext _localctx = new MethodParametrDefaultValueContext(Context, State);
		EnterRule(_localctx, 66, RULE_methodParametrDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 68, RULE_value);
		int _la;
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429; Match(Identifier);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 430; Match(DotDot);
						}
						}
						State = 433;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DotDot );
					State = 435; Match(Identifier);
					}
				}

				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 438; Match(T__4);
					State = 439; methodParametrDefaultValue();
					State = 440; Match(T__5);
					}
				}

				}
				break;
			case Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444; Match(Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContentContext methodBodyContent() {
			return GetRuleContext<MethodBodyContentContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(BracketsOpen);
			State = 448; methodBodyContent();
			State = 449; Match(BracketsClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContentContext : ParserRuleContext {
		public ITerminalNode[] BracketsOpen() { return GetTokens(UHeaderParser.BracketsOpen); }
		public ITerminalNode BracketsOpen(int i) {
			return GetToken(UHeaderParser.BracketsOpen, i);
		}
		public ITerminalNode[] BracketsClose() { return GetTokens(UHeaderParser.BracketsClose); }
		public ITerminalNode BracketsClose(int i) {
			return GetToken(UHeaderParser.BracketsClose, i);
		}
		public MethodBodyContentContext[] methodBodyContent() {
			return GetRuleContexts<MethodBodyContentContext>();
		}
		public MethodBodyContentContext methodBodyContent(int i) {
			return GetRuleContext<MethodBodyContentContext>(i);
		}
		public MethodBodyContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBodyContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBodyContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContentContext methodBodyContent() {
		MethodBodyContentContext _localctx = new MethodBodyContentContext(Context, State);
		EnterRule(_localctx, 72, RULE_methodBodyContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Final) | (1L << Static) | (1L << Extern) | (1L << Override) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << GCC_ALIGN) | (1L << Namespace) | (1L << DotDot) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << Literal) | (1L << SpecalSymbol) | (1L << Whitespace) | (1L << Newline) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 451;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==BracketsOpen || _la==BracketsClose) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BracketsOpen) {
				{
				State = 457; Match(BracketsOpen);
				State = 458; methodBodyContent();
				State = 459; Match(BracketsClose);
				State = 460; methodBodyContent();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode Operator() { return GetToken(UHeaderParser.Operator, 0); }
		public MethodOperatorContext methodOperator() {
			return GetRuleContext<MethodOperatorContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 74, RULE_methodName);
		int _la;
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 464; Match(Identifier);
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 465; Match(DotDot);
					State = 466; Match(DotDot);
					State = 467; methodName();
					}
				}

				}
				break;
			case Operator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470; Match(Operator);
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << PtrQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0)) {
					{
					State = 471; methodOperator();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodOperatorContext : ParserRuleContext {
		public ITerminalNode[] PtrQuant() { return GetTokens(UHeaderParser.PtrQuant); }
		public ITerminalNode PtrQuant(int i) {
			return GetToken(UHeaderParser.PtrQuant, i);
		}
		public ITerminalNode[] SpecalSymbol() { return GetTokens(UHeaderParser.SpecalSymbol); }
		public ITerminalNode SpecalSymbol(int i) {
			return GetToken(UHeaderParser.SpecalSymbol, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public MethodOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodOperatorContext methodOperator() {
		MethodOperatorContext _localctx = new MethodOperatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_methodOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 476;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << PtrQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << PtrQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode Extern() { return GetToken(UHeaderParser.Extern, 0); }
		public IsStaticContext isStatic() {
			return GetRuleContext<IsStaticContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 78, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extern) {
				{
				State = 481; Match(Extern);
				}
			}

			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static) {
				{
				State = 484; isStatic();
				}
			}

			State = 487; type();
			State = 488; propertyName();
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==DotDot) {
				{
				State = 489;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==DotDot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 490; propertyDefaultValue();
				}
			}

			State = 493; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefaultValueContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PropertyDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefaultValueContext propertyDefaultValue() {
		PropertyDefaultValueContext _localctx = new PropertyDefaultValueContext(Context, State);
		EnterRule(_localctx, 82, RULE_propertyDefaultValue);
		int _la;
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 497; Match(Identifier);
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 498; Match(T__4);
					State = 499; propertyDefaultValue();
					State = 500; Match(T__5);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IsConstContext[] isConst() {
			return GetRuleContexts<IsConstContext>();
		}
		public IsConstContext isConst(int i) {
			return GetRuleContext<IsConstContext>(i);
		}
		public ClassOrStructOrEnumContext classOrStructOrEnum() {
			return GetRuleContext<ClassOrStructOrEnumContext>(0);
		}
		public IsPtrQuantContext[] isPtrQuant() {
			return GetRuleContexts<IsPtrQuantContext>();
		}
		public IsPtrQuantContext isPtrQuant(int i) {
			return GetRuleContext<IsPtrQuantContext>(i);
		}
		public IsRefQuantContext[] isRefQuant() {
			return GetRuleContexts<IsRefQuantContext>();
		}
		public IsRefQuantContext isRefQuant(int i) {
			return GetRuleContext<IsRefQuantContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 507; isConst();
				}
			}

			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) {
				{
				State = 510; classOrStructOrEnum();
				}
			}

			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 513; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 514; isRefQuant();
				}
				break;
			case Identifier:
				break;
			default:
				break;
			}
			State = 517; typeName();
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 518; isPtrQuant();
				}
				break;
			case 2:
				{
				State = 519; isRefQuant();
				}
				break;
			}
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 522; isConst();
				}
			}

			State = 527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 525; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 526; isRefQuant();
				}
				break;
			case T__1:
			case T__3:
			case T__5:
			case T__6:
			case Operator:
			case Identifier:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsPtrQuantContext : ParserRuleContext {
		public ITerminalNode PtrQuant() { return GetToken(UHeaderParser.PtrQuant, 0); }
		public IsPtrQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isPtrQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsPtrQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsPtrQuantContext isPtrQuant() {
		IsPtrQuantContext _localctx = new IsPtrQuantContext(Context, State);
		EnterRule(_localctx, 86, RULE_isPtrQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529; Match(PtrQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsRefQuantContext : ParserRuleContext {
		public ITerminalNode RefQuant() { return GetToken(UHeaderParser.RefQuant, 0); }
		public IsRefQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isRefQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRefQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsRefQuantContext isRefQuant() {
		IsRefQuantContext _localctx = new IsRefQuantContext(Context, State);
		EnterRule(_localctx, 88, RULE_isRefQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; Match(RefQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public TypeTemplateNameContext typeTemplateName() {
			return GetRuleContext<TypeTemplateNameContext>(0);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeName);
		int _la;
		try {
			State = 554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533; Match(Identifier);
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 534; Match(DotDot);
						}
						}
						State = 537;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DotDot );
					State = 539; Match(Identifier);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542; typeTemplateName();
				{
				State = 543; Match(T__2);
				State = 544; type();
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 545; Match(T__1);
					State = 546; type();
					}
					}
					State = 551;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 552; Match(T__3);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTemplateNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TypeTemplateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTemplateName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTemplateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTemplateNameContext typeTemplateName() {
		TypeTemplateNameContext _localctx = new TypeTemplateNameContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeTemplateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsVirtualContext : ParserRuleContext {
		public ITerminalNode Virtual() { return GetToken(UHeaderParser.Virtual, 0); }
		public IsVirtualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isVirtual; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsVirtual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsVirtualContext isVirtual() {
		IsVirtualContext _localctx = new IsVirtualContext(Context, State);
		EnterRule(_localctx, 94, RULE_isVirtual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsConstContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(UHeaderParser.Const, 0); }
		public IsConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsConstContext isConst() {
		IsConstContext _localctx = new IsConstContext(Context, State);
		EnterRule(_localctx, 96, RULE_isConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsStaticContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(UHeaderParser.Static, 0); }
		public IsStaticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isStatic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsStatic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsStaticContext isStatic() {
		IsStaticContext _localctx = new IsStaticContext(Context, State);
		EnterRule(_localctx, 98, RULE_isStatic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562; Match(Static);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFriendContext : ParserRuleContext {
		public ITerminalNode Friend() { return GetToken(UHeaderParser.Friend, 0); }
		public IsFriendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFriend; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFriend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFriendContext isFriend() {
		IsFriendContext _localctx = new IsFriendContext(Context, State);
		EnterRule(_localctx, 100, RULE_isFriend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; Match(Friend);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefineContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(UHeaderParser.Template, 0); }
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefineContext templateDefine() {
		TemplateDefineContext _localctx = new TemplateDefineContext(Context, State);
		EnterRule(_localctx, 102, RULE_templateDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; Match(Template);
			State = 567; Match(T__2);
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Identifier))) != 0)) {
				{
				State = 568; templateParamList();
				}
			}

			State = 571; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamListContext : ParserRuleContext {
		public TemplateParamContext templateParam() {
			return GetRuleContext<TemplateParamContext>(0);
		}
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamListContext templateParamList() {
		TemplateParamListContext _localctx = new TemplateParamListContext(Context, State);
		EnterRule(_localctx, 104, RULE_templateParamList);
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 573; templateParam();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574; templateParam();
				State = 575; Match(T__1);
				State = 576; templateParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamContext : ParserRuleContext {
		public TemplateParamTypeContext templateParamType() {
			return GetRuleContext<TemplateParamTypeContext>(0);
		}
		public TemplateParamLiterContext templateParamLiter() {
			return GetRuleContext<TemplateParamLiterContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public TemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamContext templateParam() {
		TemplateParamContext _localctx = new TemplateParamContext(Context, State);
		EnterRule(_localctx, 106, RULE_templateParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; templateParamType();
			State = 581; templateParamLiter();
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 582; Match(T__6);
				State = 583; propertyDefaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public TemplateParamTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamTypeContext templateParamType() {
		TemplateParamTypeContext _localctx = new TemplateParamTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_templateParamType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Identifier))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamLiterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TemplateParamLiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamLiter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamLiter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamLiterContext templateParamLiter() {
		TemplateParamLiterContext _localctx = new TemplateParamLiterContext(Context, State);
		EnterRule(_localctx, 110, RULE_templateParamLiter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContainerContext : ParserRuleContext {
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public AccessSpecifierContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifierContainer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifierContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContainerContext accessSpecifierContainer() {
		AccessSpecifierContainerContext _localctx = new AccessSpecifierContainerContext(Context, State);
		EnterRule(_localctx, 112, RULE_accessSpecifierContainer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; accessSpecifier();
			State = 591; Match(DotDot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(UHeaderParser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(UHeaderParser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(UHeaderParser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext accessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 114, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessDerectiveContext : ParserRuleContext {
		public ITerminalNode SingleLineDerective() { return GetToken(UHeaderParser.SingleLineDerective, 0); }
		public ITerminalNode MultiLineDerective() { return GetToken(UHeaderParser.MultiLineDerective, 0); }
		public PreprocessDerectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessDerective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessDerective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessDerectiveContext preprocessDerective() {
		PreprocessDerectiveContext _localctx = new PreprocessDerectiveContext(Context, State);
		EnterRule(_localctx, 116, RULE_preprocessDerective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			_la = TokenStream.LA(1);
			if ( !(_la==SingleLineDerective || _la==MultiLineDerective) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x258', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\x83', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x86', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x98', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x9D', '\n', '\x5', '\x3', '\x6', '\x5', 
		'\x6', '\xA0', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\xA6', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xAC', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x5', '\t', '\xB5', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xB9', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\xBF', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\xC7', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xCB', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x6', '\f', '\xD3', '\n', '\f', '\r', '\f', '\xE', '\f', 
		'\xD4', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\xE1', '\n', '\r', '\f', '\r', '\xE', '\r', '\xE4', '\v', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xE8', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xEC', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xF9', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x105', '\n', '\x11', 
		'\x5', '\x11', '\x107', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x10C', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x11A', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x5', '\x17', '\x11F', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x126', '\n', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x133', '\n', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x137', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x13B', '\n', '\x1B', '\x3', '\x1C', '\x5', '\x1C', 
		'\x13E', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x141', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x146', '\n', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x14A', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x14E', '\n', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x151', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x154', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x15B', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x160', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x5', '\x1F', '\x165', '\n', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x168', '\n', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x16B', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x16E', 
		'\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x171', '\n', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x174', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x177', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x17A', '\n', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x17D', '\n', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x180', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x183', 
		'\n', '\x1F', '\x5', '\x1F', '\x185', '\n', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x18B', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x18F', '\n', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x192', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x195', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x198', '\n', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x19B', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1A2', '\n', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x1A8', '\n', 
		'!', '\x5', '!', '\x1AA', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x3', '$', '\x6', '$', '\x1B2', '\n', '$', 
		'\r', '$', '\xE', '$', '\x1B3', '\x3', '$', '\x5', '$', '\x1B7', '\n', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1BD', 
		'\n', '$', '\x3', '$', '\x5', '$', '\x1C0', '\n', '$', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '&', '\a', '&', '\x1C7', '\n', '&', 
		'\f', '&', '\xE', '&', '\x1CA', '\v', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1D1', '\n', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x1D7', '\n', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x1DB', '\n', '\'', '\x5', '\'', 
		'\x1DD', '\n', '\'', '\x3', '(', '\x6', '(', '\x1E0', '\n', '(', '\r', 
		'(', '\xE', '(', '\x1E1', '\x3', ')', '\x5', ')', '\x1E5', '\n', ')', 
		'\x3', ')', '\x5', ')', '\x1E8', '\n', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x1EE', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x1F9', '\n', '+', '\x3', '+', '\x5', '+', '\x1FC', 
		'\n', '+', '\x3', ',', '\x5', ',', '\x1FF', '\n', ',', '\x3', ',', '\x5', 
		',', '\x202', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x206', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x20B', '\n', 
		',', '\x3', ',', '\x5', ',', '\x20E', '\n', ',', '\x3', ',', '\x3', ',', 
		'\x5', ',', '\x212', '\n', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '/', '\x3', '/', '\x6', '/', '\x21A', '\n', '/', '\r', '/', 
		'\xE', '/', '\x21B', '\x3', '/', '\x5', '/', '\x21F', '\n', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x226', 
		'\n', '/', '\f', '/', '\xE', '/', '\x229', '\v', '/', '\x3', '/', '\x3', 
		'/', '\x5', '/', '\x22D', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x23C', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x245', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x5', '\x37', '\x24B', '\n', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x2', 
		'\x2', '=', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', '\x2', '\n', '\x3', '\x2', '\x12', '\x14', '\x3', '\x2', 
		'\x12', '\x13', '\x4', '\x2', '\t', '\t', '\"', '\"', '\x3', '\x2', '\x1E', 
		'\x1F', '\x6', '\x2', '\x5', '\x6', '\t', '\n', '%', '%', '\'', '\'', 
		'\x4', '\x2', '\x12', '\x14', '%', '%', '\x3', '\x2', '\f', '\xE', '\x3', 
		'\x2', '#', '$', '\x2', '\x285', '\x2', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x89', '\x3', '\x2', '\x2', '\x2', '\x6', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x9C', '\x3', '\x2', '\x2', '\x2', '\n', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x10', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x14', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xE2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x108', '\x3', '\x2', '\x2', '\x2', '$', '\x10D', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x10F', '\x3', '\x2', '\x2', '\x2', '(', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		',', '\x11E', '\x3', '\x2', '\x2', '\x2', '.', '\x125', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x132', '\x3', '\x2', '\x2', '\x2', '\x32', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x38', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x15C', '\x3', '\x2', '\x2', '\x2', '<', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1C8', '\x3', '\x2', '\x2', '\x2', 'L', '\x1DC', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x1DF', '\x3', '\x2', '\x2', '\x2', 'P', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x1FB', '\x3', '\x2', '\x2', '\x2', 'V', '\x1FE', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x213', '\x3', '\x2', '\x2', '\x2', 'Z', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x22E', '\x3', '\x2', '\x2', '\x2', '`', '\x230', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x232', '\x3', '\x2', '\x2', '\x2', '\x64', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x236', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x238', '\x3', '\x2', '\x2', '\x2', 'j', '\x244', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x246', '\x3', '\x2', '\x2', '\x2', 'n', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x250', '\x3', '\x2', '\x2', '\x2', 't', '\x253', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x255', '\x3', '\x2', '\x2', '\x2', 'x', '\x83', '\x5', 
		'\b', '\x5', '\x2', 'y', '\x83', '\x5', '<', '\x1F', '\x2', 'z', '\x83', 
		'\x5', '\x36', '\x1C', '\x2', '{', '\x83', '\x5', '\n', '\x6', '\x2', 
		'|', '\x83', '\x5', '\x1A', '\xE', '\x2', '}', '\x83', '\x5', 'P', ')', 
		'\x2', '~', '\x83', '\x5', '&', '\x14', '\x2', '\x7F', '\x83', '\x5', 
		'(', '\x15', '\x2', '\x80', '\x83', '\x5', '\x4', '\x3', '\x2', '\x81', 
		'\x83', '\x5', 'v', '<', '\x2', '\x82', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\x82', 'y', '\x3', '\x2', '\x2', '\x2', '\x82', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '{', '\x3', '\x2', '\x2', '\x2', '\x82', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '}', '\x3', '\x2', '\x2', '\x2', '\x82', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\x2', '\x2', '\x3', '\x88', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '!', '\x2', '\x2', '\x8A', 
		'\x8B', '\x5', '\x6', '\x4', '\x2', '\x8B', '\x8C', '\a', '\x1E', '\x2', 
		'\x2', '\x8C', '\x8D', '\x5', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', 
		'\x1F', '\x2', '\x2', '\x8E', '\x5', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '%', '\x2', '\x2', '\x90', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\x5', '\f', '\a', '\x2', '\x92', '\x93', '\x5', '\x12', 
		'\n', '\x2', '\x93', '\x94', '\a', '\x3', '\x2', '\x2', '\x94', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x97', '\x5', '\x66', '\x34', '\x2', 
		'\x96', '\x98', '\x5', '\f', '\a', '\x2', '\x97', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x5', '\x12', '\n', '\x2', 
		'\x9A', '\x9B', '\a', '\x3', '\x2', '\x2', '\x9B', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x91', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\xA0', '\x5', 'h', '\x35', '\x2', '\x9F', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\xE', '\b', '\x2', 
		'\xA2', '\xA5', '\x5', '\x12', '\n', '\x2', '\xA3', '\xA4', '\a', '\"', 
		'\x2', '\x2', '\xA4', '\xA6', '\x5', '\x10', '\t', '\x2', '\xA5', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x1E', 
		'\x2', '\x2', '\xA8', '\xA9', '\x5', '\x18', '\r', '\x2', '\xA9', '\xAB', 
		'\a', '\x1F', '\x2', '\x2', '\xAA', '\xAC', '\x5', '\x14', '\v', '\x2', 
		'\xAB', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', 
		'\a', '\x3', '\x2', '\x2', '\xAE', '\v', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\t', '\x2', '\x2', '\x2', '\xB0', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\t', '\x3', '\x2', '\x2', '\xB2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB5', '\x5', 't', ';', '\x2', '\xB4', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xBF', '\x5', '\x12', 
		'\n', '\x2', '\xB7', '\xB9', '\x5', 't', ';', '\x2', '\xB8', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x12', '\n', 
		'\x2', '\xBB', '\xBC', '\a', '\x4', '\x2', '\x2', '\xBC', '\xBD', '\x5', 
		'\x10', '\t', '\x2', '\xBD', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\x11', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xCB', '\a', 
		'%', '\x2', '\x2', '\xC1', '\xC2', '\a', '%', '\x2', '\x2', '\xC2', '\xC3', 
		'\a', '\x5', '\x2', '\x2', '\xC3', '\xC6', '\x5', '\x12', '\n', '\x2', 
		'\xC4', '\xC5', '\a', '\x4', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x12', 
		'\n', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC9', '\a', '\x6', '\x2', '\x2', '\xC9', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', ' ', '\x2', '\x2', '\xCD', '\xCE', '\a', '\a', '\x2', 
		'\x2', '\xCE', '\xCF', '\x5', '\x16', '\f', '\x2', '\xCF', '\xD0', '\a', 
		'\b', '\x2', '\x2', '\xD0', '\x15', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD3', '\a', '&', '\x2', '\x2', '\xD2', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xE1', '\x5', 'r', ':', '\x2', 
		'\xD7', '\xE1', '\x5', '<', '\x1F', '\x2', '\xD8', '\xE1', '\x5', '\x36', 
		'\x1C', '\x2', '\xD9', '\xE1', '\x5', 'P', ')', '\x2', '\xDA', '\xE1', 
		'\x5', '(', '\x15', '\x2', '\xDB', '\xE1', '\x5', '&', '\x14', '\x2', 
		'\xDC', '\xE1', '\x5', '\n', '\x6', '\x2', '\xDD', '\xE1', '\x5', '\x1A', 
		'\xE', '\x2', '\xDE', '\xE1', '\x5', '\b', '\x5', '\x2', '\xDF', '\xE1', 
		'\x5', 'v', '<', '\x2', '\xE0', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\x19', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE7', '\a', '\x14', '\x2', '\x2', '\xE6', 
		'\xE8', '\a', '\x12', '\x2', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEB', '\x5', '\x1E', '\x10', '\x2', '\xEA', 
		'\xEC', '\x5', '\x1C', '\xF', '\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\x1E', '\x2', '\x2', '\xEE', 
		'\xEF', '\x5', ' ', '\x11', '\x2', '\xEF', '\xF0', '\a', '\x1F', '\x2', 
		'\x2', '\xF0', '\xF1', '\a', '\x3', '\x2', '\x2', '\xF1', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x14', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', '\x1E', '\x2', '\x2', '\xF4', '\xF5', '\x5', ' ', '\x11', 
		'\x2', '\xF5', '\xF6', '\a', '\x1F', '\x2', '\x2', '\xF6', '\xF7', '\a', 
		'\x3', '\x2', '\x2', '\xF7', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'\"', '\x2', '\x2', '\xFB', '\xFC', '\x5', '\x12', '\n', '\x2', '\xFC', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\a', '%', '\x2', 
		'\x2', '\xFE', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x107', '\x5', 
		'\"', '\x12', '\x2', '\x100', '\x101', '\x5', '\"', '\x12', '\x2', '\x101', 
		'\x102', '\a', '\x4', '\x2', '\x2', '\x102', '\x104', '\x5', ' ', '\x11', 
		'\x2', '\x103', '\x105', '\a', '\x4', '\x2', '\x2', '\x104', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x100', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10B', '\x5', '$', '\x13', 
		'\x2', '\x109', '\x10A', '\t', '\x4', '\x2', '\x2', '\x10A', '\x10C', 
		'\x5', 'T', '+', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x10D', '\x10E', '\a', '%', '\x2', '\x2', '\x10E', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\x1D', '\x2', '\x2', 
		'\x110', '\x111', '\x5', 'V', ',', '\x2', '\x111', '\x112', '\x5', '\\', 
		'/', '\x2', '\x112', '\x113', '\a', '\x3', '\x2', '\x2', '\x113', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x5', '*', '\x16', '\x2', 
		'\x115', '\x116', '\a', '\a', '\x2', '\x2', '\x116', '\x117', '\x5', ',', 
		'\x17', '\x2', '\x117', '\x119', '\a', '\b', '\x2', '\x2', '\x118', '\x11A', 
		'\a', '\x3', '\x2', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x11B', '\x11C', '\a', '%', '\x2', '\x2', '\x11C', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11F', '\x5', '.', '\x18', '\x2', 
		'\x11E', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '-', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x126', '\x5', '\x30', '\x19', '\x2', '\x121', '\x122', '\x5', '\x30', 
		'\x19', '\x2', '\x122', '\x123', '\a', '\x4', '\x2', '\x2', '\x123', '\x124', 
		'\x5', '.', '\x18', '\x2', '\x124', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x120', '\x3', '\x2', '\x2', '\x2', '\x125', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '/', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x133', '\x5', '\x32', '\x1A', '\x2', '\x128', '\x129', '\x5', '\x32', 
		'\x1A', '\x2', '\x129', '\x12A', '\a', '\t', '\x2', '\x2', '\x12A', '\x12B', 
		'\x5', '\x34', '\x1B', '\x2', '\x12B', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x5', '\x32', '\x1A', '\x2', '\x12D', '\x12E', '\a', 
		'\t', '\x2', '\x2', '\x12E', '\x12F', '\a', '\a', '\x2', '\x2', '\x12F', 
		'\x130', '\x5', '.', '\x18', '\x2', '\x130', '\x131', '\a', '\b', '\x2', 
		'\x2', '\x131', '\x133', '\x3', '\x2', '\x2', '\x2', '\x132', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x133', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x137', '\x5', 'V', ',', '\x2', '\x135', 
		'\x137', '\x5', '\x46', '$', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x13B', '\x5', 'V', ',', '\x2', 
		'\x139', '\x13B', '\x5', '\x46', '$', '\x2', '\x13A', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', '\a', '\x10', '\x2', 
		'\x2', '\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x141', '\a', '\xF', '\x2', '\x2', '\x140', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x5', 'L', '\'', 
		'\x2', '\x143', '\x145', '\a', '\a', '\x2', '\x2', '\x144', '\x146', '\x5', 
		'>', ' ', '\x2', '\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x149', '\a', '\b', '\x2', '\x2', '\x148', '\x14A', '\x5', 
		'\x62', '\x32', '\x2', '\x149', '\x148', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14C', '\a', '\"', '\x2', '\x2', '\x14C', '\x14E', '\x5', 
		'\x38', '\x1D', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x151', '\x5', 'H', '%', '\x2', '\x150', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x152', '\x154', '\a', '\x3', '\x2', 
		'\x2', '\x153', '\x152', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x15B', '\x5', ':', '\x1E', '\x2', '\x156', '\x157', '\x5', 
		':', '\x1E', '\x2', '\x157', '\x158', '\a', '\x4', '\x2', '\x2', '\x158', 
		'\x159', '\x5', '\x38', '\x1D', '\x2', '\x159', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '\x15A', '\x155', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x15B', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x15C', '\x15D', '\x5', '\x42', '\"', '\x2', '\x15D', '\x15F', '\a', 
		'\a', '\x2', '\x2', '\x15E', '\x160', '\x5', '\x44', '#', '\x2', '\x15F', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', 
		'\a', '\b', '\x2', '\x2', '\x162', ';', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x165', '\x5', 'h', '\x35', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x168', '\x5', '\x66', '\x34', '\x2', 
		'\x167', '\x166', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16B', '\a', '\xF', '\x2', '\x2', '\x16A', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16E', '\a', '\x18', '\x2', '\x2', 
		'\x16D', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '\x170', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x171', '\x5', '\x64', '\x33', '\x2', '\x170', '\x16F', '\x3', '\x2', 
		'\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', '\x171', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x174', '\x5', '`', '\x31', '\x2', 
		'\x173', '\x172', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x185', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x177', '\x5', '\x66', '\x34', '\x2', '\x176', '\x175', '\x3', '\x2', 
		'\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x17A', '\x5', '\x64', '\x33', '\x2', 
		'\x179', '\x178', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17B', 
		'\x17D', '\a', '\xF', '\x2', '\x2', '\x17C', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', '\a', '\x18', '\x2', '\x2', 
		'\x17F', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x182', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x183', '\x5', '`', '\x31', '\x2', '\x182', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x182', '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x176', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x187', '\x5', 'V', ',', '\x2', '\x187', 
		'\x188', '\x5', 'L', '\'', '\x2', '\x188', '\x18A', '\a', '\a', '\x2', 
		'\x2', '\x189', '\x18B', '\x5', '>', ' ', '\x2', '\x18A', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', 
		'\x18C', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18E', '\a', '\b', '\x2', 
		'\x2', '\x18D', '\x18F', '\x5', '\x62', '\x32', '\x2', '\x18E', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x191', '\x3', '\x2', '\x2', '\x2', '\x190', '\x192', '\a', 
		'\x19', '\x2', '\x2', '\x191', '\x190', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x195', '\a', '\x16', '\x2', '\x2', '\x194', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x197', '\x3', '\x2', '\x2', '\x2', '\x196', '\x198', '\x5', 
		'H', '%', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19B', '\a', '\x3', '\x2', '\x2', '\x19A', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '=', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x1A2', '\x5', '@', 
		'!', '\x2', '\x19D', '\x19E', '\x5', '@', '!', '\x2', '\x19E', '\x19F', 
		'\a', '\x4', '\x2', '\x2', '\x19F', '\x1A0', '\x5', '>', ' ', '\x2', '\x1A0', 
		'\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x1A2', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A9', '\x5', 'V', ',', '\x2', '\x1A4', 
		'\x1A7', '\x5', '\x42', '\"', '\x2', '\x1A5', '\x1A6', '\a', '\t', '\x2', 
		'\x2', '\x1A6', '\x1A8', '\x5', '\x44', '#', '\x2', '\x1A7', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\a', '%', '\x2', 
		'\x2', '\x1AC', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', 
		'\x5', '\x46', '$', '\x2', '\x1AE', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B6', '\a', '%', '\x2', '\x2', '\x1B0', '\x1B2', '\a', '\"', 
		'\x2', '\x2', '\x1B1', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x1B7', '\a', '%', '\x2', '\x2', '\x1B6', 
		'\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\a', '\a', '\x2', '\x2', '\x1B9', '\x1BA', '\x5', '\x44', '#', '\x2', 
		'\x1BA', '\x1BB', '\a', '\b', '\x2', '\x2', '\x1BB', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1C0', '\a', '&', '\x2', '\x2', '\x1BF', '\x1AF', '\x3', '\x2', 
		'\x2', '\x2', '\x1BF', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C0', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\a', '\x1E', '\x2', '\x2', 
		'\x1C2', '\x1C3', '\x5', 'J', '&', '\x2', '\x1C3', '\x1C4', '\a', '\x1F', 
		'\x2', '\x2', '\x1C4', 'I', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C7', 
		'\n', '\x5', '\x2', '\x2', '\x1C6', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', 
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1CB', '\x1CC', '\a', '\x1E', '\x2', '\x2', '\x1CC', '\x1CD', 
		'\x5', 'J', '&', '\x2', '\x1CD', '\x1CE', '\a', '\x1F', '\x2', '\x2', 
		'\x1CE', '\x1CF', '\x5', 'J', '&', '\x2', '\x1CF', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', '\x1D0', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x1D2', '\x1D6', '\a', '%', '\x2', '\x2', '\x1D3', '\x1D4', '\a', '\"', 
		'\x2', '\x2', '\x1D4', '\x1D5', '\a', '\"', '\x2', '\x2', '\x1D5', '\x1D7', 
		'\x5', 'L', '\'', '\x2', '\x1D6', '\x1D3', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1DD', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\x1DA', '\a', '\x1C', '\x2', '\x2', '\x1D9', 
		'\x1DB', '\x5', 'N', '(', '\x2', '\x1DA', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1D2', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DD', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE', '\x1E0', '\t', '\x6', '\x2', '\x2', '\x1DF', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', 
		'\x2', '\x2', '\x2', '\x1E2', 'O', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1E5', '\a', '\x18', '\x2', '\x2', '\x1E4', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E4', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E8', '\x5', '\x64', '\x33', '\x2', 
		'\x1E7', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E9', 
		'\x1EA', '\x5', 'V', ',', '\x2', '\x1EA', '\x1ED', '\x5', 'R', '*', '\x2', 
		'\x1EB', '\x1EC', '\t', '\x4', '\x2', '\x2', '\x1EC', '\x1EE', '\x5', 
		'T', '+', '\x2', '\x1ED', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1ED', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', 
		'\x2', '\x1EF', '\x1F0', '\a', '\x3', '\x2', '\x2', '\x1F0', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\a', '%', '\x2', '\x2', '\x1F2', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F8', '\a', '%', '\x2', '\x2', 
		'\x1F4', '\x1F5', '\a', '\a', '\x2', '\x2', '\x1F5', '\x1F6', '\x5', 'T', 
		'+', '\x2', '\x1F6', '\x1F7', '\a', '\b', '\x2', '\x2', '\x1F7', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FC', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x1FC', '\x5', '\x46', '$', '\x2', '\x1FB', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FA', '\x3', '\x2', '\x2', 
		'\x2', '\x1FC', 'U', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FF', '\x5', 
		'\x62', '\x32', '\x2', '\x1FE', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x201', '\x3', '\x2', '\x2', 
		'\x2', '\x200', '\x202', '\x5', '\f', '\a', '\x2', '\x201', '\x200', '\x3', 
		'\x2', '\x2', '\x2', '\x201', '\x202', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x203', '\x206', '\x5', 'X', '-', 
		'\x2', '\x204', '\x206', '\x5', 'Z', '.', '\x2', '\x205', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x204', '\x3', '\x2', '\x2', '\x2', '\x205', 
		'\x206', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x207', '\x20A', '\x5', '\\', '/', '\x2', '\x208', '\x20B', '\x5', 
		'X', '-', '\x2', '\x209', '\x20B', '\x5', 'Z', '.', '\x2', '\x20A', '\x208', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x20A', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20D', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x20E', '\x5', '\x62', '\x32', '\x2', '\x20D', 
		'\x20C', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x211', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x212', 
		'\x5', 'X', '-', '\x2', '\x210', '\x212', '\x5', 'Z', '.', '\x2', '\x211', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', '\x210', '\x3', '\x2', '\x2', 
		'\x2', '\x211', '\x212', '\x3', '\x2', '\x2', '\x2', '\x212', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x214', '\a', '\n', '\x2', '\x2', '\x214', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\a', '\v', '\x2', 
		'\x2', '\x216', '[', '\x3', '\x2', '\x2', '\x2', '\x217', '\x21E', '\a', 
		'%', '\x2', '\x2', '\x218', '\x21A', '\a', '\"', '\x2', '\x2', '\x219', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x21F', '\a', '%', '\x2', '\x2', '\x21E', '\x219', '\x3', '\x2', 
		'\x2', '\x2', '\x21E', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x22D', 
		'\x3', '\x2', '\x2', '\x2', '\x220', '\x221', '\x5', '^', '\x30', '\x2', 
		'\x221', '\x222', '\a', '\x5', '\x2', '\x2', '\x222', '\x227', '\x5', 
		'V', ',', '\x2', '\x223', '\x224', '\a', '\x4', '\x2', '\x2', '\x224', 
		'\x226', '\x5', 'V', ',', '\x2', '\x225', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x226', '\x229', '\x3', '\x2', '\x2', '\x2', '\x227', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x229', '\x227', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x22B', '\a', '\x6', '\x2', '\x2', '\x22B', 
		'\x22D', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x217', '\x3', '\x2', '\x2', 
		'\x2', '\x22C', '\x220', '\x3', '\x2', '\x2', '\x2', '\x22D', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x22E', '\x22F', '\a', '%', '\x2', '\x2', '\x22F', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\a', '\x11', '\x2', 
		'\x2', '\x231', '\x61', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', 
		'\a', '\x15', '\x2', '\x2', '\x233', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x234', '\x235', '\a', '\x17', '\x2', '\x2', '\x235', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x237', '\a', '\x1B', '\x2', '\x2', '\x237', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', '\x1A', '\x2', 
		'\x2', '\x239', '\x23B', '\a', '\x5', '\x2', '\x2', '\x23A', '\x23C', 
		'\x5', 'j', '\x36', '\x2', '\x23B', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x23B', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x23E', '\a', '\x6', '\x2', '\x2', '\x23E', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x245', '\x5', 'l', '\x37', 
		'\x2', '\x240', '\x241', '\x5', 'l', '\x37', '\x2', '\x241', '\x242', 
		'\a', '\x4', '\x2', '\x2', '\x242', '\x243', '\x5', 'j', '\x36', '\x2', 
		'\x243', '\x245', '\x3', '\x2', '\x2', '\x2', '\x244', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x244', '\x240', '\x3', '\x2', '\x2', '\x2', '\x245', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\x5', 'n', '\x38', 
		'\x2', '\x247', '\x24A', '\x5', 'p', '\x39', '\x2', '\x248', '\x249', 
		'\a', '\t', '\x2', '\x2', '\x249', '\x24B', '\x5', 'T', '+', '\x2', '\x24A', 
		'\x248', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\x24B', 'm', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\t', 
		'\a', '\x2', '\x2', '\x24D', 'o', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x24F', '\a', '%', '\x2', '\x2', '\x24F', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x251', '\x5', 't', ';', '\x2', '\x251', '\x252', '\a', '\"', 
		'\x2', '\x2', '\x252', 's', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', 
		'\t', '\b', '\x2', '\x2', '\x254', 'u', '\x3', '\x2', '\x2', '\x2', '\x255', 
		'\x256', '\t', '\t', '\x2', '\x2', '\x256', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'W', '\x82', '\x84', '\x97', '\x9C', '\x9F', '\xA5', '\xAB', '\xB4', 
		'\xB8', '\xBE', '\xC6', '\xCA', '\xD4', '\xE0', '\xE2', '\xE7', '\xEB', 
		'\xF8', '\x104', '\x106', '\x10B', '\x119', '\x11E', '\x125', '\x132', 
		'\x136', '\x13A', '\x13D', '\x140', '\x145', '\x149', '\x14D', '\x150', 
		'\x153', '\x15A', '\x15F', '\x164', '\x167', '\x16A', '\x16D', '\x170', 
		'\x173', '\x176', '\x179', '\x17C', '\x17F', '\x182', '\x184', '\x18A', 
		'\x18E', '\x191', '\x194', '\x197', '\x19A', '\x1A1', '\x1A7', '\x1A9', 
		'\x1B3', '\x1B6', '\x1BC', '\x1BF', '\x1C8', '\x1D0', '\x1D6', '\x1DA', 
		'\x1DC', '\x1E1', '\x1E4', '\x1E7', '\x1ED', '\x1F8', '\x1FB', '\x1FE', 
		'\x201', '\x205', '\x20A', '\x20D', '\x211', '\x21B', '\x21E', '\x227', 
		'\x22C', '\x23B', '\x244', '\x24A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
