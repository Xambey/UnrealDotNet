//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UHeader.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class UHeaderParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, PtrQuant=11, RefQuant=12, Private=13, Protected=14, Public=15, 
		Inline=16, Explicit=17, Virtual=18, Class=19, Struct=20, Enum=21, Union=22, 
		Const=23, Final=24, Static=25, Extern=26, Mutable=27, Override=28, Template=29, 
		Friend=30, Operator=31, Typedef=32, Constexpr=33, BracketsOpen=34, BracketsClose=35, 
		Tilda=36, Delete=37, GCC_ALIGN=38, Namespace=39, DotDot=40, SingleLineDerective=41, 
		MultiLineDerective=42, Identifier=43, Literal=44, SpecalSymbol=45, Whitespace=46, 
		Newline=47, ExportComment=48, BlockComment=49, LineComment=50;
	public const int
		RULE_translationUnit = 0, RULE_namespaceUnit = 1, RULE_namespaceName = 2, 
		RULE_typePreDeclaration = 3, RULE_classDeclaration = 4, RULE_classOrStructOrEnum = 5, 
		RULE_classOrStruct = 6, RULE_classParentList = 7, RULE_className = 8, 
		RULE_classAlignDefine = 9, RULE_classAlignValue = 10, RULE_classBody = 11, 
		RULE_comment = 12, RULE_enumDeclaration = 13, RULE_enumParent = 14, RULE_enumName = 15, 
		RULE_enumElementList = 16, RULE_enumElement = 17, RULE_enumElementName = 18, 
		RULE_unionDeclaration = 19, RULE_typeDefine = 20, RULE_uDefine = 21, RULE_uDefineName = 22, 
		RULE_uMeta = 23, RULE_uMetaParametrList = 24, RULE_uMetaParametr = 25, 
		RULE_uMetaParamKey = 26, RULE_uMetaParamValue = 27, RULE_undefineBlock = 28, 
		RULE_undefineContent = 29, RULE_constructor = 30, RULE_constructorInitializerList = 31, 
		RULE_constructorInitializer = 32, RULE_method = 33, RULE_methodParamsList = 34, 
		RULE_methodParametr = 35, RULE_methodParametrName = 36, RULE_methodParametrDefaultValue = 37, 
		RULE_value = 38, RULE_methodBody = 39, RULE_methodBodyContent = 40, RULE_methodName = 41, 
		RULE_methodOperator = 42, RULE_property = 43, RULE_propertyName = 44, 
		RULE_propertyDefaultValue = 45, RULE_type = 46, RULE_isPtrQuant = 47, 
		RULE_isRefQuant = 48, RULE_typeName = 49, RULE_typeTemplateName = 50, 
		RULE_isVirtual = 51, RULE_isOverride = 52, RULE_isConst = 53, RULE_isStatic = 54, 
		RULE_isFriend = 55, RULE_isFinal = 56, RULE_isDestructor = 57, RULE_isDelete = 58, 
		RULE_isArray = 59, RULE_arrayLen = 60, RULE_templateDefine = 61, RULE_templateParamList = 62, 
		RULE_templateParam = 63, RULE_templateParamType = 64, RULE_templateParamLiter = 65, 
		RULE_accessSpecifierContainer = 66, RULE_accessSpecifier = 67, RULE_preprocessDerective = 68;
	public static readonly string[] ruleNames = {
		"translationUnit", "namespaceUnit", "namespaceName", "typePreDeclaration", 
		"classDeclaration", "classOrStructOrEnum", "classOrStruct", "classParentList", 
		"className", "classAlignDefine", "classAlignValue", "classBody", "comment", 
		"enumDeclaration", "enumParent", "enumName", "enumElementList", "enumElement", 
		"enumElementName", "unionDeclaration", "typeDefine", "uDefine", "uDefineName", 
		"uMeta", "uMetaParametrList", "uMetaParametr", "uMetaParamKey", "uMetaParamValue", 
		"undefineBlock", "undefineContent", "constructor", "constructorInitializerList", 
		"constructorInitializer", "method", "methodParamsList", "methodParametr", 
		"methodParametrName", "methodParametrDefaultValue", "value", "methodBody", 
		"methodBodyContent", "methodName", "methodOperator", "property", "propertyName", 
		"propertyDefaultValue", "type", "isPtrQuant", "isRefQuant", "typeName", 
		"typeTemplateName", "isVirtual", "isOverride", "isConst", "isStatic", 
		"isFriend", "isFinal", "isDestructor", "isDelete", "isArray", "arrayLen", 
		"templateDefine", "templateParamList", "templateParam", "templateParamType", 
		"templateParamLiter", "accessSpecifierContainer", "accessSpecifier", "preprocessDerective"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'<'", "'>'", "'('", "')'", "'='", "'|'", "'['", "']'", 
		"'*'", "'&'", "'private'", "'protected'", "'public'", null, "'explicit'", 
		"'virtual'", "'class'", "'struct'", "'enum'", "'union'", "'const'", "'final'", 
		"'static'", "'extern'", "'mutable'", "'override'", "'template'", "'friend'", 
		"'operator'", "'typedef'", "'CONSTEXPR'", "'{'", "'}'", "'~'", "'delete'", 
		"'GCC_ALIGN'", "'namespace'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "PtrQuant", 
		"RefQuant", "Private", "Protected", "Public", "Inline", "Explicit", "Virtual", 
		"Class", "Struct", "Enum", "Union", "Const", "Final", "Static", "Extern", 
		"Mutable", "Override", "Template", "Friend", "Operator", "Typedef", "Constexpr", 
		"BracketsOpen", "BracketsClose", "Tilda", "Delete", "GCC_ALIGN", "Namespace", 
		"DotDot", "SingleLineDerective", "MultiLineDerective", "Identifier", "Literal", 
		"SpecalSymbol", "Whitespace", "Newline", "ExportComment", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UHeader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UHeaderParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UHeaderParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UHeaderParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TranslationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(UHeaderParser.Eof, 0); }
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public NamespaceUnitContext[] namespaceUnit() {
			return GetRuleContexts<NamespaceUnitContext>();
		}
		public NamespaceUnitContext namespaceUnit(int i) {
			return GetRuleContext<NamespaceUnitContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Inline) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Template) | (1L << Friend) | (1L << Typedef) | (1L << Constexpr) | (1L << Namespace) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << ExportComment))) != 0)) {
				{
				State = 148;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 138; typePreDeclaration();
					}
					break;
				case 2:
					{
					State = 139; method();
					}
					break;
				case 3:
					{
					State = 140; classDeclaration();
					}
					break;
				case 4:
					{
					State = 141; enumDeclaration();
					}
					break;
				case 5:
					{
					State = 142; property();
					}
					break;
				case 6:
					{
					State = 143; typeDefine();
					}
					break;
				case 7:
					{
					State = 144; uDefine();
					}
					break;
				case 8:
					{
					State = 145; namespaceUnit();
					}
					break;
				case 9:
					{
					State = 146; comment();
					}
					break;
				case 10:
					{
					State = 147; preprocessDerective();
					}
					break;
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceUnitContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(UHeaderParser.Namespace, 0); }
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public NamespaceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceUnitContext namespaceUnit() {
		NamespaceUnitContext _localctx = new NamespaceUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(Namespace);
			State = 156; namespaceName();
			State = 157; Match(BracketsOpen);
			State = 158; translationUnit();
			State = 159; Match(BracketsClose);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 160; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePreDeclarationContext : ParserRuleContext {
		public ClassOrStructOrEnumContext classOrStructOrEnum() {
			return GetRuleContext<ClassOrStructOrEnumContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public IsFriendContext isFriend() {
			return GetRuleContext<IsFriendContext>(0);
		}
		public TypePreDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePreDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePreDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePreDeclarationContext typePreDeclaration() {
		TypePreDeclarationContext _localctx = new TypePreDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typePreDeclaration);
		int _la;
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Struct:
			case Enum:
			case Template:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 165; templateDefine();
					}
				}

				State = 168; classOrStructOrEnum();
				State = 169; className();
				State = 170; Match(T__0);
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; isFriend();
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) {
					{
					State = 173; classOrStructOrEnum();
					}
				}

				State = 176; className();
				State = 177; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ClassOrStructContext classOrStruct() {
			return GetRuleContext<ClassOrStructContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public IsFinalContext isFinal() {
			return GetRuleContext<IsFinalContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassAlignDefineContext classAlignDefine() {
			return GetRuleContext<ClassAlignDefineContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 181; templateDefine();
				}
			}

			State = 184; classOrStruct();
			State = 185; className();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final) {
				{
				State = 186; isFinal();
				}
			}

			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DotDot) {
				{
				State = 189; Match(DotDot);
				State = 190; classParentList();
				}
			}

			State = 193; Match(BracketsOpen);
			State = 194; classBody();
			State = 195; Match(BracketsClose);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GCC_ALIGN) {
				{
				State = 196; classAlignDefine();
				}
			}

			State = 199; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructOrEnumContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public ClassOrStructOrEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStructOrEnum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStructOrEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructOrEnumContext classOrStructOrEnum() {
		ClassOrStructOrEnumContext _localctx = new ClassOrStructOrEnumContext(Context, State);
		EnterRule(_localctx, 10, RULE_classOrStructOrEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrStructContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ClassOrStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrStruct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrStructContext classOrStruct() {
		ClassOrStructContext _localctx = new ClassOrStructContext(Context, State);
		EnterRule(_localctx, 12, RULE_classOrStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParentListContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassParentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParentListContext classParentList() {
		ClassParentListContext _localctx = new ClassParentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_classParentList);
		int _la;
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 205; accessSpecifier();
					}
				}

				State = 208; className();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 209; accessSpecifier();
					}
				}

				State = 212; className();
				State = 213; Match(T__1);
				State = 214; classParentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_className);
		int _la;
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; Match(Identifier);
				State = 220; Match(T__2);
				State = 221; className();
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 222; Match(T__1);
					State = 223; className();
					}
				}

				State = 226; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAlignDefineContext : ParserRuleContext {
		public ITerminalNode GCC_ALIGN() { return GetToken(UHeaderParser.GCC_ALIGN, 0); }
		public ClassAlignValueContext classAlignValue() {
			return GetRuleContext<ClassAlignValueContext>(0);
		}
		public ClassAlignDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAlignDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAlignDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAlignDefineContext classAlignDefine() {
		ClassAlignDefineContext _localctx = new ClassAlignDefineContext(Context, State);
		EnterRule(_localctx, 18, RULE_classAlignDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(GCC_ALIGN);
			State = 231; Match(T__4);
			State = 232; classAlignValue();
			State = 233; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAlignValueContext : ParserRuleContext {
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public ClassAlignValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAlignValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAlignValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAlignValueContext classAlignValue() {
		ClassAlignValueContext _localctx = new ClassAlignValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_classAlignValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 235; Match(Literal);
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Literal );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public AccessSpecifierContainerContext[] accessSpecifierContainer() {
			return GetRuleContexts<AccessSpecifierContainerContext>();
		}
		public AccessSpecifierContainerContext accessSpecifierContainer(int i) {
			return GetRuleContext<AccessSpecifierContainerContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public UDefineContext[] uDefine() {
			return GetRuleContexts<UDefineContext>();
		}
		public UDefineContext uDefine(int i) {
			return GetRuleContext<UDefineContext>(i);
		}
		public TypeDefineContext[] typeDefine() {
			return GetRuleContexts<TypeDefineContext>();
		}
		public TypeDefineContext typeDefine(int i) {
			return GetRuleContext<TypeDefineContext>(i);
		}
		public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public TypePreDeclarationContext[] typePreDeclaration() {
			return GetRuleContexts<TypePreDeclarationContext>();
		}
		public TypePreDeclarationContext typePreDeclaration(int i) {
			return GetRuleContext<TypePreDeclarationContext>(i);
		}
		public UnionDeclarationContext[] unionDeclaration() {
			return GetRuleContexts<UnionDeclarationContext>();
		}
		public UnionDeclarationContext unionDeclaration(int i) {
			return GetRuleContext<UnionDeclarationContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PreprocessDerectiveContext[] preprocessDerective() {
			return GetRuleContexts<PreprocessDerectiveContext>();
		}
		public PreprocessDerectiveContext preprocessDerective(int i) {
			return GetRuleContext<PreprocessDerectiveContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << Tilda) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << ExportComment))) != 0)) {
				{
				State = 252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 240; accessSpecifierContainer();
					}
					break;
				case 2:
					{
					State = 241; method();
					}
					break;
				case 3:
					{
					State = 242; constructor();
					}
					break;
				case 4:
					{
					State = 243; property();
					}
					break;
				case 5:
					{
					State = 244; uDefine();
					}
					break;
				case 6:
					{
					State = 245; typeDefine();
					}
					break;
				case 7:
					{
					State = 246; classDeclaration();
					}
					break;
				case 8:
					{
					State = 247; enumDeclaration();
					}
					break;
				case 9:
					{
					State = 248; typePreDeclaration();
					}
					break;
				case 10:
					{
					State = 249; unionDeclaration();
					}
					break;
				case 11:
					{
					State = 250; comment();
					}
					break;
				case 12:
					{
					State = 251; preprocessDerective();
					}
					break;
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode ExportComment() { return GetToken(UHeaderParser.ExportComment, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 24, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(ExportComment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public EnumParentContext enumParent() {
			return GetRuleContext<EnumParentContext>(0);
		}
		public EnumElementListContext enumElementList() {
			return GetRuleContext<EnumElementListContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumDeclaration);
		int _la;
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; Match(Enum);
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Class) {
					{
					State = 260; Match(Class);
					}
				}

				State = 263; enumName();
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 264; enumParent();
					}
				}

				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BracketsOpen) {
					{
					State = 267; Match(BracketsOpen);
					State = 268; enumElementList();
					State = 269; Match(BracketsClose);
					}
				}

				State = 273; Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; Match(Enum);
				State = 276; Match(BracketsOpen);
				State = 277; enumElementList();
				State = 278; Match(BracketsClose);
				State = 279; Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumParentContext : ParserRuleContext {
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public EnumParentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumParent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumParent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumParentContext enumParent() {
		EnumParentContext _localctx = new EnumParentContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumParent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(DotDot);
			State = 284; className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementListContext : ParserRuleContext {
		public EnumElementContext enumElement() {
			return GetRuleContext<EnumElementContext>(0);
		}
		public EnumElementListContext enumElementList() {
			return GetRuleContext<EnumElementListContext>(0);
		}
		public EnumElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementListContext enumElementList() {
		EnumElementListContext _localctx = new EnumElementListContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumElementList);
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; enumElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; enumElement();
				State = 290; Match(T__1);
				State = 291; enumElementList();
				State = 293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 292; Match(T__1);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		public EnumElementNameContext enumElementName() {
			return GetRuleContext<EnumElementNameContext>(0);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public UDefineContext uDefine() {
			return GetRuleContext<UDefineContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public EnumElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement() {
		EnumElementContext _localctx = new EnumElementContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ExportComment) {
				{
				{
				State = 297; comment();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 303; enumElementName();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==DotDot) {
				{
				State = 304;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==DotDot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 305; propertyDefaultValue();
				}
			}

			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 308; uDefine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public EnumElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElementName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementNameContext enumElementName() {
		EnumElementNameContext _localctx = new EnumElementNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_enumElementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionDeclarationContext : ParserRuleContext {
		public ITerminalNode Union() { return GetToken(UHeaderParser.Union, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public UnionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionDeclarationContext unionDeclaration() {
		UnionDeclarationContext _localctx = new UnionDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_unionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(Union);
			State = 314; methodBody();
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 315; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode Typedef() { return GetToken(UHeaderParser.Typedef, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(Typedef);
			State = 319; type();
			State = 320; typeName();
			State = 321; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineContext : ParserRuleContext {
		public UDefineNameContext uDefineName() {
			return GetRuleContext<UDefineNameContext>(0);
		}
		public UMetaContext uMeta() {
			return GetRuleContext<UMetaContext>(0);
		}
		public UDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineContext uDefine() {
		UDefineContext _localctx = new UDefineContext(Context, State);
		EnterRule(_localctx, 42, RULE_uDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; uDefineName();
			State = 324; Match(T__4);
			State = 325; uMeta();
			State = 326; Match(T__5);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 327; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public UDefineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefineName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineNameContext uDefineName() {
		UDefineNameContext _localctx = new UDefineNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_uDefineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaContext : ParserRuleContext {
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMeta; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaContext uMeta() {
		UMetaContext _localctx = new UMetaContext(Context, State);
		EnterRule(_localctx, 46, RULE_uMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier) | (1L << Literal))) != 0)) {
				{
				State = 332; uMetaParametrList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrListContext : ParserRuleContext {
		public UMetaParametrContext uMetaParametr() {
			return GetRuleContext<UMetaParametrContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametrList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrListContext uMetaParametrList() {
		UMetaParametrListContext _localctx = new UMetaParametrListContext(Context, State);
		EnterRule(_localctx, 48, RULE_uMetaParametrList);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335; uMetaParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336; uMetaParametr();
				State = 337; Match(T__1);
				State = 338; uMetaParametrList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrContext : ParserRuleContext {
		public UMetaParamKeyContext uMetaParamKey() {
			return GetRuleContext<UMetaParamKeyContext>(0);
		}
		public UMetaParamValueContext uMetaParamValue() {
			return GetRuleContext<UMetaParamValueContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrContext uMetaParametr() {
		UMetaParametrContext _localctx = new UMetaParametrContext(Context, State);
		EnterRule(_localctx, 50, RULE_uMetaParametr);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342; uMetaParamKey(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; uMetaParamKey(0);
				State = 344; Match(T__6);
				State = 345; uMetaParamValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 347; uMetaParamKey(0);
				State = 348; Match(T__6);
				State = 349; Match(T__4);
				State = 350; uMetaParametrList();
				State = 351; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamKeyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UMetaParamKeyContext[] uMetaParamKey() {
			return GetRuleContexts<UMetaParamKeyContext>();
		}
		public UMetaParamKeyContext uMetaParamKey(int i) {
			return GetRuleContext<UMetaParamKeyContext>(i);
		}
		public UMetaParamKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamKey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamKeyContext uMetaParamKey() {
		return uMetaParamKey(0);
	}

	private UMetaParamKeyContext uMetaParamKey(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UMetaParamKeyContext _localctx = new UMetaParamKeyContext(Context, _parentState);
		UMetaParamKeyContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_uMetaParamKey, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 356; type();
				}
				break;
			case 2:
				{
				State = 357; value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UMetaParamKeyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_uMetaParamKey);
					State = 360;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 361; Match(T__7);
					State = 362; uMetaParamKey(2);
					}
					} 
				}
				State = 367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UMetaParamValueContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UMetaParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamValueContext uMetaParamValue() {
		UMetaParamValueContext _localctx = new UMetaParamValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_uMetaParamValue);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefineBlockContext : ParserRuleContext {
		public UndefineContentContext undefineContent() {
			return GetRuleContext<UndefineContentContext>(0);
		}
		public UndefineBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefineBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefineBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefineBlockContext undefineBlock() {
		UndefineBlockContext _localctx = new UndefineBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_undefineBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(T__4);
			State = 373; undefineContent();
			State = 374; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefineContentContext : ParserRuleContext {
		public UndefineContentContext[] undefineContent() {
			return GetRuleContexts<UndefineContentContext>();
		}
		public UndefineContentContext undefineContent(int i) {
			return GetRuleContext<UndefineContentContext>(i);
		}
		public UndefineContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefineContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefineContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefineContentContext undefineContent() {
		UndefineContentContext _localctx = new UndefineContentContext(Context, State);
		EnterRule(_localctx, 58, RULE_undefineContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Final) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Override) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << BracketsOpen) | (1L << BracketsClose) | (1L << Tilda) | (1L << Delete) | (1L << GCC_ALIGN) | (1L << Namespace) | (1L << DotDot) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << Literal) | (1L << SpecalSymbol) | (1L << Whitespace) | (1L << Newline) | (1L << ExportComment) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 376;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__4 || _la==T__5) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 382; Match(T__4);
				State = 383; undefineContent();
				State = 384; Match(T__5);
				State = 385; undefineContent();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode[] Explicit() { return GetTokens(UHeaderParser.Explicit); }
		public ITerminalNode Explicit(int i) {
			return GetToken(UHeaderParser.Explicit, i);
		}
		public ITerminalNode[] Inline() { return GetTokens(UHeaderParser.Inline); }
		public ITerminalNode Inline(int i) {
			return GetToken(UHeaderParser.Inline, i);
		}
		public IsVirtualContext[] isVirtual() {
			return GetRuleContexts<IsVirtualContext>();
		}
		public IsVirtualContext isVirtual(int i) {
			return GetRuleContext<IsVirtualContext>(i);
		}
		public IsDestructorContext isDestructor() {
			return GetRuleContext<IsDestructorContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public ConstructorInitializerListContext constructorInitializerList() {
			return GetRuleContext<ConstructorInitializerListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IsDeleteContext isDelete() {
			return GetRuleContext<IsDeleteContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 60, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inline) | (1L << Explicit) | (1L << Virtual))) != 0)) {
				{
				State = 392;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Explicit:
					{
					State = 389; Match(Explicit);
					}
					break;
				case Inline:
					{
					State = 390; Match(Inline);
					}
					break;
				case Virtual:
					{
					State = 391; isVirtual();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Tilda) {
				{
				State = 397; isDestructor();
				}
			}

			State = 400; methodName();
			State = 401; Match(T__4);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 402; methodParamsList();
				}
			}

			State = 405; Match(T__5);
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 406; isConst();
				}
				break;
			}
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DotDot) {
				{
				State = 409; Match(DotDot);
				State = 410; constructorInitializerList();
				}
			}

			State = 415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BracketsOpen:
				{
				State = 413; methodBody();
				}
				break;
			case T__6:
				{
				State = 414; isDelete();
				}
				break;
			case T__0:
			case PtrQuant:
			case RefQuant:
			case Private:
			case Protected:
			case Public:
			case Inline:
			case Explicit:
			case Virtual:
			case Class:
			case Struct:
			case Enum:
			case Union:
			case Const:
			case Static:
			case Extern:
			case Mutable:
			case Template:
			case Friend:
			case Operator:
			case Typedef:
			case Constexpr:
			case BracketsClose:
			case Tilda:
			case SingleLineDerective:
			case MultiLineDerective:
			case Identifier:
			case ExportComment:
				break;
			default:
				break;
			}
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 417; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerListContext : ParserRuleContext {
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorInitializerListContext constructorInitializerList() {
			return GetRuleContext<ConstructorInitializerListContext>(0);
		}
		public ConstructorInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializerList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerListContext constructorInitializerList() {
		ConstructorInitializerListContext _localctx = new ConstructorInitializerListContext(Context, State);
		EnterRule(_localctx, 62, RULE_constructorInitializerList);
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420; constructorInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421; constructorInitializer();
				State = 422; Match(T__1);
				State = 423; constructorInitializerList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public UndefineBlockContext undefineBlock() {
			return GetRuleContext<UndefineBlockContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 64, RULE_constructorInitializer);
		int _la;
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; methodParametrName();
				State = 428; Match(T__4);
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << Literal))) != 0)) {
					{
					State = 429; methodParametrDefaultValue();
					}
				}

				State = 432; Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434; methodParametrName();
				State = 435; undefineBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public TemplateDefineContext templateDefine() {
			return GetRuleContext<TemplateDefineContext>(0);
		}
		public ITerminalNode[] Constexpr() { return GetTokens(UHeaderParser.Constexpr); }
		public ITerminalNode Constexpr(int i) {
			return GetToken(UHeaderParser.Constexpr, i);
		}
		public IsFriendContext[] isFriend() {
			return GetRuleContexts<IsFriendContext>();
		}
		public IsFriendContext isFriend(int i) {
			return GetRuleContext<IsFriendContext>(i);
		}
		public ITerminalNode[] Inline() { return GetTokens(UHeaderParser.Inline); }
		public ITerminalNode Inline(int i) {
			return GetToken(UHeaderParser.Inline, i);
		}
		public ITerminalNode[] Extern() { return GetTokens(UHeaderParser.Extern); }
		public ITerminalNode Extern(int i) {
			return GetToken(UHeaderParser.Extern, i);
		}
		public IsStaticContext[] isStatic() {
			return GetRuleContexts<IsStaticContext>();
		}
		public IsStaticContext isStatic(int i) {
			return GetRuleContext<IsStaticContext>(i);
		}
		public IsVirtualContext[] isVirtual() {
			return GetRuleContexts<IsVirtualContext>();
		}
		public IsVirtualContext isVirtual(int i) {
			return GetRuleContext<IsVirtualContext>(i);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public IsConstContext isConst() {
			return GetRuleContext<IsConstContext>(0);
		}
		public IsOverrideContext isOverride() {
			return GetRuleContext<IsOverrideContext>(0);
		}
		public IsFinalContext isFinal() {
			return GetRuleContext<IsFinalContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IsDeleteContext isDelete() {
			return GetRuleContext<IsDeleteContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 66, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 439; templateDefine();
				}
			}

			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inline) | (1L << Virtual) | (1L << Static) | (1L << Extern) | (1L << Friend) | (1L << Constexpr))) != 0)) {
				{
				State = 448;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Constexpr:
					{
					State = 442; Match(Constexpr);
					}
					break;
				case Friend:
					{
					State = 443; isFriend();
					}
					break;
				case Inline:
					{
					State = 444; Match(Inline);
					}
					break;
				case Extern:
					{
					State = 445; Match(Extern);
					}
					break;
				case Static:
					{
					State = 446; isStatic();
					}
					break;
				case Virtual:
					{
					State = 447; isVirtual();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 453; type();
			State = 454; methodName();
			State = 455; Match(T__4);
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 456; methodParamsList();
				}
			}

			State = 459; Match(T__5);
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 460; isConst();
				}
				break;
			}
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Override) {
				{
				State = 463; isOverride();
				}
			}

			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final) {
				{
				State = 466; isFinal();
				}
			}

			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BracketsOpen:
				{
				State = 469; methodBody();
				}
				break;
			case T__6:
				{
				State = 470; isDelete();
				}
				break;
			case Eof:
			case T__0:
			case PtrQuant:
			case RefQuant:
			case Private:
			case Protected:
			case Public:
			case Inline:
			case Explicit:
			case Virtual:
			case Class:
			case Struct:
			case Enum:
			case Union:
			case Const:
			case Static:
			case Extern:
			case Mutable:
			case Template:
			case Friend:
			case Operator:
			case Typedef:
			case Constexpr:
			case BracketsClose:
			case Tilda:
			case Namespace:
			case SingleLineDerective:
			case MultiLineDerective:
			case Identifier:
			case ExportComment:
				break;
			default:
				break;
			}
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 473; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParamsListContext : ParserRuleContext {
		public MethodParametrContext methodParametr() {
			return GetRuleContext<MethodParametrContext>(0);
		}
		public MethodParamsListContext methodParamsList() {
			return GetRuleContext<MethodParamsListContext>(0);
		}
		public MethodParamsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParamsList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParamsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParamsListContext methodParamsList() {
		MethodParamsListContext _localctx = new MethodParamsListContext(Context, State);
		EnterRule(_localctx, 68, RULE_methodParamsList);
		try {
			State = 481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; methodParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477; methodParametr();
				State = 478; Match(T__1);
				State = 479; methodParamsList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public MethodParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrContext methodParametr() {
		MethodParametrContext _localctx = new MethodParametrContext(Context, State);
		EnterRule(_localctx, 70, RULE_methodParametr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; type();
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 484; methodParametrName();
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 485; Match(T__6);
					State = 486; methodParametrDefaultValue();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public MethodParametrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrNameContext methodParametrName() {
		MethodParametrNameContext _localctx = new MethodParametrNameContext(Context, State);
		EnterRule(_localctx, 72, RULE_methodParametrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrDefaultValueContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public MethodParametrDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrDefaultValueContext methodParametrDefaultValue() {
		MethodParametrDefaultValueContext _localctx = new MethodParametrDefaultValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_methodParametrDefaultValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; value();
			State = 498;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 494; Match(T__1);
					State = 495; value();
					}
					} 
				}
				State = 500;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public IsPtrQuantContext isPtrQuant() {
			return GetRuleContext<IsPtrQuantContext>(0);
		}
		public IsRefQuantContext isRefQuant() {
			return GetRuleContext<IsRefQuantContext>(0);
		}
		public MethodParametrDefaultValueContext methodParametrDefaultValue() {
			return GetRuleContext<MethodParametrDefaultValueContext>(0);
		}
		public ITerminalNode[] SpecalSymbol() { return GetTokens(UHeaderParser.SpecalSymbol); }
		public ITerminalNode SpecalSymbol(int i) {
			return GetToken(UHeaderParser.SpecalSymbol, i);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 76, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 501; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 502; isRefQuant();
				}
				break;
			case Identifier:
			case Literal:
				break;
			default:
				break;
			}
			State = 505;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 506;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__7) | (1L << DotDot) | (1L << SpecalSymbol))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 509;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__7) | (1L << DotDot) | (1L << SpecalSymbol))) != 0) );
				State = 511;
				_la = TokenStream.LA(1);
				if ( !(_la==Identifier || _la==Literal) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 514; Match(T__4);
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << Literal))) != 0)) {
					{
					State = 515; methodParametrDefaultValue();
					}
				}

				State = 518; Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContentContext methodBodyContent() {
			return GetRuleContext<MethodBodyContentContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 78, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521; Match(BracketsOpen);
			State = 522; methodBodyContent();
			State = 523; Match(BracketsClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContentContext : ParserRuleContext {
		public ITerminalNode[] BracketsOpen() { return GetTokens(UHeaderParser.BracketsOpen); }
		public ITerminalNode BracketsOpen(int i) {
			return GetToken(UHeaderParser.BracketsOpen, i);
		}
		public ITerminalNode[] BracketsClose() { return GetTokens(UHeaderParser.BracketsClose); }
		public ITerminalNode BracketsClose(int i) {
			return GetToken(UHeaderParser.BracketsClose, i);
		}
		public MethodBodyContentContext[] methodBodyContent() {
			return GetRuleContexts<MethodBodyContentContext>();
		}
		public MethodBodyContentContext methodBodyContent(int i) {
			return GetRuleContext<MethodBodyContentContext>(i);
		}
		public MethodBodyContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBodyContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBodyContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContentContext methodBodyContent() {
		MethodBodyContentContext _localctx = new MethodBodyContentContext(Context, State);
		EnterRule(_localctx, 80, RULE_methodBodyContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Inline) | (1L << Explicit) | (1L << Virtual) | (1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Union) | (1L << Const) | (1L << Final) | (1L << Static) | (1L << Extern) | (1L << Mutable) | (1L << Override) | (1L << Template) | (1L << Friend) | (1L << Operator) | (1L << Typedef) | (1L << Constexpr) | (1L << Tilda) | (1L << Delete) | (1L << GCC_ALIGN) | (1L << Namespace) | (1L << DotDot) | (1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Identifier) | (1L << Literal) | (1L << SpecalSymbol) | (1L << Whitespace) | (1L << Newline) | (1L << ExportComment) | (1L << BlockComment) | (1L << LineComment))) != 0)) {
				{
				{
				State = 525;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==BracketsOpen || _la==BracketsClose) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BracketsOpen) {
				{
				State = 531; Match(BracketsOpen);
				State = 532; methodBodyContent();
				State = 533; Match(BracketsClose);
				State = 534; methodBodyContent();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode Operator() { return GetToken(UHeaderParser.Operator, 0); }
		public MethodOperatorContext methodOperator() {
			return GetRuleContext<MethodOperatorContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 82, RULE_methodName);
		int _la;
		try {
			State = 548;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 538; Match(Identifier);
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DotDot) {
					{
					State = 539; Match(DotDot);
					State = 540; Match(DotDot);
					State = 541; methodName();
					}
				}

				}
				break;
			case Operator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544; Match(Operator);
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0)) {
					{
					State = 545; methodOperator();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodOperatorContext : ParserRuleContext {
		public ITerminalNode[] PtrQuant() { return GetTokens(UHeaderParser.PtrQuant); }
		public ITerminalNode PtrQuant(int i) {
			return GetToken(UHeaderParser.PtrQuant, i);
		}
		public ITerminalNode[] SpecalSymbol() { return GetTokens(UHeaderParser.SpecalSymbol); }
		public ITerminalNode SpecalSymbol(int i) {
			return GetToken(UHeaderParser.SpecalSymbol, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public MethodOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodOperatorContext methodOperator() {
		MethodOperatorContext _localctx = new MethodOperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_methodOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 550;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << PtrQuant) | (1L << RefQuant) | (1L << Identifier) | (1L << SpecalSymbol))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode[] Mutable() { return GetTokens(UHeaderParser.Mutable); }
		public ITerminalNode Mutable(int i) {
			return GetToken(UHeaderParser.Mutable, i);
		}
		public ITerminalNode[] Extern() { return GetTokens(UHeaderParser.Extern); }
		public ITerminalNode Extern(int i) {
			return GetToken(UHeaderParser.Extern, i);
		}
		public IsStaticContext[] isStatic() {
			return GetRuleContexts<IsStaticContext>();
		}
		public IsStaticContext isStatic(int i) {
			return GetRuleContext<IsStaticContext>(i);
		}
		public IsArrayContext isArray() {
			return GetRuleContext<IsArrayContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 86, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Extern) | (1L << Mutable))) != 0)) {
				{
				State = 558;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Mutable:
					{
					State = 555; Match(Mutable);
					}
					break;
				case Extern:
					{
					State = 556; Match(Extern);
					}
					break;
				case Static:
					{
					State = 557; isStatic();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 563; type();
			State = 564; propertyName();
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 565; isArray();
				}
			}

			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==DotDot) {
				{
				State = 568;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==DotDot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 569; propertyDefaultValue();
				}
			}

			State = 572; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefaultValueContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PropertyDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefaultValueContext propertyDefaultValue() {
		PropertyDefaultValueContext _localctx = new PropertyDefaultValueContext(Context, State);
		EnterRule(_localctx, 90, RULE_propertyDefaultValue);
		int _la;
		try {
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576; Match(Identifier);
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 577; Match(T__4);
					State = 578; propertyDefaultValue();
					State = 579; Match(T__5);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IsConstContext[] isConst() {
			return GetRuleContexts<IsConstContext>();
		}
		public IsConstContext isConst(int i) {
			return GetRuleContext<IsConstContext>(i);
		}
		public ClassOrStructOrEnumContext classOrStructOrEnum() {
			return GetRuleContext<ClassOrStructOrEnumContext>(0);
		}
		public IsPtrQuantContext[] isPtrQuant() {
			return GetRuleContexts<IsPtrQuantContext>();
		}
		public IsPtrQuantContext isPtrQuant(int i) {
			return GetRuleContext<IsPtrQuantContext>(i);
		}
		public IsRefQuantContext[] isRefQuant() {
			return GetRuleContexts<IsRefQuantContext>();
		}
		public IsRefQuantContext isRefQuant(int i) {
			return GetRuleContext<IsRefQuantContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 586; isConst();
				}
			}

			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum))) != 0)) {
				{
				State = 589; classOrStructOrEnum();
				}
			}

			State = 594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PtrQuant:
				{
				State = 592; isPtrQuant();
				}
				break;
			case RefQuant:
				{
				State = 593; isRefQuant();
				}
				break;
			case Identifier:
				break;
			default:
				break;
			}
			State = 596; typeName();
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 597; isPtrQuant();
				}
				break;
			case 2:
				{
				State = 598; isRefQuant();
				}
				break;
			}
			State = 602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 601; isConst();
				}
				break;
			}
			State = 606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 604; isPtrQuant();
				}
				break;
			case 2:
				{
				State = 605; isRefQuant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsPtrQuantContext : ParserRuleContext {
		public ITerminalNode PtrQuant() { return GetToken(UHeaderParser.PtrQuant, 0); }
		public IsPtrQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isPtrQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsPtrQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsPtrQuantContext isPtrQuant() {
		IsPtrQuantContext _localctx = new IsPtrQuantContext(Context, State);
		EnterRule(_localctx, 94, RULE_isPtrQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(PtrQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsRefQuantContext : ParserRuleContext {
		public ITerminalNode RefQuant() { return GetToken(UHeaderParser.RefQuant, 0); }
		public IsRefQuantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isRefQuant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRefQuant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsRefQuantContext isRefQuant() {
		IsRefQuantContext _localctx = new IsRefQuantContext(Context, State);
		EnterRule(_localctx, 96, RULE_isRefQuant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(RefQuant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(UHeaderParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(UHeaderParser.Identifier, i);
		}
		public ITerminalNode[] DotDot() { return GetTokens(UHeaderParser.DotDot); }
		public ITerminalNode DotDot(int i) {
			return GetToken(UHeaderParser.DotDot, i);
		}
		public TypeTemplateNameContext typeTemplateName() {
			return GetRuleContext<TypeTemplateNameContext>(0);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] Literal() { return GetTokens(UHeaderParser.Literal); }
		public ITerminalNode Literal(int i) {
			return GetToken(UHeaderParser.Literal, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 98, RULE_typeName);
		int _la;
		try {
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 612; Match(Identifier);
				State = 619;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
				case 1:
					{
					State = 614;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 613; Match(DotDot);
						}
						}
						State = 616;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DotDot );
					State = 618; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621; typeTemplateName();
				{
				State = 622; Match(T__2);
				State = 625;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PtrQuant:
				case RefQuant:
				case Class:
				case Struct:
				case Enum:
				case Const:
				case Identifier:
					{
					State = 623; type();
					}
					break;
				case Literal:
					{
					State = 624; Match(Literal);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 627; Match(T__1);
					State = 630;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PtrQuant:
					case RefQuant:
					case Class:
					case Struct:
					case Enum:
					case Const:
					case Identifier:
						{
						State = 628; type();
						}
						break;
					case Literal:
						{
						State = 629; Match(Literal);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 636;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 637; Match(T__3);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTemplateNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TypeTemplateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTemplateName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTemplateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTemplateNameContext typeTemplateName() {
		TypeTemplateNameContext _localctx = new TypeTemplateNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeTemplateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsVirtualContext : ParserRuleContext {
		public ITerminalNode Virtual() { return GetToken(UHeaderParser.Virtual, 0); }
		public IsVirtualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isVirtual; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsVirtual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsVirtualContext isVirtual() {
		IsVirtualContext _localctx = new IsVirtualContext(Context, State);
		EnterRule(_localctx, 102, RULE_isVirtual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643; Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOverrideContext : ParserRuleContext {
		public ITerminalNode Override() { return GetToken(UHeaderParser.Override, 0); }
		public IsOverrideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOverride; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOverride(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOverrideContext isOverride() {
		IsOverrideContext _localctx = new IsOverrideContext(Context, State);
		EnterRule(_localctx, 104, RULE_isOverride);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645; Match(Override);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsConstContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(UHeaderParser.Const, 0); }
		public IsConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsConstContext isConst() {
		IsConstContext _localctx = new IsConstContext(Context, State);
		EnterRule(_localctx, 106, RULE_isConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsStaticContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(UHeaderParser.Static, 0); }
		public IsStaticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isStatic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsStatic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsStaticContext isStatic() {
		IsStaticContext _localctx = new IsStaticContext(Context, State);
		EnterRule(_localctx, 108, RULE_isStatic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649; Match(Static);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFriendContext : ParserRuleContext {
		public ITerminalNode Friend() { return GetToken(UHeaderParser.Friend, 0); }
		public IsFriendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFriend; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFriend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFriendContext isFriend() {
		IsFriendContext _localctx = new IsFriendContext(Context, State);
		EnterRule(_localctx, 110, RULE_isFriend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(Friend);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFinalContext : ParserRuleContext {
		public ITerminalNode Final() { return GetToken(UHeaderParser.Final, 0); }
		public IsFinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFinal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFinalContext isFinal() {
		IsFinalContext _localctx = new IsFinalContext(Context, State);
		EnterRule(_localctx, 112, RULE_isFinal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653; Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsDestructorContext : ParserRuleContext {
		public ITerminalNode Tilda() { return GetToken(UHeaderParser.Tilda, 0); }
		public IsDestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isDestructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsDestructorContext isDestructor() {
		IsDestructorContext _localctx = new IsDestructorContext(Context, State);
		EnterRule(_localctx, 114, RULE_isDestructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655; Match(Tilda);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsDeleteContext : ParserRuleContext {
		public ITerminalNode Delete() { return GetToken(UHeaderParser.Delete, 0); }
		public IsDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isDelete; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsDeleteContext isDelete() {
		IsDeleteContext _localctx = new IsDeleteContext(Context, State);
		EnterRule(_localctx, 116, RULE_isDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(T__6);
			State = 658; Match(Delete);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsArrayContext : ParserRuleContext {
		public ArrayLenContext arrayLen() {
			return GetRuleContext<ArrayLenContext>(0);
		}
		public IsArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isArray; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsArrayContext isArray() {
		IsArrayContext _localctx = new IsArrayContext(Context, State);
		EnterRule(_localctx, 118, RULE_isArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; Match(T__8);
			State = 661; arrayLen();
			State = 662; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLenContext : ParserRuleContext {
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public ArrayLenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLen; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLenContext arrayLen() {
		ArrayLenContext _localctx = new ArrayLenContext(Context, State);
		EnterRule(_localctx, 120, RULE_arrayLen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefineContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(UHeaderParser.Template, 0); }
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefineContext templateDefine() {
		TemplateDefineContext _localctx = new TemplateDefineContext(Context, State);
		EnterRule(_localctx, 122, RULE_templateDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(Template);
			State = 667; Match(T__2);
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Identifier))) != 0)) {
				{
				State = 668; templateParamList();
				}
			}

			State = 671; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamListContext : ParserRuleContext {
		public TemplateParamContext templateParam() {
			return GetRuleContext<TemplateParamContext>(0);
		}
		public TemplateParamListContext templateParamList() {
			return GetRuleContext<TemplateParamListContext>(0);
		}
		public TemplateParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamListContext templateParamList() {
		TemplateParamListContext _localctx = new TemplateParamListContext(Context, State);
		EnterRule(_localctx, 124, RULE_templateParamList);
		try {
			State = 678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673; templateParam();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674; templateParam();
				State = 675; Match(T__1);
				State = 676; templateParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamContext : ParserRuleContext {
		public TemplateParamTypeContext templateParamType() {
			return GetRuleContext<TemplateParamTypeContext>(0);
		}
		public TemplateParamLiterContext templateParamLiter() {
			return GetRuleContext<TemplateParamLiterContext>(0);
		}
		public PropertyDefaultValueContext propertyDefaultValue() {
			return GetRuleContext<PropertyDefaultValueContext>(0);
		}
		public TemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamContext templateParam() {
		TemplateParamContext _localctx = new TemplateParamContext(Context, State);
		EnterRule(_localctx, 126, RULE_templateParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; templateParamType();
			State = 682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 681; templateParamLiter();
				}
			}

			State = 686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 684; Match(T__6);
				State = 685; propertyDefaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ITerminalNode Enum() { return GetToken(UHeaderParser.Enum, 0); }
		public TemplateParamTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamTypeContext templateParamType() {
		TemplateParamTypeContext _localctx = new TemplateParamTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_templateParamType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Enum) | (1L << Identifier))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamLiterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public TemplateParamLiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamLiter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParamLiter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamLiterContext templateParamLiter() {
		TemplateParamLiterContext _localctx = new TemplateParamLiterContext(Context, State);
		EnterRule(_localctx, 130, RULE_templateParamLiter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContainerContext : ParserRuleContext {
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ITerminalNode DotDot() { return GetToken(UHeaderParser.DotDot, 0); }
		public AccessSpecifierContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifierContainer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifierContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContainerContext accessSpecifierContainer() {
		AccessSpecifierContainerContext _localctx = new AccessSpecifierContainerContext(Context, State);
		EnterRule(_localctx, 132, RULE_accessSpecifierContainer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692; accessSpecifier();
			State = 693; Match(DotDot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(UHeaderParser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(UHeaderParser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(UHeaderParser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext accessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 134, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessDerectiveContext : ParserRuleContext {
		public ITerminalNode SingleLineDerective() { return GetToken(UHeaderParser.SingleLineDerective, 0); }
		public ITerminalNode MultiLineDerective() { return GetToken(UHeaderParser.MultiLineDerective, 0); }
		public PreprocessDerectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessDerective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessDerective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessDerectiveContext preprocessDerective() {
		PreprocessDerectiveContext _localctx = new PreprocessDerectiveContext(Context, State);
		EnterRule(_localctx, 136, RULE_preprocessDerective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			_la = TokenStream.LA(1);
			if ( !(_la==SingleLineDerective || _la==MultiLineDerective) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return uMetaParamKey_sempred((UMetaParamKeyContext)_localctx, predIndex);
		}
		return true;
	}
	private bool uMetaParamKey_sempred(UMetaParamKeyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x34', '\x2BE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x97', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x9A', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\xA4', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x5', '\x5', '\xA9', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xB1', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\xB6', '\n', '\x5', '\x3', '\x6', '\x5', '\x6', 
		'\xB9', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\xBE', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\xC2', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\xC8', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x5', 
		'\t', '\xD1', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD5', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xDB', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xE3', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\xE7', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x6', '\f', 
		'\xEF', '\n', '\f', '\r', '\f', '\xE', '\f', '\xF0', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\xFF', '\n', '\r', '\f', '\r', '\xE', '\r', '\x102', '\v', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x108', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x10C', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x112', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x11C', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x128', '\n', '\x12', 
		'\x5', '\x12', '\x12A', '\n', '\x12', '\x3', '\x13', '\a', '\x13', '\x12D', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x130', '\v', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x135', '\n', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x138', '\n', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x13F', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x14B', '\n', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x5', '\x19', '\x150', '\n', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x157', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x164', '\n', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x169', '\n', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x16E', 
		'\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x171', '\v', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x175', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\a', '\x1F', 
		'\x17C', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x17F', '\v', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x186', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\a', ' ', '\x18B', '\n', ' ', '\f', ' ', '\xE', ' ', '\x18E', '\v', ' ', 
		'\x3', ' ', '\x5', ' ', '\x191', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x196', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x19A', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x19E', '\n', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1A2', '\n', ' ', '\x3', ' ', 
		'\x5', ' ', '\x1A5', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x1AC', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x1B1', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1B8', '\n', '\"', 
		'\x3', '#', '\x5', '#', '\x1BB', '\n', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', '\x1C3', '\n', '#', 
		'\f', '#', '\xE', '#', '\x1C6', '\v', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x5', '#', '\x1CC', '\n', '#', '\x3', '#', '\x3', '#', 
		'\x5', '#', '\x1D0', '\n', '#', '\x3', '#', '\x5', '#', '\x1D3', '\n', 
		'#', '\x3', '#', '\x5', '#', '\x1D6', '\n', '#', '\x3', '#', '\x3', '#', 
		'\x5', '#', '\x1DA', '\n', '#', '\x3', '#', '\x5', '#', '\x1DD', '\n', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', 
		'$', '\x1E4', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x1EA', '\n', '%', '\x5', '%', '\x1EC', '\n', '%', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x1F3', 
		'\n', '\'', '\f', '\'', '\xE', '\'', '\x1F6', '\v', '\'', '\x3', '(', 
		'\x3', '(', '\x5', '(', '\x1FA', '\n', '(', '\x3', '(', '\x3', '(', '\x6', 
		'(', '\x1FE', '\n', '(', '\r', '(', '\xE', '(', '\x1FF', '\x3', '(', '\x5', 
		'(', '\x203', '\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x207', 
		'\n', '(', '\x3', '(', '\x5', '(', '\x20A', '\n', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', '*', '\a', '*', '\x211', '\n', '*', 
		'\f', '*', '\xE', '*', '\x214', '\v', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x21B', '\n', '*', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x221', '\n', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x225', '\n', '+', '\x5', '+', '\x227', 
		'\n', '+', '\x3', ',', '\x6', ',', '\x22A', '\n', ',', '\r', ',', '\xE', 
		',', '\x22B', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x231', 
		'\n', '-', '\f', '-', '\xE', '-', '\x234', '\v', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x5', '-', '\x239', '\n', '-', '\x3', '-', '\x3', '-', 
		'\x5', '-', '\x23D', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x248', '\n', '/', '\x3', '/', '\x5', '/', '\x24B', '\n', '/', '\x3', 
		'\x30', '\x5', '\x30', '\x24E', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x251', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x255', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x25A', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x25D', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x261', '\n', '\x30', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x6', '\x33', '\x269', '\n', '\x33', '\r', '\x33', '\xE', '\x33', 
		'\x26A', '\x3', '\x33', '\x5', '\x33', '\x26E', '\n', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x274', '\n', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x279', 
		'\n', '\x33', '\a', '\x33', '\x27B', '\n', '\x33', '\f', '\x33', '\xE', 
		'\x33', '\x27E', '\v', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x282', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x5', '?', '\x2A0', '\n', '?', '\x3', '?', 
		'\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x5', '@', '\x2A9', '\n', '@', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', 
		'\x2AD', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x2B1', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x2', '\x3', '\x36', 'G', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x2', '\r', '\x3', '\x2', '\x15', '\x17', '\x3', '\x2', '\x15', 
		'\x16', '\x4', '\x2', '\t', '\t', '*', '*', '\x3', '\x2', '\a', '\b', 
		'\x3', '\x2', '-', '.', '\x6', '\x2', '\x5', '\x6', '\n', '\n', '*', '*', 
		'/', '/', '\x3', '\x2', '$', '%', '\x6', '\x2', '\x5', '\x6', '\t', '\xE', 
		'-', '-', '/', '/', '\x4', '\x2', '\x15', '\x17', '-', '-', '\x3', '\x2', 
		'\xF', '\x11', '\x3', '\x2', '+', ',', '\x2', '\x2F5', '\x2', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\b', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\xB8', '\x3', '\x2', '\x2', '\x2', '\f', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x12', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xE8', '\x3', '\x2', '\x2', '\x2', '\x16', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x103', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x11B', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x11D', '\x3', '\x2', '\x2', '\x2', ' ', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x12E', '\x3', '\x2', '\x2', '\x2', '&', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x13B', '\x3', '\x2', '\x2', '\x2', '*', '\x140', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x30', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x156', '\x3', '\x2', '\x2', '\x2', '\x34', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x174', '\x3', '\x2', '\x2', '\x2', ':', '\x176', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x17D', '\x3', '\x2', '\x2', '\x2', '>', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1BA', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1E3', '\x3', '\x2', '\x2', '\x2', 'H', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1EF', '\x3', '\x2', '\x2', '\x2', 'N', '\x1F9', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x20B', '\x3', '\x2', '\x2', '\x2', 'R', '\x212', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x229', '\x3', '\x2', '\x2', '\x2', 'X', '\x232', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x240', '\x3', '\x2', '\x2', '\x2', '\\', '\x24A', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x262', '\x3', '\x2', '\x2', '\x2', '\x62', '\x264', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x281', '\x3', '\x2', '\x2', '\x2', '\x66', '\x283', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x285', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x287', '\x3', '\x2', '\x2', '\x2', 'l', '\x289', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x28B', '\x3', '\x2', '\x2', '\x2', 'p', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x28F', '\x3', '\x2', '\x2', '\x2', 
		't', '\x291', '\x3', '\x2', '\x2', '\x2', 'v', '\x293', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x296', '\x3', '\x2', '\x2', '\x2', 'z', '\x29A', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x29C', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x80', '\x2AA', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x84', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x2B6', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x2BB', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x97', '\x5', '\b', '\x5', '\x2', '\x8D', '\x97', 
		'\x5', '\x44', '#', '\x2', '\x8E', '\x97', '\x5', '\n', '\x6', '\x2', 
		'\x8F', '\x97', '\x5', '\x1C', '\xF', '\x2', '\x90', '\x97', '\x5', 'X', 
		'-', '\x2', '\x91', '\x97', '\x5', '*', '\x16', '\x2', '\x92', '\x97', 
		'\x5', ',', '\x17', '\x2', '\x93', '\x97', '\x5', '\x4', '\x3', '\x2', 
		'\x94', '\x97', '\x5', '\x1A', '\xE', '\x2', '\x95', '\x97', '\x5', '\x8A', 
		'\x46', '\x2', '\x96', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x96', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x96', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x91', '\x3', '\x2', '\x2', '\x2', '\x96', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\a', '\x2', '\x2', '\x3', '\x9C', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', ')', '\x2', '\x2', '\x9E', 
		'\x9F', '\x5', '\x6', '\x4', '\x2', '\x9F', '\xA0', '\a', '$', '\x2', 
		'\x2', '\xA0', '\xA1', '\x5', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\a', 
		'%', '\x2', '\x2', '\xA2', '\xA4', '\a', '\x3', '\x2', '\x2', '\xA3', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'-', '\x2', '\x2', '\xA6', '\a', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', 
		'\x5', '|', '?', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x5', '\f', '\a', '\x2', '\xAB', '\xAC', '\x5', 
		'\x12', '\n', '\x2', '\xAC', '\xAD', '\a', '\x3', '\x2', '\x2', '\xAD', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\x5', 'p', '\x39', 
		'\x2', '\xAF', '\xB1', '\x5', '\f', '\a', '\x2', '\xB0', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x12', '\n', 
		'\x2', '\xB3', '\xB4', '\a', '\x3', '\x2', '\x2', '\xB4', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB6', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB9', '\x5', '|', '?', '\x2', '\xB8', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\xE', '\b', 
		'\x2', '\xBB', '\xBD', '\x5', '\x12', '\n', '\x2', '\xBC', '\xBE', '\x5', 
		'r', ':', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC0', '\a', '*', '\x2', '\x2', '\xC0', '\xC2', '\x5', '\x10', 
		'\t', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\a', '$', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x18', 
		'\r', '\x2', '\xC5', '\xC7', '\a', '%', '\x2', '\x2', '\xC6', '\xC8', 
		'\x5', '\x14', '\v', '\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xCA', '\a', '\x3', '\x2', '\x2', '\xCA', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\t', '\x2', '\x2', '\x2', 
		'\xCC', '\r', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\t', '\x3', 
		'\x2', '\x2', '\xCE', '\xF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD1', 
		'\x5', '\x88', '\x45', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xDB', '\x5', '\x12', '\n', '\x2', '\xD3', '\xD5', 
		'\x5', '\x88', '\x45', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD7', '\x5', '\x12', '\n', '\x2', '\xD7', '\xD8', 
		'\a', '\x4', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x10', '\t', '\x2', 
		'\xD9', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xDB', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xE7', '\a', '-', '\x2', '\x2', '\xDD', 
		'\xDE', '\a', '-', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x5', '\x2', '\x2', 
		'\xDF', '\xE2', '\x5', '\x12', '\n', '\x2', '\xE0', '\xE1', '\a', '\x4', 
		'\x2', '\x2', '\xE1', '\xE3', '\x5', '\x12', '\n', '\x2', '\xE2', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x6', 
		'\x2', '\x2', '\xE5', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\x13', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', '(', 
		'\x2', '\x2', '\xE9', '\xEA', '\a', '\a', '\x2', '\x2', '\xEA', '\xEB', 
		'\x5', '\x16', '\f', '\x2', '\xEB', '\xEC', '\a', '\b', '\x2', '\x2', 
		'\xEC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEF', '\a', '.', 
		'\x2', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xFF', '\x5', '\x86', '\x44', '\x2', '\xF3', '\xFF', 
		'\x5', '\x44', '#', '\x2', '\xF4', '\xFF', '\x5', '>', ' ', '\x2', '\xF5', 
		'\xFF', '\x5', 'X', '-', '\x2', '\xF6', '\xFF', '\x5', ',', '\x17', '\x2', 
		'\xF7', '\xFF', '\x5', '*', '\x16', '\x2', '\xF8', '\xFF', '\x5', '\n', 
		'\x6', '\x2', '\xF9', '\xFF', '\x5', '\x1C', '\xF', '\x2', '\xFA', '\xFF', 
		'\x5', '\b', '\x5', '\x2', '\xFB', '\xFF', '\x5', '(', '\x15', '\x2', 
		'\xFC', '\xFF', '\x5', '\x1A', '\xE', '\x2', '\xFD', '\xFF', '\x5', '\x8A', 
		'\x46', '\x2', '\xFE', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x19', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\a', '\x32', '\x2', 
		'\x2', '\x104', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107', 
		'\a', '\x17', '\x2', '\x2', '\x106', '\x108', '\a', '\x15', '\x2', '\x2', 
		'\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10B', '\x5', ' ', '\x11', '\x2', '\x10A', '\x10C', '\x5', '\x1E', '\x10', 
		'\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\a', '$', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\"', 
		'\x12', '\x2', '\x10F', '\x110', '\a', '%', '\x2', '\x2', '\x110', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x114', '\a', '\x3', '\x2', '\x2', '\x114', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\a', '\x17', '\x2', 
		'\x2', '\x116', '\x117', '\a', '$', '\x2', '\x2', '\x117', '\x118', '\x5', 
		'\"', '\x12', '\x2', '\x118', '\x119', '\a', '%', '\x2', '\x2', '\x119', 
		'\x11A', '\a', '\x3', '\x2', '\x2', '\x11A', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x105', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\a', '*', '\x2', '\x2', '\x11E', '\x11F', '\x5', '\x12', 
		'\n', '\x2', '\x11F', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', 
		'\a', '-', '\x2', '\x2', '\x121', '!', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x12A', '\x5', '$', '\x13', '\x2', '\x123', '\x124', '\x5', '$', '\x13', 
		'\x2', '\x124', '\x125', '\a', '\x4', '\x2', '\x2', '\x125', '\x127', 
		'\x5', '\"', '\x12', '\x2', '\x126', '\x128', '\a', '\x4', '\x2', '\x2', 
		'\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x129', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '#', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', '\x5', 
		'\x1A', '\xE', '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x134', '\x5', '&', '\x14', '\x2', '\x132', '\x133', '\t', '\x4', 
		'\x2', '\x2', '\x133', '\x135', '\x5', '\\', '/', '\x2', '\x134', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x137', '\x3', '\x2', '\x2', '\x2', '\x136', '\x138', '\x5', 
		',', '\x17', '\x2', '\x137', '\x136', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13A', '\a', '-', '\x2', '\x2', '\x13A', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x13C', '\a', '\x18', '\x2', '\x2', '\x13C', 
		'\x13E', '\x5', 'P', ')', '\x2', '\x13D', '\x13F', '\a', '\x3', '\x2', 
		'\x2', '\x13E', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x141', '\a', '\"', '\x2', '\x2', '\x141', '\x142', '\x5', '^', 
		'\x30', '\x2', '\x142', '\x143', '\x5', '\x64', '\x33', '\x2', '\x143', 
		'\x144', '\a', '\x3', '\x2', '\x2', '\x144', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x146', '\x5', '.', '\x18', '\x2', '\x146', '\x147', 
		'\a', '\a', '\x2', '\x2', '\x147', '\x148', '\x5', '\x30', '\x19', '\x2', 
		'\x148', '\x14A', '\a', '\b', '\x2', '\x2', '\x149', '\x14B', '\a', '\x3', 
		'\x2', '\x2', '\x14A', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14D', '\a', '-', '\x2', '\x2', '\x14D', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x14E', '\x150', '\x5', '\x32', '\x1A', '\x2', '\x14F', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x31', '\x3', '\x2', '\x2', '\x2', '\x151', '\x157', 
		'\x5', '\x34', '\x1B', '\x2', '\x152', '\x153', '\x5', '\x34', '\x1B', 
		'\x2', '\x153', '\x154', '\a', '\x4', '\x2', '\x2', '\x154', '\x155', 
		'\x5', '\x32', '\x1A', '\x2', '\x155', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x151', '\x3', '\x2', '\x2', '\x2', '\x156', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x157', '\x33', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x164', '\x5', '\x36', '\x1C', '\x2', '\x159', '\x15A', '\x5', '\x36', 
		'\x1C', '\x2', '\x15A', '\x15B', '\a', '\t', '\x2', '\x2', '\x15B', '\x15C', 
		'\x5', '\x38', '\x1D', '\x2', '\x15C', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15E', '\x5', '\x36', '\x1C', '\x2', '\x15E', '\x15F', '\a', 
		'\t', '\x2', '\x2', '\x15F', '\x160', '\a', '\a', '\x2', '\x2', '\x160', 
		'\x161', '\x5', '\x32', '\x1A', '\x2', '\x161', '\x162', '\a', '\b', '\x2', 
		'\x2', '\x162', '\x164', '\x3', '\x2', '\x2', '\x2', '\x163', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x164', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x166', '\b', '\x1C', '\x1', '\x2', '\x166', 
		'\x169', '\x5', '^', '\x30', '\x2', '\x167', '\x169', '\x5', 'N', '(', 
		'\x2', '\x168', '\x165', '\x3', '\x2', '\x2', '\x2', '\x168', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16B', '\f', '\x3', '\x2', '\x2', '\x16B', '\x16C', '\a', '\n', 
		'\x2', '\x2', '\x16C', '\x16E', '\x5', '\x36', '\x1C', '\x4', '\x16D', 
		'\x16A', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x172', '\x175', '\x5', 
		'^', '\x30', '\x2', '\x173', '\x175', '\x5', 'N', '(', '\x2', '\x174', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x174', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '\x39', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', 
		'\a', '\a', '\x2', '\x2', '\x177', '\x178', '\x5', '<', '\x1F', '\x2', 
		'\x178', '\x179', '\a', '\b', '\x2', '\x2', '\x179', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x17C', '\n', '\x5', '\x2', '\x2', '\x17B', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x185', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\a', '\a', '\x2', 
		'\x2', '\x181', '\x182', '\x5', '<', '\x1F', '\x2', '\x182', '\x183', 
		'\a', '\b', '\x2', '\x2', '\x183', '\x184', '\x5', '<', '\x1F', '\x2', 
		'\x184', '\x186', '\x3', '\x2', '\x2', '\x2', '\x185', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x187', '\x18B', '\a', '\x13', '\x2', 
		'\x2', '\x188', '\x18B', '\a', '\x12', '\x2', '\x2', '\x189', '\x18B', 
		'\x5', 'h', '\x35', '\x2', '\x18A', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x18A', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x191', '\x5', 't', ';', '\x2', 
		'\x190', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x193', '\x5', 'T', '+', '\x2', '\x193', '\x195', '\a', '\a', '\x2', 
		'\x2', '\x194', '\x196', '\x5', '\x46', '$', '\x2', '\x195', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', '\x199', '\a', 
		'\b', '\x2', '\x2', '\x198', '\x19A', '\x5', 'l', '\x37', '\x2', '\x199', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', 
		'\a', '*', '\x2', '\x2', '\x19C', '\x19E', '\x5', '@', '!', '\x2', '\x19D', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A2', 
		'\x5', 'P', ')', '\x2', '\x1A0', '\x1A2', '\x5', 'v', '<', '\x2', '\x1A1', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A5', '\a', '\x3', '\x2', '\x2', 
		'\x1A4', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '?', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1AC', '\x5', '\x42', '\"', '\x2', '\x1A7', '\x1A8', '\x5', '\x42', 
		'\"', '\x2', '\x1A8', '\x1A9', '\a', '\x4', '\x2', '\x2', '\x1A9', '\x1AA', 
		'\x5', '@', '!', '\x2', '\x1AA', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1AE', '\x5', 'J', '&', '\x2', '\x1AE', '\x1B0', '\a', '\a', '\x2', 
		'\x2', '\x1AF', '\x1B1', '\x5', 'L', '\'', '\x2', '\x1B0', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '\b', '\x2', 
		'\x2', '\x1B3', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', 
		'\x5', 'J', '&', '\x2', '\x1B5', '\x1B6', '\x5', ':', '\x1E', '\x2', '\x1B6', 
		'\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BB', '\x5', '|', '?', '\x2', 
		'\x1BA', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1C3', '\a', '#', '\x2', '\x2', '\x1BD', '\x1C3', '\x5', 'p', '\x39', 
		'\x2', '\x1BE', '\x1C3', '\a', '\x12', '\x2', '\x2', '\x1BF', '\x1C3', 
		'\a', '\x1C', '\x2', '\x2', '\x1C0', '\x1C3', '\x5', 'n', '\x38', '\x2', 
		'\x1C1', '\x1C3', '\x5', 'h', '\x35', '\x2', '\x1C2', '\x1BC', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x5', '^', '\x30', 
		'\x2', '\x1C8', '\x1C9', '\x5', 'T', '+', '\x2', '\x1C9', '\x1CB', '\a', 
		'\a', '\x2', '\x2', '\x1CA', '\x1CC', '\x5', '\x46', '$', '\x2', '\x1CB', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CF', 
		'\a', '\b', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', 'l', '\x37', '\x2', 
		'\x1CF', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D3', '\x5', 'j', '\x36', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D6', '\x5', 'r', ':', '\x2', 
		'\x1D5', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1DA', '\x5', 'P', ')', '\x2', '\x1D8', '\x1DA', '\x5', 'v', '<', '\x2', 
		'\x1D9', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DD', '\a', '\x3', '\x2', 
		'\x2', '\x1DC', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1E4', '\x5', 'H', '%', '\x2', '\x1DF', '\x1E0', '\x5', 'H', 
		'%', '\x2', '\x1E0', '\x1E1', '\a', '\x4', '\x2', '\x2', '\x1E1', '\x1E2', 
		'\x5', '\x46', '$', '\x2', '\x1E2', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1DF', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', 'G', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1EB', '\x5', '^', '\x30', '\x2', '\x1E6', '\x1E9', '\x5', 'J', '&', 
		'\x2', '\x1E7', '\x1E8', '\a', '\t', '\x2', '\x2', '\x1E8', '\x1EA', '\x5', 
		'L', '\'', '\x2', '\x1E9', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E9', 
		'\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EB', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x1ED', '\x1EE', '\a', '-', '\x2', '\x2', '\x1EE', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1EF', '\x1F4', '\x5', 'N', '(', '\x2', '\x1F0', '\x1F1', 
		'\a', '\x4', '\x2', '\x2', '\x1F1', '\x1F3', '\x5', 'N', '(', '\x2', '\x1F2', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F6', '\x3', '\x2', '\x2', 
		'\x2', '\x1F4', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', 
		'\x3', '\x2', '\x2', '\x2', '\x1F5', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FA', '\x5', 
		'`', '\x31', '\x2', '\x1F8', '\x1FA', '\x5', '\x62', '\x32', '\x2', '\x1F9', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F8', '\x3', '\x2', '\x2', 
		'\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1FB', '\x202', '\t', '\x6', '\x2', '\x2', 
		'\x1FC', '\x1FE', '\t', '\a', '\x2', '\x2', '\x1FD', '\x1FC', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x201', '\x3', '\x2', '\x2', '\x2', '\x201', '\x203', '\t', 
		'\x6', '\x2', '\x2', '\x202', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x203', '\x209', '\x3', '\x2', '\x2', 
		'\x2', '\x204', '\x206', '\a', '\a', '\x2', '\x2', '\x205', '\x207', '\x5', 
		'L', '\'', '\x2', '\x206', '\x205', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x207', '\x208', '\x3', '\x2', '\x2', 
		'\x2', '\x208', '\x20A', '\a', '\b', '\x2', '\x2', '\x209', '\x204', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\a', '$', '\x2', '\x2', 
		'\x20C', '\x20D', '\x5', 'R', '*', '\x2', '\x20D', '\x20E', '\a', '%', 
		'\x2', '\x2', '\x20E', 'Q', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x211', 
		'\n', '\b', '\x2', '\x2', '\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x214', '\x3', '\x2', '\x2', '\x2', '\x212', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x21A', '\x3', '\x2', '\x2', '\x2', '\x214', '\x212', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x216', '\a', '$', '\x2', '\x2', '\x216', '\x217', '\x5', 
		'R', '*', '\x2', '\x217', '\x218', '\a', '%', '\x2', '\x2', '\x218', '\x219', 
		'\x5', 'R', '*', '\x2', '\x219', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21A', '\x215', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', 'S', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x220', '\a', '-', '\x2', '\x2', '\x21D', '\x21E', '\a', '*', '\x2', 
		'\x2', '\x21E', '\x21F', '\a', '*', '\x2', '\x2', '\x21F', '\x221', '\x5', 
		'T', '+', '\x2', '\x220', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x221', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x222', '\x224', '\a', '!', '\x2', '\x2', '\x223', '\x225', '\x5', 
		'V', ',', '\x2', '\x224', '\x223', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x225', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x226', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x226', '\x222', 
		'\x3', '\x2', '\x2', '\x2', '\x227', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x22A', '\t', '\t', '\x2', '\x2', '\x229', '\x228', '\x3', '\x2', 
		'\x2', '\x2', '\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x229', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', 'W', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x231', '\a', '\x1D', 
		'\x2', '\x2', '\x22E', '\x231', '\a', '\x1C', '\x2', '\x2', '\x22F', '\x231', 
		'\x5', 'n', '\x38', '\x2', '\x230', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x230', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22F', '\x3', 
		'\x2', '\x2', '\x2', '\x231', '\x234', '\x3', '\x2', '\x2', '\x2', '\x232', 
		'\x230', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', '\x3', '\x2', '\x2', 
		'\x2', '\x233', '\x235', '\x3', '\x2', '\x2', '\x2', '\x234', '\x232', 
		'\x3', '\x2', '\x2', '\x2', '\x235', '\x236', '\x5', '^', '\x30', '\x2', 
		'\x236', '\x238', '\x5', 'Z', '.', '\x2', '\x237', '\x239', '\x5', 'x', 
		'=', '\x2', '\x238', '\x237', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23C', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x23B', '\t', '\x4', '\x2', '\x2', '\x23B', '\x23D', '\x5', 
		'\\', '/', '\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', '\x2', '\x2', 
		'\x2', '\x23E', '\x23F', '\a', '\x3', '\x2', '\x2', '\x23F', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x241', '\a', '-', '\x2', '\x2', '\x241', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x242', '\x247', '\a', '-', '\x2', '\x2', 
		'\x243', '\x244', '\a', '\a', '\x2', '\x2', '\x244', '\x245', '\x5', '\\', 
		'/', '\x2', '\x245', '\x246', '\a', '\b', '\x2', '\x2', '\x246', '\x248', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x247', '\x248', '\x3', '\x2', '\x2', '\x2', '\x248', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x24B', '\x5', 'N', '(', '\x2', '\x24A', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x24B', ']', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24E', '\x5', 
		'l', '\x37', '\x2', '\x24D', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x250', '\x3', '\x2', '\x2', 
		'\x2', '\x24F', '\x251', '\x5', '\f', '\a', '\x2', '\x250', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x250', '\x251', '\x3', '\x2', '\x2', '\x2', '\x251', 
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x252', '\x255', '\x5', '`', '\x31', 
		'\x2', '\x253', '\x255', '\x5', '\x62', '\x32', '\x2', '\x254', '\x252', 
		'\x3', '\x2', '\x2', '\x2', '\x254', '\x253', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x255', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x259', '\x5', '\x64', '\x33', '\x2', '\x257', 
		'\x25A', '\x5', '`', '\x31', '\x2', '\x258', '\x25A', '\x5', '\x62', '\x32', 
		'\x2', '\x259', '\x257', '\x3', '\x2', '\x2', '\x2', '\x259', '\x258', 
		'\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25D', '\x5', 
		'l', '\x37', '\x2', '\x25C', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25C', 
		'\x25D', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x260', '\x3', '\x2', '\x2', 
		'\x2', '\x25E', '\x261', '\x5', '`', '\x31', '\x2', '\x25F', '\x261', 
		'\x5', '\x62', '\x32', '\x2', '\x260', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\x261', '_', '\x3', '\x2', '\x2', '\x2', '\x262', 
		'\x263', '\a', '\r', '\x2', '\x2', '\x263', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x264', '\x265', '\a', '\xE', '\x2', '\x2', '\x265', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x266', '\x26D', '\a', '-', '\x2', '\x2', '\x267', 
		'\x269', '\a', '*', '\x2', '\x2', '\x268', '\x267', '\x3', '\x2', '\x2', 
		'\x2', '\x269', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x268', 
		'\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26E', '\a', 
		'-', '\x2', '\x2', '\x26D', '\x268', '\x3', '\x2', '\x2', '\x2', '\x26D', 
		'\x26E', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x282', '\x3', '\x2', '\x2', 
		'\x2', '\x26F', '\x270', '\x5', '\x66', '\x34', '\x2', '\x270', '\x273', 
		'\a', '\x5', '\x2', '\x2', '\x271', '\x274', '\x5', '^', '\x30', '\x2', 
		'\x272', '\x274', '\a', '.', '\x2', '\x2', '\x273', '\x271', '\x3', '\x2', 
		'\x2', '\x2', '\x273', '\x272', '\x3', '\x2', '\x2', '\x2', '\x274', '\x27C', 
		'\x3', '\x2', '\x2', '\x2', '\x275', '\x278', '\a', '\x4', '\x2', '\x2', 
		'\x276', '\x279', '\x5', '^', '\x30', '\x2', '\x277', '\x279', '\a', '.', 
		'\x2', '\x2', '\x278', '\x276', '\x3', '\x2', '\x2', '\x2', '\x278', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x279', '\x27B', '\x3', '\x2', '\x2', '\x2', 
		'\x27A', '\x275', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27E', '\x3', 
		'\x2', '\x2', '\x2', '\x27C', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x27C', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27F', '\x3', '\x2', '\x2', 
		'\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x280', 
		'\a', '\x6', '\x2', '\x2', '\x280', '\x282', '\x3', '\x2', '\x2', '\x2', 
		'\x281', '\x266', '\x3', '\x2', '\x2', '\x2', '\x281', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x282', '\x65', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x284', '\a', '-', '\x2', '\x2', '\x284', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x285', '\x286', '\a', '\x14', '\x2', '\x2', '\x286', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x287', '\x288', '\a', '\x1E', '\x2', '\x2', '\x288', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\x289', '\x28A', '\a', '\x19', '\x2', '\x2', 
		'\x28A', 'm', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28C', '\a', '\x1B', 
		'\x2', '\x2', '\x28C', 'o', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', 
		'\a', ' ', '\x2', '\x2', '\x28E', 'q', '\x3', '\x2', '\x2', '\x2', '\x28F', 
		'\x290', '\a', '\x1A', '\x2', '\x2', '\x290', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x291', '\x292', '\a', '&', '\x2', '\x2', '\x292', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x293', '\x294', '\a', '\t', '\x2', '\x2', '\x294', 
		'\x295', '\a', '\'', '\x2', '\x2', '\x295', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x296', '\x297', '\a', '\v', '\x2', '\x2', '\x297', '\x298', '\x5', 
		'z', '>', '\x2', '\x298', '\x299', '\a', '\f', '\x2', '\x2', '\x299', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29B', '\a', '.', '\x2', '\x2', 
		'\x29B', '{', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', '\a', '\x1F', 
		'\x2', '\x2', '\x29D', '\x29F', '\a', '\x5', '\x2', '\x2', '\x29E', '\x2A0', 
		'\x5', '~', '@', '\x2', '\x29F', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\a', '\x6', '\x2', '\x2', '\x2A2', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A9', '\x5', '\x80', '\x41', 
		'\x2', '\x2A4', '\x2A5', '\x5', '\x80', '\x41', '\x2', '\x2A5', '\x2A6', 
		'\a', '\x4', '\x2', '\x2', '\x2A6', '\x2A7', '\x5', '~', '@', '\x2', '\x2A7', 
		'\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A3', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AC', '\x5', '\x82', '\x42', '\x2', 
		'\x2AB', '\x2AD', '\x5', '\x84', '\x43', '\x2', '\x2AC', '\x2AB', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AD', 
		'\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\a', '\t', '\x2', 
		'\x2', '\x2AF', '\x2B1', '\x5', '\\', '/', '\x2', '\x2B0', '\x2AE', '\x3', 
		'\x2', '\x2', '\x2', '\x2B0', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B1', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\t', '\n', '\x2', 
		'\x2', '\x2B3', '\x83', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', 
		'\a', '-', '\x2', '\x2', '\x2B5', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2B7', '\x5', '\x88', '\x45', '\x2', '\x2B7', '\x2B8', '\a', 
		'*', '\x2', '\x2', '\x2B8', '\x87', '\x3', '\x2', '\x2', '\x2', '\x2B9', 
		'\x2BA', '\t', '\v', '\x2', '\x2', '\x2BA', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x2BB', '\x2BC', '\t', '\f', '\x2', '\x2', '\x2BC', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x96', '\x98', '\xA3', '\xA8', '\xB0', '\xB5', 
		'\xB8', '\xBD', '\xC1', '\xC7', '\xD0', '\xD4', '\xDA', '\xE2', '\xE6', 
		'\xF0', '\xFE', '\x100', '\x107', '\x10B', '\x111', '\x11B', '\x127', 
		'\x129', '\x12E', '\x134', '\x137', '\x13E', '\x14A', '\x14F', '\x156', 
		'\x163', '\x168', '\x16F', '\x174', '\x17D', '\x185', '\x18A', '\x18C', 
		'\x190', '\x195', '\x199', '\x19D', '\x1A1', '\x1A4', '\x1AB', '\x1B0', 
		'\x1B7', '\x1BA', '\x1C2', '\x1C4', '\x1CB', '\x1CF', '\x1D2', '\x1D5', 
		'\x1D9', '\x1DC', '\x1E3', '\x1E9', '\x1EB', '\x1F4', '\x1F9', '\x1FF', 
		'\x202', '\x206', '\x209', '\x212', '\x21A', '\x220', '\x224', '\x226', 
		'\x22B', '\x230', '\x232', '\x238', '\x23C', '\x247', '\x24A', '\x24D', 
		'\x250', '\x254', '\x259', '\x25C', '\x260', '\x26A', '\x26D', '\x273', 
		'\x278', '\x27C', '\x281', '\x29F', '\x2A8', '\x2AC', '\x2B0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
