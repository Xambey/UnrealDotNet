//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UHeader.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class UHeaderParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, SingleLineDerective=9, 
		MultiLineDerective=10, AddressQuant=11, Private=12, Protected=13, Public=14, 
		Inline=15, Virtual=16, Class=17, Struct=18, Const=19, Extern=20, Identifier=21, 
		Literal=22, Whitespace=23, Newline=24, BlockComment=25, LineComment=26;
	public const int
		RULE_translationUnit = 0, RULE_topLevelOutClass = 1, RULE_topLevelInClass = 2, 
		RULE_classPreDeclaration = 3, RULE_classDeclaration = 4, RULE_classType = 5, 
		RULE_classParentList = 6, RULE_className = 7, RULE_classBody = 8, RULE_uDefine = 9, 
		RULE_uDefineName = 10, RULE_uMeta = 11, RULE_uMetaParametrList = 12, RULE_uMetaParametr = 13, 
		RULE_uMetaParamKey = 14, RULE_uMetaParamValue = 15, RULE_method = 16, 
		RULE_methodParams = 17, RULE_methodParametr = 18, RULE_methodParametrName = 19, 
		RULE_methodBody = 20, RULE_methodBodyContent = 21, RULE_methodName = 22, 
		RULE_type = 23, RULE_accessSpecifierContainer = 24, RULE_accessSpecifier = 25, 
		RULE_preprocessDerective = 26;
	public static readonly string[] ruleNames = {
		"translationUnit", "topLevelOutClass", "topLevelInClass", "classPreDeclaration", 
		"classDeclaration", "classType", "classParentList", "className", "classBody", 
		"uDefine", "uDefineName", "uMeta", "uMetaParametrList", "uMetaParametr", 
		"uMetaParamKey", "uMetaParamValue", "method", "methodParams", "methodParametr", 
		"methodParametrName", "methodBody", "methodBodyContent", "methodName", 
		"type", "accessSpecifierContainer", "accessSpecifier", "preprocessDerective"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "':'", "'('", "')'", "','", "'='", null, null, 
		null, "'private'", "'protected'", "'public'", "'inline'", "'virtual'", 
		"'class'", "'struct'", "'const'", "'extern'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "SingleLineDerective", 
		"MultiLineDerective", "AddressQuant", "Private", "Protected", "Public", 
		"Inline", "Virtual", "Class", "Struct", "Const", "Extern", "Identifier", 
		"Literal", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UHeader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UHeaderParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UHeaderParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UHeaderParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TranslationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(UHeaderParser.Eof, 0); }
		public TopLevelOutClassContext[] topLevelOutClass() {
			return GetRuleContexts<TopLevelOutClassContext>();
		}
		public TopLevelOutClassContext topLevelOutClass(int i) {
			return GetRuleContext<TopLevelOutClassContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << Class) | (1L << Struct) | (1L << Identifier))) != 0)) {
				{
				{
				State = 54; topLevelOutClass();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelOutClassContext : ParserRuleContext {
		public ClassPreDeclarationContext classPreDeclaration() {
			return GetRuleContext<ClassPreDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public UDefineContext uDefine() {
			return GetRuleContext<UDefineContext>(0);
		}
		public PreprocessDerectiveContext preprocessDerective() {
			return GetRuleContext<PreprocessDerectiveContext>(0);
		}
		public TopLevelOutClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelOutClass; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelOutClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelOutClassContext topLevelOutClass() {
		TopLevelOutClassContext _localctx = new TopLevelOutClassContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelOutClass);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; classPreDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; uDefine();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65; preprocessDerective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelInClassContext : ParserRuleContext {
		public AccessSpecifierContainerContext accessSpecifierContainer() {
			return GetRuleContext<AccessSpecifierContainerContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public UDefineContext uDefine() {
			return GetRuleContext<UDefineContext>(0);
		}
		public PreprocessDerectiveContext preprocessDerective() {
			return GetRuleContext<PreprocessDerectiveContext>(0);
		}
		public TopLevelInClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelInClass; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelInClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelInClassContext topLevelInClass() {
		TopLevelInClassContext _localctx = new TopLevelInClassContext(Context, State);
		EnterRule(_localctx, 4, RULE_topLevelInClass);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; accessSpecifierContainer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; method();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; uDefine();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 71; preprocessDerective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPreDeclarationContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassPreDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPreDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPreDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPreDeclarationContext classPreDeclaration() {
		ClassPreDeclarationContext _localctx = new ClassPreDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_classPreDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; classType();
			State = 75; className();
			State = 76; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassParentListContext classParentList() {
			return GetRuleContext<ClassParentListContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; classType();
			State = 79; className();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 80; classParentList();
				}
			}

			State = 83; Match(T__1);
			State = 84; classBody();
			State = 85; Match(T__2);
			State = 86; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_classType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParentListContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ClassParentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParentListContext classParentList() {
		ClassParentListContext _localctx = new ClassParentListContext(Context, State);
		EnterRule(_localctx, 12, RULE_classParentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__3);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
				{
				State = 91; accessSpecifier();
				}
			}

			State = 94; className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public TopLevelInClassContext[] topLevelInClass() {
			return GetRuleContexts<TopLevelInClassContext>();
		}
		public TopLevelInClassContext topLevelInClass(int i) {
			return GetRuleContext<TopLevelInClassContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SingleLineDerective) | (1L << MultiLineDerective) | (1L << AddressQuant) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Class) | (1L << Struct) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				{
				State = 98; topLevelInClass();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineContext : ParserRuleContext {
		public UDefineNameContext uDefineName() {
			return GetRuleContext<UDefineNameContext>(0);
		}
		public UMetaContext uMeta() {
			return GetRuleContext<UMetaContext>(0);
		}
		public UDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineContext uDefine() {
		UDefineContext _localctx = new UDefineContext(Context, State);
		EnterRule(_localctx, 18, RULE_uDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; uDefineName();
			State = 105; Match(T__4);
			State = 106; uMeta();
			State = 107; Match(T__5);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 108; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UDefineNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public UDefineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uDefineName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUDefineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UDefineNameContext uDefineName() {
		UDefineNameContext _localctx = new UDefineNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_uDefineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaContext : ParserRuleContext {
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMeta; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaContext uMeta() {
		UMetaContext _localctx = new UMetaContext(Context, State);
		EnterRule(_localctx, 22, RULE_uMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AddressQuant) | (1L << Class) | (1L << Struct) | (1L << Const) | (1L << Identifier) | (1L << Literal))) != 0)) {
				{
				State = 113; uMetaParametrList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrListContext : ParserRuleContext {
		public UMetaParametrContext uMetaParametr() {
			return GetRuleContext<UMetaParametrContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametrList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrListContext uMetaParametrList() {
		UMetaParametrListContext _localctx = new UMetaParametrListContext(Context, State);
		EnterRule(_localctx, 24, RULE_uMetaParametrList);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; uMetaParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; uMetaParametr();
				State = 118; Match(T__6);
				State = 119; uMetaParametrList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParametrContext : ParserRuleContext {
		public UMetaParamKeyContext uMetaParamKey() {
			return GetRuleContext<UMetaParamKeyContext>(0);
		}
		public UMetaParamValueContext uMetaParamValue() {
			return GetRuleContext<UMetaParamValueContext>(0);
		}
		public UMetaParametrListContext uMetaParametrList() {
			return GetRuleContext<UMetaParametrListContext>(0);
		}
		public UMetaParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParametrContext uMetaParametr() {
		UMetaParametrContext _localctx = new UMetaParametrContext(Context, State);
		EnterRule(_localctx, 26, RULE_uMetaParametr);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; uMetaParamKey();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; uMetaParamKey();
				State = 125; Match(T__7);
				State = 126; uMetaParamValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; uMetaParamKey();
				State = 129; Match(T__7);
				State = 130; Match(T__4);
				State = 131; uMetaParametrList();
				State = 132; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamKeyContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public UMetaParamKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamKey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamKeyContext uMetaParamKey() {
		UMetaParamKeyContext _localctx = new UMetaParamKeyContext(Context, State);
		EnterRule(_localctx, 28, RULE_uMetaParamKey);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AddressQuant:
			case Class:
			case Struct:
			case Const:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; type();
				}
				break;
			case Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; Match(Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UMetaParamValueContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Literal() { return GetToken(UHeaderParser.Literal, 0); }
		public UMetaParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uMetaParamValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMetaParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UMetaParamValueContext uMetaParamValue() {
		UMetaParamValueContext _localctx = new UMetaParamValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_uMetaParamValue);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AddressQuant:
			case Class:
			case Struct:
			case Const:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140; type();
				}
				break;
			case Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; Match(Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodParamsContext methodParams() {
			return GetRuleContext<MethodParamsContext>(0);
		}
		public ITerminalNode Const() { return GetToken(UHeaderParser.Const, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 32, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; type();
			State = 145; methodName();
			State = 146; Match(T__4);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AddressQuant) | (1L << Class) | (1L << Struct) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 147; methodParams();
				}
			}

			State = 150; Match(T__5);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 151; Match(Const);
				}
			}

			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 154; methodBody();
				}
				break;
			case T__0:
				{
				State = 155; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParamsContext : ParserRuleContext {
		public MethodParametrContext methodParametr() {
			return GetRuleContext<MethodParametrContext>(0);
		}
		public MethodParamsContext methodParams() {
			return GetRuleContext<MethodParamsContext>(0);
		}
		public MethodParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParams; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParamsContext methodParams() {
		MethodParamsContext _localctx = new MethodParamsContext(Context, State);
		EnterRule(_localctx, 34, RULE_methodParams);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; methodParametr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; methodParametr();
				State = 160; Match(T__6);
				State = 161; methodParams();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodParametrNameContext methodParametrName() {
			return GetRuleContext<MethodParametrNameContext>(0);
		}
		public MethodParametrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrContext methodParametr() {
		MethodParametrContext _localctx = new MethodParametrContext(Context, State);
		EnterRule(_localctx, 36, RULE_methodParametr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; type();
			State = 166; methodParametrName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametrNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public MethodParametrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParametrName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParametrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametrNameContext methodParametrName() {
		MethodParametrNameContext _localctx = new MethodParametrNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_methodParametrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContentContext methodBodyContent() {
			return GetRuleContext<MethodBodyContentContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(T__1);
			State = 171; methodBodyContent();
			State = 172; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContentContext : ParserRuleContext {
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodBodyContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBodyContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBodyContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContentContext methodBodyContent() {
		MethodBodyContentContext _localctx = new MethodBodyContentContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodBodyContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 174; methodBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(UHeaderParser.Identifier, 0); }
		public ITerminalNode Const() { return GetToken(UHeaderParser.Const, 0); }
		public ITerminalNode[] AddressQuant() { return GetTokens(UHeaderParser.AddressQuant); }
		public ITerminalNode AddressQuant(int i) {
			return GetToken(UHeaderParser.AddressQuant, i);
		}
		public ITerminalNode Class() { return GetToken(UHeaderParser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(UHeaderParser.Struct, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 179; Match(Const);
				}
			}

			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Class || _la==Struct) {
				{
				State = 182;
				_la = TokenStream.LA(1);
				if ( !(_la==Class || _la==Struct) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AddressQuant) {
				{
				{
				State = 185; Match(AddressQuant);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191; Match(Identifier);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AddressQuant) {
				{
				{
				State = 192; Match(AddressQuant);
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContainerContext : ParserRuleContext {
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public AccessSpecifierContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifierContainer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifierContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContainerContext accessSpecifierContainer() {
		AccessSpecifierContainerContext _localctx = new AccessSpecifierContainerContext(Context, State);
		EnterRule(_localctx, 48, RULE_accessSpecifierContainer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; accessSpecifier();
			State = 199; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(UHeaderParser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(UHeaderParser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(UHeaderParser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext accessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessDerectiveContext : ParserRuleContext {
		public ITerminalNode SingleLineDerective() { return GetToken(UHeaderParser.SingleLineDerective, 0); }
		public ITerminalNode MultiLineDerective() { return GetToken(UHeaderParser.MultiLineDerective, 0); }
		public PreprocessDerectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessDerective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUHeaderVisitor<TResult> typedVisitor = visitor as IUHeaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessDerective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessDerectiveContext preprocessDerective() {
		PreprocessDerectiveContext _localctx = new PreprocessDerectiveContext(Context, State);
		EnterRule(_localctx, 52, RULE_preprocessDerective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = TokenStream.LA(1);
			if ( !(_la==SingleLineDerective || _la==MultiLineDerective) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\xD0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\a', 
		'\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x45', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'K', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'T', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '_', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', '\n', '\x66', '\n', 
		'\n', '\f', '\n', '\xE', '\n', 'i', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'p', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x5', '\r', 'u', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'|', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x89', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x8D', '\n', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x91', '\n', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x97', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x9B', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x9F', '\n', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\xA6', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x5', '\x17', '\xB2', '\n', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x5', '\x19', '\xB7', '\n', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\xBA', '\n', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\xBD', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\xC0', '\v', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\xC4', '\n', '\x19', '\f', 
		'\x19', '\xE', '\x19', '\xC7', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x2', '\x2', '\x1D', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x2', '\x5', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\xE', '\x10', 
		'\x3', '\x2', '\v', '\f', '\x2', '\xCE', '\x2', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x44', '\x3', '\x2', '\x2', '\x2', '\x6', 'J', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'L', '\x3', '\x2', '\x2', '\x2', '\n', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'Z', '\x3', '\x2', '\x2', '\x2', '\xE', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'g', '\x3', '\x2', '\x2', '\x2', '\x14', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'q', '\x3', '\x2', '\x2', '\x2', '\x18', 't', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '{', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x90', '\x3', '\x2', '\x2', '\x2', '\"', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xA5', '\x3', '\x2', '\x2', '\x2', '&', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xAA', '\x3', '\x2', '\x2', '\x2', '*', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xB1', '\x3', '\x2', '\x2', '\x2', '.', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x34', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x38', ':', 
		'\x5', '\x4', '\x3', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', 
		'\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x2', '\x2', 
		'\x3', '?', '\x3', '\x3', '\x2', '\x2', '\x2', '@', '\x45', '\x5', '\b', 
		'\x5', '\x2', '\x41', '\x45', '\x5', '\n', '\x6', '\x2', '\x42', '\x45', 
		'\x5', '\x14', '\v', '\x2', '\x43', '\x45', '\x5', '\x36', '\x1C', '\x2', 
		'\x44', '@', '\x3', '\x2', '\x2', '\x2', '\x44', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'K', '\x5', '\x32', '\x1A', '\x2', 'G', 'K', '\x5', '\"', '\x12', 
		'\x2', 'H', 'K', '\x5', '\x14', '\v', '\x2', 'I', 'K', '\x5', '\x36', 
		'\x1C', '\x2', 'J', '\x46', '\x3', '\x2', '\x2', '\x2', 'J', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'K', '\a', '\x3', '\x2', '\x2', '\x2', 'L', 'M', 
		'\x5', '\f', '\a', '\x2', 'M', 'N', '\x5', '\x10', '\t', '\x2', 'N', 'O', 
		'\a', '\x3', '\x2', '\x2', 'O', '\t', '\x3', '\x2', '\x2', '\x2', 'P', 
		'Q', '\x5', '\f', '\a', '\x2', 'Q', 'S', '\x5', '\x10', '\t', '\x2', 'R', 
		'T', '\x5', '\xE', '\b', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\a', '\x4', '\x2', '\x2', 'V', 'W', '\x5', '\x12', '\n', '\x2', 
		'W', 'X', '\a', '\x5', '\x2', '\x2', 'X', 'Y', '\a', '\x3', '\x2', '\x2', 
		'Y', '\v', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\t', '\x2', '\x2', '\x2', 
		'[', '\r', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\a', '\x6', '\x2', 
		'\x2', ']', '_', '\x5', '\x34', '\x1B', '\x2', '^', ']', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x61', '\x5', '\x10', '\t', '\x2', '\x61', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x17', '\x2', '\x2', 
		'\x63', '\x11', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x5', '\x6', 
		'\x4', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x5', '\x16', '\f', '\x2', 
		'k', 'l', '\a', '\a', '\x2', '\x2', 'l', 'm', '\x5', '\x18', '\r', '\x2', 
		'm', 'o', '\a', '\b', '\x2', '\x2', 'n', 'p', '\a', '\x3', '\x2', '\x2', 
		'o', 'n', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x15', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\x17', '\x2', 
		'\x2', 'r', '\x17', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x5', '\x1A', 
		'\xE', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'u', '\x19', '\x3', '\x2', '\x2', '\x2', 'v', '|', '\x5', 
		'\x1C', '\xF', '\x2', 'w', 'x', '\x5', '\x1C', '\xF', '\x2', 'x', 'y', 
		'\a', '\t', '\x2', '\x2', 'y', 'z', '\x5', '\x1A', '\xE', '\x2', 'z', 
		'|', '\x3', '\x2', '\x2', '\x2', '{', 'v', '\x3', '\x2', '\x2', '\x2', 
		'{', 'w', '\x3', '\x2', '\x2', '\x2', '|', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x89', '\x5', '\x1E', '\x10', '\x2', '~', '\x7F', '\x5', 
		'\x1E', '\x10', '\x2', '\x7F', '\x80', '\a', '\n', '\x2', '\x2', '\x80', 
		'\x81', '\x5', ' ', '\x11', '\x2', '\x81', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x5', '\x1E', '\x10', '\x2', '\x83', '\x84', '\a', 
		'\n', '\x2', '\x2', '\x84', '\x85', '\a', '\a', '\x2', '\x2', '\x85', 
		'\x86', '\x5', '\x1A', '\xE', '\x2', '\x86', '\x87', '\a', '\b', '\x2', 
		'\x2', '\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '~', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x89', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8D', '\x5', '\x30', '\x19', '\x2', '\x8B', '\x8D', '\a', 
		'\x18', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x91', '\x5', '\x30', '\x19', '\x2', '\x8F', '\x91', '\a', 
		'\x18', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x5', '\x30', '\x19', '\x2', '\x93', '\x94', '\x5', 
		'.', '\x18', '\x2', '\x94', '\x96', '\a', '\a', '\x2', '\x2', '\x95', 
		'\x97', '\x5', '$', '\x13', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x9A', '\a', '\b', '\x2', '\x2', '\x99', 
		'\x9B', '\a', '\x15', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9F', '\x5', '*', '\x16', '\x2', '\x9D', 
		'\x9F', '\a', '\x3', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA6', '\x5', '&', '\x14', '\x2', '\xA1', 
		'\xA2', '\x5', '&', '\x14', '\x2', '\xA2', '\xA3', '\a', '\t', '\x2', 
		'\x2', '\xA3', '\xA4', '\x5', '$', '\x13', '\x2', '\xA4', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA6', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x5', '\x30', '\x19', '\x2', '\xA8', '\xA9', '\x5', 
		'(', '\x15', '\x2', '\xA9', '\'', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\a', '\x17', '\x2', '\x2', '\xAB', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\a', '\x4', '\x2', '\x2', '\xAD', '\xAE', '\x5', 
		',', '\x17', '\x2', '\xAE', '\xAF', '\a', '\x5', '\x2', '\x2', '\xAF', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\x5', '*', '\x16', '\x2', 
		'\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '-', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', 
		'\a', '\x17', '\x2', '\x2', '\xB4', '/', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB7', '\a', '\x15', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xBA', '\t', '\x2', '\x2', '\x2', '\xB9', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBD', '\a', 
		'\r', '\x2', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC5', '\a', '\x17', '\x2', '\x2', '\xC2', '\xC4', '\a', '\r', '\x2', 
		'\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x5', 
		'\x34', '\x1B', '\x2', '\xC9', '\xCA', '\a', '\x6', '\x2', '\x2', '\xCA', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\t', '\x3', '\x2', 
		'\x2', '\xCC', '\x35', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\t', 
		'\x4', '\x2', '\x2', '\xCE', '\x37', '\x3', '\x2', '\x2', '\x2', '\x17', 
		';', '\x44', 'J', 'S', '^', 'g', 'o', 't', '{', '\x88', '\x8C', '\x90', 
		'\x96', '\x9A', '\x9E', '\xA5', '\xB1', '\xB6', '\xB9', '\xBE', '\xC5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
